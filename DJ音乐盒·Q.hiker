海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@DJ音乐盒·Q@eyJsYXN0X2NoYXB0ZXJfcnVsZSI6IiIsInRpdGxlIjoiRErpn7PkuZDnm5LCt1EiLCJhdXRob3IiOiLlj5HnsqrmtoLlopkiLCJ1cmwiOiJoaWtlcjovL2VtcHR5IyNmeXBhZ2UiLCJ2ZXJzaW9uIjowLCJjb2xfdHlwZSI6ImNhcmRfcGljXzMiLCJjbGFzc19uYW1lIjoiIiwidHlwZSI6Im11c2ljIiwiY2xhc3NfdXJsIjoiIiwiYXJlYV9uYW1lIjoiIiwiYXJlYV91cmwiOiIiLCJzb3J0X25hbWUiOiIiLCJ5ZWFyX25hbWUiOiIiLCJzb3J0X3VybCI6IiIsInllYXJfdXJsIjoiIiwiZmluZF9ydWxlIjoianM6XG5yZXF1aXJlKCdoaWtlcjovL3BhZ2Uv6aG16Z2iJykiLCJzZWFyY2hfdXJsIjoiaHR0cHM6Ly9hcHBzby5kanl1bGUuY29tL3NlYXJjaC5hc3A/VXNlZGF5cz03NyZ1cEhZaWQ9JkhZemh1Y2hlZGF0ZT0yMDEwJTJGMiUyRjEyKzElM0EyNyUzQTAwJmtleU5hbWU9KiomVklQZ3JhZGU9MCZwYWdlPWZ5cGFnZSIsImdyb3VwIjoi4pGi6Z+z5LmQIiwic2VhcmNoRmluZCI6ImpzOlxucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL+mhtemdoicpIiwiZGV0YWlsX2NvbF90eXBlIjoibW92aWVfMSIsImRldGFpbF9maW5kX3J1bGUiOiIiLCJzZGV0YWlsX2NvbF90eXBlIjoibW92aWVfMSIsInNkZXRhaWxfZmluZF9ydWxlIjoiIiwidWEiOiJtb2JpbGUiLCJwcmVSdWxlIjoiIiwicGFnZXMiOiJbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuWIl+ihqFwiLFwicGF0aFwiOlwibGJcIixcInJ1bGVcIjpcImNvbnN0IOWIl+ihqCA9IChkYXRhLCBkKSA9PiB7XFxuICAgIGQgPSBkIHx8IFtdXFxuICAgIGlmIChkYXRhLnN0YXJ0c1dpdGgoJ2h0dHAnKSl7ZGF0YSA9IHJlcXVlc3QoZGF0YSl9XFxuICAgIHBkZmEoZGF0YSwgJ3BsYW50cyYmUExBTlQnKS5mb3JFYWNoKGxpc3QgPT4ge1xcbiAgICAgICAgdmFyIElEID0gcGRmaChsaXN0LCAnSUQmJlRleHQnKVxcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogcGRmaChsaXN0LCAnTkFNRSYmVGV4dCcpLFxcbiAgICAgICAgICAgIGRlc2M6IHBkZmgobGlzdCwgJ0ZJTEVTSVpFJiZUZXh0JyksXFxuICAgICAgICAgICAgaW1nOiAnaHR0cDovL2ltZy5kanl1bGUuY29tL1BpYzEyMC8nICsgcGRmaChsaXN0LCAnSFlob21lSUQmJlRleHQnKSArICcuanBnJyxcXG4gICAgICAgICAgICB1cmw6ICQocGRmaChsaXN0LCAnUExBWVVSTCYmVGV4dCcpKS5sYXp5UnVsZSgoSUQpID0+IHtcXG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSByZXF1ZXN0KCdodHRwczovL2FwcHhtbC5kanl1bGUuY29tL3dlYlNlcnZlcl9hbmRyb2lkX21kNS5hc3A/YXJnMT1NakF5TWkwd015MHhNaXN5TWlVelFUUTRKVE5CTURBJTNEJnNpZ249NTA0OGMwMzBjNGIwYTQ5ODdiM2NhMDgwOTJhNjAzNjEnKVxcblxcbiAgICAgICAgICAgICAgICB2YXIgdXJscyA9IHBkZmEoaHRtbCwgJ2JvZHkmJlBMQU5UJykubWFwKGggPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIE1pbiA9IHBkZmgoaCwgJ01pbiYmVGV4dCcpXFxuICAgICAgICAgICAgICAgICAgICB2YXIgTWF4ID0gcGRmaChoLCAnTWF4JiZUZXh0JylcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgTWluOiBNaW4sXFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF4OiBNYXggPT0gJycgPyAnOTk5OTk5JyA6IE1heCxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBkZmgoaCwgJ1NlcnZlclVSTCYmVGV4dCcpICsgaW5wdXRcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSkuZmlsdGVyKGl0ZW0gPT4gSUQgPiBwYXJzZUludChpdGVtLk1pbikgJiYgSUQgPCBwYXJzZUludChpdGVtLk1heCkpXFxuICAgICAgICAgICAgICAgIHVybHMgPSB1cmxzLm1hcCh1cmwgPT4gdXJsLnVybClcXG5cXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGltZSh0aW1lKSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgW2gsIG0sIHNdID0gdGltZS5zcGxpdCgnOicpXFxuICAgICAgICAgICAgICAgICAgICBoID0gcGFyc2VJbnQoaCAqIDYwKSArIHBhcnNlSW50KG0pXFxuICAgICAgICAgICAgICAgICAgICBoID0gaCA8IDEwID8gJzAnICsgaCA6IGhcXG4gICAgICAgICAgICAgICAgICAgIHMgPSBwYXJzZUludChzKVxcbiAgICAgICAgICAgICAgICAgICAgcyA9IHMgPCAxMCA/ICcwJyArIHMgOiBzXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCArICc6JyArIHMgKyAnLjAwJ1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHZhciBseXJpYyA9IHBkZmEocmVxdWVzdCgnaHR0cHM6Ly9hcHB4bWwuZGp5dWxlLmNvbS9wbGF5X1FTbXVzaWNMaXN0LmFzcD9Vc2VkYXlzPTczJm11c2ljSUQ9JyArIElEKSwgJ2JvZHkmJlBMQU5UJykubWFwKHQgPT4gYFske2dldFRpbWUocGRmaCh0LCAnc2hvd1RpbWUmJlRleHQnKSl9XSR7cGRmaCh0LCAnUVNtdXNpY05hbWUmJlRleHQnKX1gKS5qb2luKCdcXFxcclxcXFxuJylcXG5cXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICAgICAgICAgIHVybHM6IHVybHMsXFxuICAgICAgICAgICAgICAgICAgICBuYW1lczogWyczMjBLJywgJzY0SyddLFxcbiAgICAgICAgICAgICAgICAgICAgbHlyaWM6IGx5cmljXFxuICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgfSwgcGFyc2VJbnQoSUQpKSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlLFxcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ/Cfk6XmlLbol48nLFxcbiAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKElEKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSBwZGZoKHJlcXVlc3QoYGh0dHBzOi8vYXBwc2MuZGp5dWxlLmNvbS9tdXNpY0JveF9hZGRfMjAyMm1kNS5hc3A/SHluYW1lPSR7Z2V0SXRlbSgn6LSm5Y+3JywnJyl9JmlkPWAgKyBiYXNlNjRFbmNvZGUoSUQpKSwgJ2JhY2tJbmZvJiZUZXh0JylcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly8nICsgdGV4dFxcbiAgICAgICAgICAgICAgICAgICAgfSwgSUQpXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+TpOWPlua2iCcsXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoSUQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHBkZmgocmVxdWVzdChgaHR0cHM6Ly9hcHBzYy5kanl1bGUuY29tL211c2ljQm94X2RlbF8yMDIybWQ1LmFzcD9IeW5hbWU9JHtnZXRJdGVtKCfotKblj7cnLCcnKX0maWQ9YCArIGJhc2U2NEVuY29kZShJRCkpLCAnYmFja0luZm8mJlRleHQnKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovLycgKyB0ZXh0XFxuICAgICAgICAgICAgICAgICAgICB9LCBJRClcXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLwn5Gk566h55CGXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwiXFxcIiwgXFxcIuW9k+WJjei0puWPt+aYr++8mlxcXCIgKyBnZXRJdGVtKFxcXCLotKblj7dcXFwiKSkuaW5wdXQoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXCLotKblj7dcXFwiLCBpbnB1dCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mt7vliqDmiJDlip9cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH1dXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgc2V0UmVzdWx0KGQpXFxufVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5YiG57G7XCIsXCJwYXRoXCI6XCJ0YWJzXCIsXCJydWxlXCI6XCJsZXQgdGFicyA9IHN0b3JhZ2UwLmdldE15VmFyKCd0YWJzJyk7XFxuaWYgKCF0YWJzKSB7XFxuICAgIHRhYnMgPSBbe1xcbiAgICAgICAgdGl0bGU6ICd0eXBlJyxcXG4gICAgICAgIG5hbWVzOiBbJ+WIhuexuycsICfmppzljZUnLCAn5L2c6ICFJywn5q2M5Y2VJywn5pS26JePJ10sXFxuICAgICAgICBpZHM6IFsn5YiG57G7JywgJ+amnOWNlScsICfkvZzogIUnLCfmrYzljZUnLCfmlLbol48nXSxcXG4gICAgICAgIGFycjogW1xcbiAgICAgICAgICAgIFt7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAn5YiG57G7JyxcXG4gICAgICAgICAgICAgICAgbmFtZXM6IFsn5Liy54OnJywgJ+S4reaWhycsICfmhaLmkYcnLCAn6Iux5paHJywgJ+S6pOiwiuiIniddLFxcbiAgICAgICAgICAgICAgICBpZHM6IFsnWENRUycsICdaV1dRJywgJ01IV1EnLCAnWVdXUScsICdqaWFvWWknXSxcXG4gICAgICAgICAgICAgICAgYXJyOiBbXFxuICAgICAgICAgICAgICAgICAgICBbe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnWENRUycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM6IFsn5pyA5pawJywgJ+WOn+WImycsICfnsr7lk4EnLCAn5o6o6I2QJywgJ+eLrOWuticsICfng63pl6gnLCAn5Lq65rCUJywgJ+S4i+i9vSddLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkczogWyduZXdVUCcsICdZQycsICdKUCcsICdUSicsICdEdUppYScsICdkb3duJywgJ1BIJywgJ2RpbmcnXVxcbiAgICAgICAgICAgICAgICAgICAgfV0sXFxuICAgICAgICAgICAgICAgICAgICBbe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnWldXUScsXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM6IFsn5pyA5pawJywgJ+WOn+WImycsICfmjqjojZAnLCAn5Lq65rCUJywgJ+eDremXqCddLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkczogWyduZXdVUCcsICdZQycsICdUSicsICdQSCcsICdkb3duJ11cXG4gICAgICAgICAgICAgICAgICAgIH1dLFxcbiAgICAgICAgICAgICAgICAgICAgW3tcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01IV1EnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzOiBbJ+acgOaWsCcsICfljp/liJsnLCAn5o6o6I2QJywgJ+S6uuawlCcsICfng63pl6gnXSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHM6IFsnbmV3VVAnLCAnWUMnLCAnVEonLCAnUEgnLCAnZG93biddLFxcbiAgICAgICAgICAgICAgICAgICAgfV0sXFxuICAgICAgICAgICAgICAgICAgICBbe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnWVdXUScsXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM6IFsn5pyA5pawJywgJ+i/keacnycsICfmjqjojZAnLCAn5Lq65rCUJywgJ+eDremXqCddLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkczogWyduZXdVUCcsICdkaW5nX3dlZWsnLCAnVEonLCAnUEgnLCAnZG93biddLFxcbiAgICAgICAgICAgICAgICAgICAgfV0sXFxuICAgICAgICAgICAgICAgICAgICBbe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnamlhb1lpJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lczogWyfmnIDmlrAnLCAn5o6o6I2QJywgJ+S6uuawlCcsICfkuIvovb0nLCAn5bm/5Zy66IieJ10sXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWRzOiBbJ25ld1VQJywgJ1RKJywgJ1BIJywgJ2Rvd25sb2FkJywgJ2d1YW5nY2hhbmcnXSxcXG4gICAgICAgICAgICAgICAgICAgIH1dXFxuICAgICAgICAgICAgICAgIF1cXG4gICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnc29ydCcsXFxuICAgICAgICAgICAgICAgIG5hbWVzOiBbJ+aXtumXtCcsICfkurrmsJQnXSxcXG4gICAgICAgICAgICAgICAgaWRzOiBbJ25ldycsICdwaCddXFxuICAgICAgICAgICAgfV0sbnVsbCxbe1xcblxcdFxcdFxcdCAgICAgICAgdGl0bGU6ICfkvZzogIUnLFxcbiAgICAgICAgICAgICAgICBuYW1lczogWyfmtLvot4MnLCAn54us5a62Jywn5Lq65rCUJywn5pyA5pawJywn5oiR55qE5YWz5rOoJ10sXFxuICAgICAgICAgICAgICAgIGlkczogWydodW95dWUnLCAnZHVqaWEnLCdmZW5nc2hpJywnbmV3YWRkJywn5YWz5rOoJ11cXG5cXHRcXHRcXHR9XSxbe1xcblxcdFxcdFxcdCAgICAgICAgdGl0bGU6ICfmrYzljZUnLFxcbiAgICAgICAgICAgICAgICBuYW1lczogWyfnsr7pgIknLCAn5pyA5pawJywn5Lq65rCUJywn5oiR55qE5q2M5Y2VJ10sXFxuICAgICAgICAgICAgICAgIGlkczogWydqeCcsICduZXcnLCdzYycsJ+atjOWNlSddXFxuXFx0XFx0XFx0fV0sbnVsbFxcbiAgICAgICAgXVxcbiAgICB9XVxcbiAgICBzdG9yYWdlMC5wdXRNeVZhcigndGFicycsIHRhYnMpXFxufVxcblxcbmxldCBkID0gW11cXG52YXIgZ2V0UmFuZ2VDb2xvcnMgPSAoKSA9PiB7wqDCoMKgwqDCoMKgwqBcXG4gICAgcmV0dXJuICcjJyArICgnMDAwMDAnICsgKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAgPDwgMCkudG9TdHJpbmcoMTYpKS5zdWJzdHIoLTYpO8KgwqDCoMKgwqBcXG59XFxuXFxuZnVuY3Rpb24gc2V0VGFicyh0YWJzKSB7XFxuICAgIGlmICghdGFicykgcmV0dXJuXFxuICAgIGZvciAobGV0IGRhdGEgb2YgdGFicykge1xcbiAgICAgICAgZ2V0TXlWYXIoZGF0YS50aXRsZSkgfHwgcHV0TXlWYXIoZGF0YS50aXRsZSwgZGF0YS5pZHNbMF0pO1xcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLm5hbWVzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKGRhdGEudGl0bGUpID09PSBkYXRhLmlkc1tpXSA/IGDigJzigJzigJ3igJ08Zm9udCBjb2xvcj1cXFwiJHtnZXRSYW5nZUNvbG9ycygpfVxcXCI+PGI+JHtkYXRhLm5hbWVzW2ldfTwvYj48L2ZvbnQ+YCA6IGRhdGEubmFtZXNbaV0sXFxuICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgodGl0bGUsIGlkKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TXlWYXIodGl0bGUpICE9PSBpZCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKHRpdGxlLCBpZCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgICAgICAgICAgICAgfSwgZGF0YS50aXRsZSwgZGF0YS5pZHNbaV0pLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxuICAgICAgICAgICAgfSlcXG4gICAgICAgIH1cXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXG4gICAgICAgIH0pXFxuICAgICAgICBpZiAoZGF0YS5hcnIpIHtcXG4gICAgICAgICAgICBzZXRUYWJzKGRhdGEuYXJyW2RhdGEuaWRzLmluZGV4T2YoZ2V0TXlWYXIoZGF0YS50aXRsZSkpXSlcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5zZXRUYWJzKHRhYnMpXFxuXFxuc3RvcmFnZTAucHV0TXlWYXIoJ2l0ZW1zJywgZClcIn0se1wiY29sX3R5cGVcIjpcImljb25fMl9yb3VuZFwiLFwibmFtZVwiOlwi6aG16Z2iXCIsXCJwYXRoXCI6XCLpobXpnaJcIixcInJ1bGVcIjpcInZhciDmppzljZUgPSAoZCkgPT4ge1xcbiAgICB2YXIgaHRtbCA9IHJlcXVlc3QoYGh0dHBzOi8vYXBweG1sLmRqeXVsZS5jb20vUEhCaG9tZV8yMDIwLnhtbGApXFxuICAgIHBkZmEoaHRtbCwgJ2JvZHkmJlBIQmxpc3QnKS5mb3JFYWNoKGxpc3QgPT4ge1xcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAvLyB0aXRsZTogcGRmaChsaXN0LCAnTkFNRSYmVGV4dCcpLFxcbiAgICAgICAgICAgIGRlc2M6ICcwJyxcXG4gICAgICAgICAgICBpbWc6ICdodHRwOi8vaW1nLmRqeXVsZS5jb20vUEhCLycgKyBwZGZoKGxpc3QsICdJTUdJQ098fFpKaW1nJiZUZXh0JyksXFxuICAgICAgICAgICAgdXJsOiAkKGBodHRwczovL2FwcHhtbC5kanl1bGUuY29tLyR7cGRmaChsaXN0LCAnSUQmJlRleHQnKX1fZnlwYWdlLnhtbGApLnJ1bGUoKG5hbWUpID0+IHtcXG4gICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKG5hbWUpXFxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9sYicpXFxuICAgICAgICAgICAgICAgIHJldHVybiDliJfooagoZ2V0UmVzQ29kZSgpKVxcbiAgICAgICAgICAgIH0sIHBkZmgobGlzdCwgJ05BTUUmJlRleHQnKSksXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18yJ1xcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgcGRmYShodG1sLCAnYm9keSYmWWVhck5hbWUnKS5mb3JFYWNoKHRpdGxlID0+IHtcXG4gICAgICAgIHZhciBuYW1lID0gcGRmaCh0aXRsZSwgJ1RJVExFJiZUZXh0JykgKyAn5bm05o6S6KGM5qacJ1xcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogbmFtZSxcXG4gICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pXFxuICAgICAgICBwZGZhKHRpdGxlLCAnYm9keSYmUExBTlQnKS5yZXZlcnNlKCkuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogcGRmaChsaXN0LCAnTkFNRSYmVGV4dCcpLFxcbiAgICAgICAgICAgICAgICBkZXNjOiAnMCcsXFxuICAgICAgICAgICAgICAgIGltZzogJ2h0dHA6Ly9pbWcuZGp5dWxlLmNvbS9QSEIvJyArIHBkZmgobGlzdCwgJ0lNR0lDT3x8WkppbWcmJlRleHQnKSxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKGBodHRwczovL2FwcHhtbC5kanl1bGUuY29tLyR7cGRmaChsaXN0LCAnSUQmJlRleHQnKX1fZnlwYWdlLnhtbGApLnJ1bGUoKG5hbWUpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZShuYW1lICsgJy0nICsgZ2V0UGFnZVRpdGxlKCkpXFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdoaWtlcjovL3BhZ2UvbGInKVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIOWIl+ihqChnZXRSZXNDb2RlKCkpXFxuICAgICAgICAgICAgICAgIH0sIG5hbWUpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ljb25fcm91bmRfNCdcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgc2V0UmVzdWx0KGQpXFxufVxcbnZhciDmrYzljZUgPSAoZCkgPT4ge1xcbiAgICBpZiAoZ2V0TXlWYXIoJ+atjOWNlScpID09ICfmrYzljZUnKSB7XFxuICAgICAgICB2YXIgaHRtbCA9IHJlcXVlc3QoYGh0dHBzOi8vYXBwc2MuZGp5dWxlLmNvbS9TQ1pKX2xvYWRfbmV3LmFzcD9IeW5hbWU9JHtnZXRJdGVtKCfotKblj7cnLCcnKX0mcGFnZT0ke01ZX1BBR0V9YClcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHZhciBodG1sID0gcmVxdWVzdChgaHR0cHM6Ly9hcHB4bWwuZGp5dWxlLmNvbS9nZURhbl8ke2dldE15VmFyKCfmrYzljZUnKX1fJHtNWV9QQUdFfS54bWxgKVxcbiAgICB9XFxuICAgIHBkZmEoaHRtbCwgJ3BsYW50cyYmUExBTlR8fFpKJykuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgIHZhciBJRCA9IHBkZmgobGlzdCwgJ0lEJiZUZXh0JylcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IHBkZmgobGlzdCwgJ05BTUUmJlRleHQnKSxcXG4gICAgICAgICAgICBpbWc6ICdodHRwOi8vaW1nLmRqeXVsZS5jb20vJyArIHBkZmgobGlzdCwgJ0lNR0lDT3x8WkppbWcmJlRleHQnKSxcXG4gICAgICAgICAgICB1cmw6ICQoYGh0dHBzOi8vYXBweG1sLmRqeXVsZS5jb20vJHtJRH0ueG1sYCkucnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9sYicpXFxuICAgICAgICAgICAgICAgIHJldHVybiDliJfooagoZ2V0UmVzQ29kZSgpKVxcbiAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3tcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+TpeatjOWNlScsXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoSUQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHBkZmgocmVxdWVzdChgaHR0cHM6Ly9hcHBzYy5kanl1bGUuY29tL1NDRmxvZGVyX2FkZF8yMDIybWQ1LmFzcD9aSmlkPSR7YmFzZTY0RW5jb2RlKElEKX0mSHluYW1lPSR7Z2V0SXRlbSgn6LSm5Y+3JywnJyl9JkhZaWQ9MGApLCAnYmFja0luZm8mJlRleHQnKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovLycgKyB0ZXh0XFxuICAgICAgICAgICAgICAgICAgICB9LCBJRClcXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfwn5Ok5Y+W5raIJyxcXG4gICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChJRCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gcGRmaChyZXF1ZXN0KGBodHRwczovL2FwcHNjLmRqeXVsZS5jb20vU0NGbG9kZXJfZGVsXzIwMjJtZDUuYXNwP1pKaWQ9JHtiYXNlNjRFbmNvZGUoSUQpfSZIeW5hbWU9JHtnZXRJdGVtKCfotKblj7cnLCcnKX0mU0N6aklEPTBgKSwgJ2JhY2tJbmZvJiZUZXh0JylcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly8nICsgdGV4dFxcbiAgICAgICAgICAgICAgICAgICAgfSwgSUQpXFxuICAgICAgICAgICAgICAgIH1dXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgc2V0UmVzdWx0KGQpXFxufVxcbnZhciDkvZzogIUgPSAoZCkgPT4ge1xcbiAgICBpZiAoZ2V0TXlWYXIoJ+S9nOiAhScpID09ICflhbPms6gnKSB7XFxuICAgICAgICB2YXIgaHRtbCA9IHJlcXVlc3QoYGh0dHBzOi8vYXBwZGp1cC5kanl1bGUuY29tL1NDemh1b1poZV9sb2FkLmFzcD9IeW5hbWU9JHtnZXRJdGVtKCfotKblj7cnLCcnKX0mcGFnZT0ke01ZX1BBR0V9YClcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHZhciBodG1sID0gcmVxdWVzdChgaHR0cHM6Ly9hcHB4bWwuZGp5dWxlLmNvbS96aHVvWmhlXyR7Z2V0TXlWYXIoJ+S9nOiAhScpfV8ke01ZX1BBR0V9LnhtbGApXFxuICAgIH1cXG4gICAgcGRmYShodG1sLCAncGxhbnRzJiZQTEFOVCcpLmZvckVhY2gobGlzdCA9PiB7XFxuICAgICAgICB2YXIgSUQgPSBwZGZoKGxpc3QsICd6aHVvWmhlSUQmJlRleHQnKVxcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogcGRmaChsaXN0LCAnTkFNRSYmVGV4dCcpLFxcbiAgICAgICAgICAgIGltZzogJ2h0dHA6Ly9pbWcuZGp5dWxlLmNvbS8nICsgcGRmaChsaXN0LCAnSU1HSUNPJiZUZXh0JyksXFxuICAgICAgICAgICAgdXJsOiAkKGBodHRwczovL2FwcHhtbC5kanl1bGUuY29tLyR7cGRmaChsaXN0LCAnSUR8fHpodW9aaGVVUkwmJlRleHQnKX1fZnlwYWdlLnhtbGApLnJ1bGUoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICByZXF1aXJlKCdoaWtlcjovL3BhZ2UvbGInKVxcbiAgICAgICAgICAgICAgICByZXR1cm4g5YiX6KGoKGdldFJlc0NvZGUoKSlcXG4gICAgICAgICAgICB9KSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ/Cfk6XkvZzogIUnLFxcbiAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKElEKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSBwZGZoKHJlcXVlc3QoYGh0dHBzOi8vYXBwZGp1cC5kanl1bGUuY29tL2NvbmNlcm5BdXRob3JfYWRkXzIwMjJtZDUuYXNwP3podW9aaGVJRD0ke2Jhc2U2NEVuY29kZShJRCl9Jkh5bmFtZT0ke2dldEl0ZW0oJ+i0puWPtycsJycpfSZTQ2lkPTBgKSwgJ2JhY2tJbmZvJiZUZXh0JylcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly8nICsgdGV4dFxcbiAgICAgICAgICAgICAgICAgICAgfSwgSUQpXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+TpOWPlua2iCcsXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoSUQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHBkZmgocmVxdWVzdChgaHR0cHM6Ly9hcHBkanVwLmRqeXVsZS5jb20vY29uY2VybkF1dGhvcl9kZWxfMjAyMm1kNS5hc3A/emh1b1poZUlEPSR7YmFzZTY0RW5jb2RlKElEKX0mSHluYW1lPSR7Z2V0SXRlbSgn6LSm5Y+3JywnJyl9JlNDaWQ9MGApLCAnYmFja0luZm8mJlRleHQnKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovLycgKyB0ZXh0XFxuICAgICAgICAgICAgICAgICAgICB9LCBJRClcXG4gICAgICAgICAgICAgICAgfV1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBzZXRSZXN1bHQoZClcXG59XFxuJC5yZXF1aXJlKCd0YWJzJylcXG52YXIgZCA9IFtdXFxuaWYgKE1ZX1BBR0UgPT09IDEgJiYgTVlfVFlQRSA9PSAnaG9tZScpXFxuICAgIGQgPSBkLmNvbmNhdChzdG9yYWdlMC5nZXRNeVZhcignaXRlbXMnKSlcXG5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvbGInKVxcblxcbmlmIChNWV9UWVBFICE9ICdob21lJykgY2xlYXJNeVZhcigndHlwZScpXFxuXFxuc3dpdGNoIChnZXRNeVZhcigndHlwZScpKSB7XFxuICAgIGNhc2UgJ+WIhuexuyc6XFxuICAgICAgICDliJfooagoYnVpbGRVcmwoJ2h0dHBzOi8vYXBwc28uZGp5dWxlLmNvbS9mZW5MZWlfbGlzdC5hc3AnLCB7XFxuICAgICAgICAgICAgbG9hZFR5cGU6IGdldE15VmFyKCfliIbnsbsnKSArICdfJyArIGdldE15VmFyKGdldE15VmFyKCfliIbnsbsnKSksXFxuICAgICAgICAgICAgc29ydDogZ2V0TXlWYXIoJ3NvcnQnKSxcXG4gICAgICAgICAgICBwYWdlOiBNWV9QQUdFLFxcbiAgICAgICAgICAgIFZJUGdyYWRlOiAnMCcsXFxuICAgICAgICAgICAgSFl6aHVjaGVkYXRlOiAnMjAxMC8yLzEyJTIwMToyNzowMCcsXFxuICAgICAgICAgICAgVXNlZGF5czogJzc1J1xcbiAgICAgICAgfSksIGQpXFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5LuK5pelJzpcXG4gICAgICAgIOWIl+ihqChgaHR0cHM6Ly9hcHB4bWwuZGp5dWxlLmNvbS9uZXdfaG9tZVRKMjAyMi54bWxgLCBkKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+amnOWNlSc6XFxuICAgICAgICDmppzljZUoZClcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfkvZzogIUnOlxcbiAgICAgICAg5L2c6ICFKGQpXFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5q2M5Y2VJzpcXG4gICAgICAgIOatjOWNlShkKVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aUtuiXjyc6XFxuICAgICAgICDliJfooagoYGh0dHBzOi8vYXBwc2MuZGp5dWxlLmNvbS9sb2FkQm94LmFzcD9IeW5hbWU9JHtnZXRJdGVtKCfotKblj7cnLCcnKX0mcGFnZT0ke01ZX1BBR0V9YCwgZClcXG4gICAgICAgIGJyZWFrO1xcbiAgICBkZWZhdWx0OlxcbiAgICAgICAg5YiX6KGoKGdldFJlc0NvZGUoKSwgZClcXG5cXG59XCJ9XSIsImljb24iOiJodHRwOi8vc2ouZGp5dWxlLmNvbS9pbWcvbG9nby5wbmciLCJwcm94eSI6IiJ9