海阔视界，我的主页「ZF2629主题」主题￥my_home_theme￥{"Date":"2025-10-02 11:21:56","Name":"ZF2629主题","BookmarksList":[{"name":"预处理组","mark":"","list":[{"status":true,"pattern":2,"name":"预处理","code":"var collection=JSON.parse(fetch('hiker://collection'));\nvar colPicUrl=\"hiker://images/card_bg\";\nfor(let i=0;i<collection.length;i++){\n              if(collection[i].picUrl!=null){                        colPicUrl=collection[i].picUrl;\n              break;\n    }\n}\n\n/**try{\nvar logoPic = JSON.parse(fetch('http://api.btstu.cn/sjbz/api.php?lx=fengjing&format=images&_tt='+new Date().getTime(),{redirect:false, withHeaders:true, timeout: 1000})).headers.location[0];\n}catch(e){}*/\nvar logoPic = \"hiker://images/home_bg\";\n[]\n\nlet z='hiker://files/zf/img/';\n\n\n"},{"status":true,"pattern":2,"name":"自动导入图标","code":"//自动导入，无需手动操作。\n//正常显示图标后，可以关掉本书签，使主页更流畅。\n\n\n\n\nlet icons = [\n    \n\n\n\n   {\n    'html': 'https://zf2629.neocities.org/himg/png/',\n    'file': 'hiker://files/zf/img/',\n    'id': [\n            'H01.png', 'H02.png', 'H03.png', 'H04.png', 'H05.png', \n            'B01.png', 'B02.png', 'B03.png', 'B04.png', 'B1.png','B2.png',\n            '电1.png', '电2.png', '电3.png', '电4.png', '电5.png',\n'0.png','1.png','2.png', '3.png','4.png','5.png', '6.png','7.png','8.png', '9.png'         \n ,'10.png','11.png','12.png', '13.png','14.png','15.png', '16.png','17.png','18.png', '19.png', '20.png','21.png','22.png',\n'添加.png',\n            'logo.png', '听.png','美1.png','美2.png','美3.png','播.png','播1.png','heji.png'\n          ]\n    },\n\n\n   {\n    'html': 'https://zf2629.neocities.org/zf/live/',\n    'file': 'hiker://files/zf/live/',\n    'id': [\n           \n\n            'live01.json','live02.json','live03.json',\n            'live999.json'          \n          ]\n    }\n    \n    ];\n\nlet icon= icons.flatMap(h => h.id.map(id => ({\n    url: h.html + id,\n    file: h.file + id\n})));\n\nicon.forEach(j => {\n    if (!fileExist(j.file)) {saveImage(j.url, j.file);\n    }\n});"}],"fold_status":true,"pattern":3},{"name":"HEAD","mark":"","list":[{"status":false,"pattern":0,"name":"天气","title":"","url":"https://zf2629.neocities.org/html/%E4%B8%BB%E9%A1%B5%E6%97%B6%E9%92%9F%E5%A4%A9%E6%B0%94.html","icon":"","desc":"","type":"x5_webview_single"},{"status":false,"pattern":0,"name":"line001","title":"","url":"","icon":"","desc":"","type":"line"},{"status":false,"pattern":2,"name":"视频海报","code":"putVar('小程序名', MY_RULE.title);\n\nputVar(MY_RULE.title + '视频高度', '168');\nputVar(MY_RULE.title + '视频宽度', '93%');\n//最大100%\nputVar(MY_RULE.title + \"视频圆角\", '15');//0是直角\nvar 本地 = getPath('hiker://files/yuan/videoCarousel.html');\nif (!fileExist(本地)) {\n    confirm({\n        title: '导入',\n        content: '检测到你没有本地文件，是否导入',\n        confirm: $.toString((本地) => {\n            writeFile(本地, fetch('https://zf2629.neocities.org/html/videoCarousel.html'));\n            refreshPage(false);\n        }, 本地),\n        cancel: $.toString(() => {})\n    });\n};\n[{\n            col_type: 'x5_webview_single',\n            url: 本地,\n            desc: 'list&&' + getVar(MY_RULE.title + '视频高度', 'video'),\n            extra: {                \n            autoPlay: true,                \n            showProgress: false\n          }\n}]"},{"status":false,"pattern":2,"name":"轮播元素","code":"let d = [];\nrc('https://zf2629.neocities.org/html/%E8%BD%AE%E6%92%AD.js', 24);\nbanner(d, arr, 3000, 's1')"},{"status":true,"pattern":0,"name":"海报","title":"","url":"${setting}","icon":"@js: z+'logo.png'","desc":"0","type":"card_pic_1"},{"status":true,"pattern":0,"name":"书签","title":"书签","url":"hiker://bookmark","icon":"@js: z+'H01.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"下载","title":"下载","url":"hiker://download","icon":"@js: z+'H02.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"历史","title":"历史","url":"hiker://history","icon":"@js: z+'H03.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"收藏","title":"收藏","url":"hiker://collection","icon":"@js: z+'H04.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"设置","title":"设置","url":"@js:let title=[     {title: \"主页设置\",icon: \"hiker://files/zf/img/1.png\",url:`${setting}`},                      {title: \"更多设置\",icon: \"hiker://files/zf/img/2.png\",url: \"hiker://settingMore\"},                       {title: \"文件管理\",icon: \"hiker://files/zf/img/3.png\",url: \"hiker://explore\"},                      {title: \"ZF仓库\",icon: \"hiker://files/zf/img/4.png\",url: \"hiker://home@ZF仓库\"},                       {title: \"本地视频\",icon: \"hiker://files/zf/img/5.png\",url: \"hiker://localMedia\"},                      {title: \"图标\",icon: \"hiker://files/zf/img/6.png\",url: \"hiker://home@Iconfont\"},                     {title: \"手动备份\",icon: \"hiker://files/zf/img/7.png\",url: \"hiker://webdav\"},                                                                   {title: \"网址过滤\",icon: \"hiker://files/zf/img/8.png\",url: \"hiker://adUrl\"},                                                                  {title: \"网页插件\",icon: \"hiker://files/zf/img/9.png\",url: \"hiker://js\"},                                                                   {title: \"元素拦截\",icon: \"hiker://files/zf/img/10.png\",url: \"hiker://adRule\"}             ];             $(title,2,\"更多功能\").select((title)=>{let i=title.findIndex(t=>t.title==input);let url=title[i].url;return url },title)","icon":"@js: z+'H05.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"HEAD结束线","title":"","url":"","icon":"","desc":"","type":"line_blank"}],"fold_status":true,"pattern":3},{"name":"BODY","mark":"","list":[{"status":true,"pattern":0,"name":"填充01","title":"","url":"","icon":"","desc":"","type":"big_blank_block"},{"status":true,"pattern":0,"name":"程序","title":"@js:'程序（'+getRuleCount()+'）'","url":"https://zf2629.neocities.org/xjj","icon":"@js: z+'B2.png'","desc":"25","type":"card_pic_2_2_left"},{"status":true,"pattern":0,"name":"喜马拉雅1","title":"喜马拉雅1","url":"@js: $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('');     let d = [];     d.push({         title: '喜马拉雅',         col_type: 'avatar',         pic: 'hiker://files/zf/img/听.png',         desc: '管理',         url: \"select://\" + JSON.stringify({             options: [\"管理\", \"默认\"],             attachView: true,             js: $.toString(() => {                 if (input == '管理') {                     return $('hiker://empty#noRecordHistory#').rule(() => {                         setPageTitle('数据管理');                         let d = [];                         d.push({                             title: '添加',                             col_type: 'input',                             desc: '名称@id@图片链接@主播名称',                             url: $.toString(() => {                                 if (!input) return \"toast://请根据提示输入内容\";                                 let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                 xmly = xmly.concat(input);                                 saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                 refreshPage(false);                                 return 'toast://添加成功'                             }),                             extra: {                                 type: 'textarea',                                 height: 2                             }                         });                         var xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                         var index = 0;                         for (let i = 0; i < xmly.length; i++) {                             var item = xmly[i];                             let list = item.split('@');                             d.push({                                 title: index + '.' + list[0],                                 col_type: 'card_pic_3',                                 pic: list[2],                                 url: $(['编辑', '移位', '删除'], 3, '请选择操作').select((index, item) => {                                     if (input == '编辑') {                                         return $(item, '想要更换的内容\\n名称-id-图片链接-主播名称').input((index) => {                                             let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                             xmly[index] = input;                                             saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                             refreshPage(false);                                             return 'toast://更改成功~'                                         }, index)                                     } else if (input == '移位') {                                         return $('', '要移动到哪个序号前面/后面').input((index) => {                                             let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                             let temp = xmly[index];                                             xmly.splice(input, 0, temp);                                             if (input < index) {                                                 xmly.splice(index + 1, 1);                                             } else {                                                 xmly.splice(index, 1);                                             }                                             saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                             refreshPage(false);                                             return 'toast://移位成功~'                                         }, index)                                     } else {                                         let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                         xmly.splice(index, 1);                                         saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                         refreshPage(false);                                         return 'toast://删除成功~'                                     }                                 }, index, item),                             });                             index++;                         }                         setResult(d);                     })                 } else {                     deleteFile('hiker://files/Jm/xmly.json');                     refreshPage(false);                     return 'toast://已恢复默认'                 }             })         }),     });     d.push({         title: '搜索',         desc: '输入你想搜索的',         col_type: 'input',         url: $.toString(() => {             if (!input) return \"toast://请输入关键词\";             var txt = input;             setItem('雅听', txt);             return $('hiker://empty##fypage#fullTheme##noRecordHistory#').rule((txt) => {                 let d = [];                 var json = JSON.parse(fetch('http://search.ximalaya.com/front/v1?device=android&condition=relation&core=album&spellchecker=true&kw=' + txt + '&page=' + MY_PAGE + '&rows=20')).response.docs;                 json.map(l => {                     let img = l.cover_path.split('!')[0];                     d.push({                         title: l.title,                         col_type: 'movie_1_vertical_pic',                         desc: '‘‘’’<font color=#FA7298>' + l.intro + '</font>',                         pic: img,                         url: $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((l, img) => {                             setPageTitle(l.title);                             let d = [];                             let page = getVar('xmly_page', '1');                             var asc = getVar('排序', 'true');                             let json = JSON.parse(fetch('http://mobile.ximalaya.com/mobile/others/ca/album/track/' + l.id + '/' + asc + '/' + page + '/20?albumId=' + l.id + '&pageSize=20&isAsc=' + asc + '&position=1&device=android'));                             if (MY_PAGE == 1) {                                 var total = Math.ceil(json.album.tracks / 20);                                 d.push({                                     col_type: 'pic_1_full',                                     pic: img,                                     url: $('', '需要翻页的数字，每页20。\\n\\n共：' + json.album.tracks + '条节目，' + page + '/' + total + '页。').input((total) => {                                         if (!input) {                                             return 'toast://请输入页码';                                         } else if (input > total) {                                             return 'toast://请输入正常页码';                                         }                                         putVar('xmly_page', input);                                         refreshPage(false);                                         return 'hiker://empty'                                     }, total),                                 });                                 d.push({                                     title: '主播: ' + l.nickname + '\\t\\t节目(' + json.album.tracks + ')',                                     col_type: 'avatar',                                     pic: asc == 'true' ? 'file:///storage/emulated/0/zfok2005/听.png' : 'file:///storage/emulated/0/zfok2005/听.png',                                     desc: asc == 'true' ? '<font color=#FA7298>最新</font>' : '<font color=#FA7298>顺序</font>',                                     url: $('#noLoading#').lazyRule(() => {                                         if (getVar('排序', 'true') == 'false') {                                             clearVar('排序');                                         } else {                                             putVar('排序', 'false');                                         }                                         refreshPage(false);                                         return 'hiker://empty'                                     }),                                 }, {                                     col_type: 'line',                                 });                             }                             json.tracks.list.forEach((j) => {                                 d.push({                                     title: j.title,                                     col_type: 'text_1',                                     url: j.playUrl64 + '#isMusic=true#',                                     extra: {                                         inheritTitle: false                                     }                                 });                             });                             setResult(d);                         }, l, img),                         extra: {                             longClick: [{                                 title: '添加到首页',                                 js: $.toString((l, img) => {                                     var link = (l.title + '@' + l.id + '@' + img + '@' + l.nickname);                                     xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                     xmly = xmly.concat(link);                                     saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                     back(true);                                     return 'toast://添加成功'                                 }, l, img)                             }],                         }                     });                 });                 setResult(d);             }, txt)         }),         extra: {             defaultValue: getItem('雅听', ''),             onChange: 'setItem(\"雅听\",input)',         }     });     let xmly_title = ['有声书', '音乐', '相声评书', '广播剧', '娱乐', '影视', '儿童', '历史', '商业财经', '人文', '教育培训', 'IT科技', '外语', '头条', '二次元', '戏曲', '旅游', '健康养生', '时尚生活'];     var xmly_id = ['youshengshu', 'yinyue', 'xiangsheng', 'guangbojv', 'yule', 'yingshi', 'ertong', 'lishi', 'shangye', 'renwen', 'jiaoyu', 'keji', 'waiyu', 'toutiao', 'erciyuan', 'xiqu', 'lvyou', 'jiankang', 'shishang'];     let xmly_fl = xmly_title.map((item, index) => {         return {             name: item,             id: xmly_id[index]         };     });     xmly_fl.map(j => {         d.push({             title: j.name,             col_type: 'scroll_button',             url: $('hiker://empty#fullTheme##noRecordHistory#').rule((j) => {                 let d = [];                 var json = JSON.parse(fetch('https://m.ximalaya.com/m-revision/page/rank/queryRank?clusterCode=rise&page=2&categoryCode=' + j.id)).data;                 json.rankModuleInfoList.map(l => {                     var img = 'https://imagev2.xmcdn.com/' + l.albumInfo.cover;                     d.push({                         title: l.albumInfo.title,                         col_type: 'movie_1_vertical_pic',                         desc: l.albumInfo.shortIntro ? '‘‘’’<font color=#FA7298>' + l.albumInfo.shortIntro + '</font>' : '‘‘’’<font color=#FA7298>' + l.albumInfo.salePoint + '</font>',                         pic: img,                         url: $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((l, img) => {                             setPageTitle(l.albumInfo.title);                             let d = [];                             let page = getVar('xmly_page', '1');                             var asc = getVar('排序', 'true');                             let json = JSON.parse(fetch('http://mobile.ximalaya.com/mobile/others/ca/album/track/' + l.id + '/' + asc + '/' + page + '/20?albumId=' + l.id + '&pageSize=20&isAsc=' + asc + '&position=1&device=android'));                             if (MY_PAGE == 1) {                                 var total = Math.ceil(json.album.tracks / 20);                                 d.push({                                     col_type: 'pic_1_full',                                     pic: img,                                     url: $('', '需要翻页的数字，每页20。\\n\\n共：' + json.album.tracks + '条节目，' + page + '/' + total + '页。').input((total) => {                                         if (!input) {                                             return 'toast://请输入页码';                                         } else if (input > total) {                                             return 'toast://请输入正常页码';                                         }                                         putVar('xmly_page', input);                                         refreshPage(false);                                         return 'hiker://empty'                                     }, total),                                 });                                 d.push({                                     title: '主播: ' + json.album.nickname + '\\t\\t节目(' + json.album.tracks + ')',                                     col_type: 'avatar',                                     pic: asc == 'true' ? 'file:///storage/emulated/0/zfok2005/听.png' : 'file:///storage/emulated/0/zfok2005/听.png',                                     desc: asc == 'true' ? '<font color=#FA7298>最新</font>' : '<font color=#FA7298>顺序</font>',                                     url: $('#noLoading#').lazyRule(() => {                                         if (getVar('排序', 'true') == 'false') {                                             clearVar('排序');                                         } else {                                             putVar('排序', 'false');                                         }                                         refreshPage(false);                                         return 'hiker://empty'                                     }),                                 }, {                                     col_type: 'line',                                 });                             }                             json.tracks.list.forEach((j) => {                                 d.push({                                     title: j.title,                                     col_type: 'text_1',                                     url: j.playUrl64 + '#isMusic=true#',                                     extra: {                                         inheritTitle: false                                     }                                 });                             });                             setResult(d);                         }, l, img),                     });                 });                 setResult(d);             }, j),         });     });     if (fileExist('hiker://files/Jm/xmly.json') == false) {         saveFile('hiker://files/Jm/xmly.json', '[\"10分钟新闻早餐@68589357@https://imagev2.xmcdn.com/storages/0f34-audiofreehighqps/9D/67/GKwRIRwGeHSbAAF5lAFoTCXi.jpeg@喜马头条\", \"给你歌一曲@364178@https://imagev2.xmcdn.com/storages/592c-audiofreehighqps/3F/39/GKwRIDoI4xcpAA7W_AJe33US.jpeg@张羊\", \"音乐优品@2650009@https://imagev2.xmcdn.com/group40/M0B/42/9A/wKgJVFqjufDwJ-27AAEtYzy2Sws017.jpg@主播叶子\", \"生活杂志@36630606@https://imagev2.xmcdn.com/group75/M06/83/0E/wKgO016RQ4ewix-MACap1_b_JKc207.jpg@MakeVoice\", \"非常溜佳期|爆笑吐槽欢乐解压@249020@https://imagev2.xmcdn.com/group30/M0B/BE/11/wKgJXlnSZlzhov6rAAGyRtHPJBg254.jpg@佳期\", \"段子来了@203355@https://imagev2.xmcdn.com/group5/M03/A6/D8/wKgDtlR1MD_T1DQHAANqZDyk48s720.jpg@采采\", \"一千零一笑｜睡着都能笑醒的段子@23742269@https://imagev2.xmcdn.com/group60/M06/40/83/wKgLb1zkHIeglr6VAB-x06KhWJM917.jpg@饼干GAN\", \"东北讲笑话@3555870@https://imagev2.xmcdn.com/group44/M00/AF/BC/wKgKjFswLrvBiTCCAAhPED0zi3Q786.jpg@阿哈东北\", \"妙宇连朱│趣闻吐槽 爆笑有料！@270535@https://imagev2.xmcdn.com/group76/M09/06/B4/wKgO3l5GRveBy9PfAAREO-jtWF0047.jpg@朱宇\", \"今晚脱口秀@4735422@https://imagev2.xmcdn.com/storages/aa63-audiofreehighqps/9A/94/CMCoOSQDy4_XAACPhgB4_BiN.jpg@今晚脱口秀\", \"总有这样的歌只想一个人听@3595841@https://imagev2.xmcdn.com/group54/M03/BE/89/wKgLclw1y2PjEND8AAGN2SKPPNM391.jpg@灰姑娘音乐\", \"总有一首歌丨会让你单曲循环到想哭@45525192@https://imagev2.xmcdn.com/storages/173d-audiofreehighqps/1D/AC/GKwRIJEGDg_IAAOPYQEtP7vi.jpeg@烟花迷人眼\", \"音乐记事本|一首歌一个故事@47210030@https://imagev2.xmcdn.com/storages/923a-audiofreehighqps/9E/8F/GKwRIUEHjDzGAAGGDAHo09MM.jpg@柠檬香香FM\", \"那些好听的女生翻唱@31751522@https://imagev2.xmcdn.com/group69/M05/CF/D9/wKgMb133KMCCQmiSAADqJUKGfNE375.jpg@花小小茵\", \"潮流音乐@19521365@https://imagev2.xmcdn.com/group49/M07/07/AD/wKgKl1v39kaQRiOHAAFpXOGk7Jk501.png@小松推荐\", \"那些一听就感动的经典电影名曲@39163725@https://imagev2.xmcdn.com/group83/M02/EF/8D/wKg5HV8NUf7A8yz3AAThw8LhuZY621.jpg@叶云川的瑞鸣音乐台\", \"晚安妈妈睡前故事@260744@https://imagev2.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg@晚安妈妈\", \"民间诡故事@29535750@https://imagev2.xmcdn.com/group69/M08/B2/E5/wKgMeV3glSTQPNMdACyt1_k_lDI813.jpg@阿浩说事儿\", \"古筝名曲欣赏古筝经典名曲@16792854@https://imagev2.xmcdn.com/group46/M04/AA/B8/wKgKlltqiiLAzjyJAADLZMy6vZI136.jpg@喜马来啦\", \"经典古乐-古琴十大名曲@6317265@https://img2.baidu.com/it/u=1333807900,2948630331&fm=253&fmt=auto&app=138&f=JPEG@xiexiexiexie\", \"【世界上最美的钢琴曲】催眠音乐@4050639@https://imagev2.xmcdn.com/group13/M00/40/F6/wKgDXVcKCg_C6mIlAAUDrv1fONk145.png@若似晴天绍钧\", \"《夜色钢琴曲》@291718@https://imagev2.xmcdn.com/storages/b3d2-audiofreehighqps/91/8E/GMCoOSAFquG2AAU4zwEKNohZ.png@夜色钢琴曲赵海洋\", \"8分钟，3D环境减压冥想|音乐疗愈@28246572@https://imagev2.xmcdn.com/group65/M02/6D/3E/wKgMal1l_CrDd62jAAIVsjylJTs506.jpg@耳界_Earmersion\", \"迷人瑾-车载劲爆DJ电音舞曲@5899507@https://imagev2.xmcdn.com/group86/M05/C3/16/wKg5Jl8IZhuz_a9kAAGfsoxS7B8876.jpg@DJ迷人瑾\", \"民谣精选 | 唱尽人间百态@31380962@https://imagev2.xmcdn.com/group68/M02/B3/A9/wKgMbl3grtSzMEGWAAA4bH-ZnSo913.jpg@花小小茵\", \"经典留声机@290996@https://imagev2.xmcdn.com/group50/M08/FA/D2/wKgKnVvr9vHzmc2XAAUu-Wm_RSg359.jpg@主播小D\", \"让你循环百遍以上的经典英文歌@4866361@https://imagev2.xmcdn.com/group77/M07/55/6C/wKgO1V6NxEShlxVHAAAJW2ZhsM8516.jpg@一点抒情音乐频道\", \"1000首听不腻的好歌丨优质歌单@32519824@https://imagev2.xmcdn.com/storages/7824-audiofreehighqps/8E/10/GKwRIMAFlyD8AAHNJgEFBoZa.jpeg@陈臻臻\", \"小七的私房歌@237771@https://imagev2.xmcdn.com/storages/a740-audiofreehighqps/58/20/GMCoOR8HgrlzAAO9tQHl7bVs.jpeg@小七\", \"世界上最好听的纯音乐@11659873@https://imagev2.xmcdn.com/group35/M03/8B/5C/wKgJnFoT4AqDZz_EAAC_AaRpjvA497.jpg@孤_零\", \"经典豫剧名家名段1000首@53403876@https://imagev2.xmcdn.com/storages/83c7-audiofreehighqps/68/F5/CKwRIW4FJwg6AAEtEQDnEwha.jpg@戏曲传承人\", \"黄梅戏经典名家名段1000首@53831644@https://imagev2.xmcdn.com/storages/fe46-audiofreehighqps/BF/7E/GKwRIDoFu-VWAAIGNAEOQUad.jpeg@戏曲传承人\", \"国粹京剧@2822479@https://imagev2.xmcdn.com/group56/M07/02/DC/wKgLgFyOCSOBgKaqAAKVGBL0Sqk894.jpg@弘然\"]');     }     var xmly = eval(JSON.parse(request('hiker://files/Jm/xmly.json')));     for (var i = 0; i < xmly.length; i++) {         var k = xmly[i].split('@');         d.push({             title: k[0],             col_type: 'card_pic_3',             pic: k[2],             url: $('hiker://empty#noHistory##noRecordHistory##immersiveTheme#').rule((k) => {                 let d = [];                 let page = getVar('xmly_page', '1');                 var asc = getVar('排序', 'true');                 let json = JSON.parse(fetch('http://mobile.ximalaya.com/mobile/others/ca/album/track/' + k[1] + '/' + asc + '/' + page + '/20?albumId=' + k[1] + '&pageSize=20&isAsc=' + asc + '&position=1&device=android'));                 if (MY_PAGE == 1) {                     var total = Math.ceil(json.album.tracks / 20);                     d.push({                         col_type: 'pic_1_full',                         pic: k[2],                         url: $('', '需要翻页的数字，每页20。\\n\\n共：' + json.album.tracks + '条节目，' + page + '/' + total + '页。').input((total) => {                             if (!input) {                                 return 'toast://请输入页码';                             } else if (input > total) {                                 return 'toast://请输入正常页码';                             }                             putVar('xmly_page', input);                             refreshPage(false);                             return 'hiker://empty'                         }, total),                     });                     d.push({                         title: '主播: ' + k[3] + '\\t\\t节目(' + json.album.tracks + ')',                         col_type: 'avatar',                         pic: asc == 'true' ? 'hiker://files/zf/img/喜.png' : 'hiker://files/zf/img/喜.png',                         desc: asc == 'true' ? '<font color=#FA7298>最新</font>' : '<font color=#FA7298>顺序</font>',                         url: $('#noLoading#').lazyRule(() => {                             if (getVar('排序', 'true') == 'false') {                                 clearVar('排序');                             } else {                                 putVar('排序', 'false');                             }                             refreshPage(false);                             return 'hiker://empty'                         }),                     }, {                         col_type: 'line',                     });                 }                 json.tracks.list.forEach((j) => {                     d.push({                         title: j.title,                         pic: k[2],                         col_type: 'text_1',                         url: j.playUrl64 + '#isMusic=true#',                         extra: {                             inheritTitle: false                         }                     });                 });                 setResult(d);             }, k)         });     }     setResult(d); })","icon":"@js: z+'B01.png'","desc":"","type":"icon_4"},{"status":true,"pattern":0,"name":"聚阅","title":"聚阅","url":"hiker://home@聚阅","icon":"@js: z+'B02.png'","desc":"","type":"icon_4"},{"status":false,"pattern":0,"name":"聚直播","title":"聚直播","url":"@js:$('hiker://empty#noRecordHistory##noHistory#').rule(() => {initConfig({    依赖: \"https://zf2629.neocities.org/hiker/yilai/SrcJuying.js\"});require('https://zf2629.neocities.org/hiker/yilai/SrcLive.js');Live();})","icon":"hiker://files/zf/img/body02.png","desc":"","type":"icon_4"},{"status":true,"pattern":0,"name":"我的主页","title":"我的主页","url":"https://zf2629.github.io/","icon":"@js: z+'B2.png'","desc":"25","type":"card_pic_2_2_left"},{"status":true,"pattern":0,"name":"抖音去水印","title":"去水印","url":"@js: $([{     title: '视频解析',     icon: 'hiker://files/zf/img/1.png' }, {     title: '图集解析',     icon: 'hiker://files/zf/img/2.png' }, {     title: '音频解析',     icon: 'hiker://files/zf/img/3.png' }, {     title: '全民K歌',     icon: 'hiker://files/zf/img/4.png' }], 2, '请选择').select(() => {     if (input == '视频解析') {         return $('{{clipboard}}', '抖音/快手等视频分享链接').input(() => {             if (!input) return \"toast://请输入分享链接\";             var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);              return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                 setPageTitle('');                 let d = [];                 try {                     CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");                     str_key = CryptoUtil.Data.parseUTF8(\"BH6MxHTGX2cUUGRdWAg5Vt20awucQsiQ\");                     str_iv = CryptoUtil.Data.parseUTF8(\"7RUK0XQYLDMqNWob\");                     aes = word => CryptoUtil.AES.decrypt(word, str_key, {                         mode: \"AES/CBC/PKCS5Padding\",                         iv: str_iv                     }).toString();                      var json = JSON.parse(JSON.parse(aes(request(\"https://alldown.magictool.cn/pro/qsyApi.php?url=\" + url + \"/&token=lKKln239WEOjfweLLAP02JNs\")))).data;                     var sp = {                         title: json.title,                         url: json.video ? json.url : json.down,                     };                 } catch (e) {                     var json = JSON.parse(fetch('https://api.tangdouz.com/dy.php?return=json&lj=' + url));                     var sp = {                         title: '',                         url: json.url,                     };                 }                 let title = sp.title.replace(/[ ]|#|&|/g, '');                 d.push({                     col_type: 'x5_webview_single',                     desc: 'float&&640',                     url: sp.url,                     extra: {                         autoPlay: true                     }                 }, {                     title: title,                     col_type: 'rich_text',                 }, {                     title: '下载视频',                     col_type: 'text_center_1',                     url: 'download://' + sp.url,                     extra: {                         pageTitle: title,lineVisible: false                     }                 });                 setResult(d);             }, url)         })     } else if (input == '图集解析') {         return $('{{clipboard}}', '抖音/快手图集分享链接').input(() => {             if (!input) return \"toast://请输入分享链接\";             var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);             return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                 setPageTitle('');                 let d = [];                 try {                     var json = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/sp_jx/tuji.php?url=' + url)).data;                     var tj = {                         music: '',                         pic: json.images,                     };                 } catch (e) {                     var json = JSON.parse(fetch('https://api.ahfi.cn/api/qsyimg?url=' + url));                     var tj = {                         music: '',                         pic: json.images,                     };                 }                 d.push({                     col_type: 'x5_webview_single',                     desc: '0',                     url: tj.music,                     extra: {                         autoPlay: true                     }                 });                 tj.pic.map(img => d.push({                     col_type: 'pic_1_full',                     pic: img + '#.jpg',                     url: img + '#.jpg',                 }));                 setResult(d);             }, url)         })     } else if (input == '音频解析') {         return $('{{clipboard}}', '抖音/快手等音视频分享链接').input(() => {             if (!input) return \"toast://请输入分享链接\";             var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);             return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                 setPageTitle('');                 let d = [];                 try {                     CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");                     str_key = CryptoUtil.Data.parseUTF8(\"BH6MxHTGX2cUUGRdWAg5Vt20awucQsiQ\");                     str_iv = CryptoUtil.Data.parseUTF8(\"7RUK0XQYLDMqNWob\");                     aes = word => CryptoUtil.AES.decrypt(word, str_key, {                         mode: \"AES/CBC/PKCS5Padding\",                         iv: str_iv                     }).toString();                      var json = JSON.parse(JSON.parse(aes(request(\"https://alldown.magictool.cn/pro/qsyApi.php?url=\" + url + \"/&token=lKKln239WEOjfweLLAP02JNs\")))).data;                     var yp = {                         title: json.title,                         music: json.url ? json.down : json.video,                         pic: json.cover ? json.cover : json.download_image,                     };                 } catch (e) {                     var json = JSON.parse(fetch('https://api.tangdouz.com/dy.php?return=json&lj=' + url));                     var yp = {                         title: '',                         music: json.url.replace(/\\\\/g, ''),                         pic: '',                     };                 }                 var title = yp.title.replace(/[ ]|#|&|/g, '');                 d.push({                     title: title,                     col_type: 'pic_1_full',                     pic: yp.pic + '@Referer=',                     url: $('#noHistory##noRecordHistory#').lazyRule((yp) => {                         refreshX5WebView('');                         return yp.music + '#isMusic=true#'                     }, yp),                 });                 d.push({                     col_type: 'x5_webview_single',                     desc: '0',                     url: yp.music,                     extra: {                         autoPlay: true                     }                 });                 d.push({                     title: '下载音频',                     col_type: 'text_center_1',                     url: 'download://' + yp.music,                     extra: {                         pageTitle: title,                     }                 });                 setResult(d);             }, url)         })     } else {         return $('{{clipboard}}', '请输入全民K歌分享链接').input(() => {             if (!input) return \"toast://请输入分享链接\";             var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);             return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                 setPageTitle('');                 let d = [];                 try {                     var json = JSON.parse(fetch('https://api.uomg.com/api/get.kg?songurl=' + url)).data;                     var kg = {                         name: json.song_name,                         author: json.kg_nick,                         pic: json.pic,                         url: json.playurl,                     };                 } catch (e) {                     var json = JSON.parse(fetch('http://api.cmvip.cn/API/qmkgzljx.php?url=' + url)).data;                     var kg = {                         name: json.song_name,                         author: json.author.avatar,                         pic: json.pic,                         url: json.musiclink,                     };                 }                 d.push({                     title: kg.name + '•' + kg.author,                     col_type: 'pic_1_full',                     pic: kg.pic + '@Referer=',                     url: $('#noHistory##noRecordHistory#').lazyRule((kg) => {                         var url = kg.url + '#isMusic=true#';​                         try {                             var lrc = fetch('https://api.52vmy.cn/api/music/lrc?token=430edc03c878d6c3545b73323db06ed2&n=1&msg=' + kg.name + ' ' + kg.author);                         } catch {                             toast('歌词获取失败');                         }                         refreshX5WebView('');                         return JSON.stringify({                             urls: [url],                             lyric: lrc                         })                     }, kg),                 });                 d.push({                     col_type: 'x5_webview_single',                     desc: '0',                     url: kg.url,                     extra: {                         autoPlay: true                     }                 });                 d.push({                     title: '下载音频',                     col_type: 'text_center_1',                     url: 'download://' + kg.url,                     extra: {                         pageTitle: kg.name + '•' + kg.author,                     }                 });                 setResult(d);             }, url)         })     } })","icon":"@js: z+'B03.png'","desc":"","type":"icon_4"},{"status":false,"pattern":0,"name":"聚影","title":"电视台","url":"@js: $('#noLoading#').lazyRule(() => {     return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {         setPageTitle('我的电视台');         var titles = [  'CCTV1 综合@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv1#.m3u8',  'CCTV13 新闻@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv13#.m3u8',  'CCTV5 体育@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv5#.m3u8', 'CCTV5+ 体育@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv5p#.m3u8',  '湖北卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=hubws#.m3u8',  '江苏卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=jsws#.m3u8',  '浙江卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=zjws#.m3u8',  '东方卫视@https://bp-cdn-ali.bestv.cn/enhance/bestvdfws_enhance.m3u8?auth_key=1750698007-2f4275c970374be784d5ade7f5a0d40e-0-69a11396ebdea8d313db02fd26f63b88',  '湖南卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=hnws#.m3u8',];         var t = titles;         var d = [];         var img = 'hiker://files/zf/img/播.png';         for (var i = 0; i < t.length; i++) {             var k = t[i].split(/\\s*@\\s*/);             if (k.length < 2) continue;             d.push({                 title: k[0],                 url: 'video://' + k[1],                 col_type: 'icon_2_round',                 pic_url: img,             });         }         setHomeResult(d);     }) });","icon":"hiker://files/zf/img/body04.png","desc":"25","type":"icon_4"},{"status":true,"pattern":0,"name":"聚影1","title":"聚影","url":"hiker://home@聚影","icon":"@js: z+'B04.png'","desc":"","type":"icon_4"},{"status":true,"pattern":0,"name":"填充02","title":"","url":"","icon":"","desc":"","type":"big_blank_block"},{"status":true,"pattern":0,"name":"空白02","title":"空白条","url":"","icon":"","desc":"","type":"line_blank"}],"fold_status":true,"pattern":3},{"type":"line_blank","notes":"line_blank","name":"line_blank"},{"name":"FOOT","mark":"","list":[{"status":true,"pattern":0,"name":"爱听音乐","title":"音乐","url":"@js: $('hiker://empty#fypage#gameTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('音乐');     let d = [];     if (MY_PAGE == 1) {         d.push({             title: '‘‘’’<big><font color=\"#1AB16B\">音乐</font></big>',             col_type: 'text_1',             pic: 'hiker://files/zf/img/听.png',             url: $('#noLoading#').lazyRule(() => {                 if (!fileExist('hiker://files/Jm/gedan.json')) {                     saveFile('hiker://files/Jm/gedan.json', '[{\"title\":\"热搜歌曲\",\"icon\":\"http://qpic.y.qq.com/music_cover/hKFribMhwH4ClwNWJxicuCxjuwIkbZPq4HVT0Qgxsdb8JWQXXC2TFsuQ/600?n=1\",\"id\":7532670538},{\"title\":\"抖音热门\",\"icon\":\"http://qpic.y.qq.com/music_cover/WpvdJXfn798ibD4gcfjw0NSuBkFTJYpY5QOev3ExcBQiamRcobkpN77g/600?n=1\",\"id\":7630303474}]');                 }                 var gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                 return $(gedan, 2, '小七歌单').select((gedan) => {                     let a = gedan.findIndex(t => t.title == input);                     var id = gedan[a].id;                     return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((id) => {                         setPageTitle('小七歌单');                         let d = [];                         let html = JSON.parse(fetch('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=songlist&id=' + id)).data;                         var json = html.list.map(j => {                             return {                                 title: j.title,                                 singer: j.author,                                 album: j.album.name,                                 pic: j.pic,                                 id: j.mid                             };                         });                         d.push({                             title: html.info.title,                             col_type: 'movie_1_vertical_pic_blur',                             desc: '🧸\\t' + html.info.creator.nick + '\\n\\n🎼\\t' + html.info.songnum + '首',                             pic: html.info.picurl,                             url: $('', '曲名或歌手').input((json) => {                                 function search(array, name) {                                     return array.filter(item => {                                         return item.title.toLowerCase().includes(name.toLowerCase()) || item.singer.toLowerCase().includes(name.toLowerCase())                                     })                                 }                                 let results = search(json, input);                                 if (results.length > 0) {                                     return $('hiker://empty').rule((results) => {                                         setPageTitle('搜索结果');                                         let d = [];                                         results.forEach(j => {                                             d.push({                                                 title: j.title,                                                 col_type: 'text_1',                                                 desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                                 pic: j.pic,                                                 url: $('#noLoading#').lazyRule((j) => {                                                     try {                                                         var js = JSON.parse(fetch('https://xiaoapi.cn/API/yy_sq.php?type=json&n=1&msg=' + j.title)).url;                                                         var url = [js + '#isMusic=true#'];                                                         var lrc = JSON.parse(fetch('https://api.yaohud.cn/api/music/lrc?key=aUlykA35KgmwPUpehJKNbFjo6v&type=qq&mid=' + j.id)).data;                                                     } catch {                                                         var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                             timeout: 2000                                                         })).url;                                                         var url = [json[3] || json[2] || json[1] || json[0]];                                                     }                                                     return JSON.stringify({                                                         urls: url,                                                         lyric: lrc                                                     })                                                 }, j),                                                 extra: {                                                     inheritTitle: false                                                 }                                             });                                         });                                         setResult(d);                                     }, results)                                 } else {                                     return 'toast://没有找到'                                 }                             }, json),                             extra: {                                 longClick: [{                                     title: '📠复制图片链接',                                     js: $.toString((html) => {                                         return 'copy://' + html.info.picurl;                                     }, html)                                 }],                             }                         });                         json.map(j => {                             d.push({                                 title: j.title,                                 col_type: 'text_1',                                 desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                 pic_url: j.pic + '@Referer=',                                 url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                     try {                                         var js = JSON.parse(fetch('https://xiaoapi.cn/API/yy_sq.php?type=json&n=1&msg=' + j.title)).url;                                         var url = [js + '#isMusic=true#'];                                         var lrc = JSON.parse(fetch('https://api.yaohud.cn/api/music/lrc?key=aUlykA35KgmwPUpehJKNbFjo6v&type=qq&mid=' + j.id)).data;                                     } catch (e) {                                         var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                             timeout: 2000                                         })).url;                                         var url = [json[3] || json[2] || json[1] || json[0]];                                     }                                     return JSON.stringify({                                         urls: url,                                         lyric: lrc                                     })                                 }, j),                                 extra: {                                     inheritTitle: false,                                     longClick: [{                                         title: '下载歌曲',                                         js: $.toString((j) => {                                             var url = JSON.parse(fetch('https://xiaoapi.cn/API/yy_sq.php?type=json&n=1&msg=' + j.title)).url;                                             return 'download://' + url                                         }, j)                                     }, {                                         title: '观看MV',                                         js: $.toString((j) => {                                             try {                                                 var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).url;                                                 var url = [json[3] || json[2] || json[1] || json[0]];                                             } catch (e) {                                                 var url = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).data.url];                                             }                                             return JSON.stringify({                                                 urls: url,                                             })                                         }, j)                                     }],                                 }                             });                         });                         setResult(d);                     }, id)                 }, gedan)             }),             extra: {                 lineVisible: false,                 longClick: [{                     title: '💞 获取歌单',                     js: $.toString(() => {                         return $('', '❗️歌单如果有新增，则需要重新获取\\n\\nQQ账号获取歌单').input(() => {                             let json = JSON.parse(fetch('https://api.cenguigui.cn/api/music/qq/user_list.php?qq=' + input)).myplaylist.map(j => {                                 return {                                     title: j.name,                                     icon: j.pic,                                     id: j.id                                 };                             });                             gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                             gedan = gedan.concat(json);                             saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                             refreshPage(false);                             return 'toast://已添加'                         })                     })                 }, {                     title: '🔰 歌单管理',                     js: $.toString(() => {                         return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {                             setPageTitle('歌单管理');                             let d = [];                             d.push({                                 title: '提取id',                                 col_type: 'input',                                 desc: '请输入分享后复制的链接',                                 url: $.toString(() => {                                     if (!input) return \"toast://不能为空\";                                     let txt = input;                                     let u1 = txt.split('&')[4];                                     let id = u1.split('=');                                     refreshPage(false);                                     copy(id[1]);                                     return 'toast://已复制' + id[1];                                 })                             });                             d.push({                                 title: '添加',                                 col_type: 'input',                                 desc: '显示名称@图片链接@QQ音乐id',                                 url: $.toString(() => {                                     if (!input) return \"toast://请根据提示输入内容\";                                     let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                     let n = input.split('@');                                     data = {                                         title: n[0],                                         icon: n[1],                                         id: n[2]                                     };                                     gedan = gedan.concat(data);                                     saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                     refreshPage(false);                                     return 'toast://已添加'                                 }),                                 extra: {                                     type: 'textarea',                                     height: 2                                 }                             });                             d.push({                                 title: '歌单图片链接可以在歌单二级海报长按复制，所以可以先添加歌单再编辑添加歌单图片，或者自己选一张图作为封面。',                                 col_type: 'scroll_button',                                 url: 'hiker://empty',                             });                             let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                             var index = 0;                             gedan.map(j => {                                 var item = j.title + '@' + j.icon + '@' + j.id;                                 d.push({                                     title: index + '.' + j.title,                                     col_type: 'card_pic_3',                                     pic: j.icon,                                     url: $(['编辑', '移位', '删除'], 3, '请选择').select((index, item) => {                                         if (input == '编辑') {                                             return $(item, '想要更换的歌单名,歌单id,图片链接 ').input((index) => {                                                 let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                                 let n = input.split('@');                                                 gedan[index] = {                                                     title: n[0],                                                     icon: n[1],                                                     id: n[2]                                                 };                                                 saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                                 refreshPage(false);                                                 return 'toast://更改成功~'                                             }, index)                                         } else if (input == '移位') {                                             return $('', '要移动到哪个序号前面/后面').input((index) => {                                                 let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                                 let temp = gedan[index];                                                 gedan.splice(input, 0, temp);                                                 if (input < index) {                                                     gedan.splice(index + 1, 1);                                                 } else {                                                     gedan.splice(index, 1);                                                 }                                                 saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                                 refreshPage(false);                                                 return 'toast://移位成功~'                                             }, index)                                         } else {                                             let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                             gedan.splice(index, 1);                                             saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                             refreshPage(false);                                             return 'toast://删除成功~'                                         }                                     }, index, item),                                 });                                 index++;                             });                             setResult(d);                         })                     })                 }, {                     title: '♻️ 恢复默认',                     js: $.toString(() => {                         deleteFile('hiker://files/Jm/gedan.json');                         refreshPage(false);                         return 'toast://已恢复默认'                     })                 }],             }         }, {             title: '‘‘’’小七<small> 榜单</small>',             col_type: 'icon_3_round_fill',             pic: 'hiker://files/Jm/lm/music/85.svg',             url: $('#noLoading#').lazyRule(() => {                 let toplist = JSON.parse(fc('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=topgroup', 24)).data.map(li => {                     let l = li.toplist.map(d => {                         return {                             title: d.title,                             icon: d.headPicUrl,                             tid: d.topId + '=' + d.period                         };                     });                     return l;                 });                 let gedan = [];                 toplist.forEach(list => {                     gedan = gedan.concat(list);                     let index = gedan.findIndex(item => item.title === \"MV榜\");                     if (index !== -1) {                         gedan.splice(index, 1);                     }                 });                 return $(gedan, 2, '小七排行榜').select((gedan) => {                     let a = gedan.findIndex(t => t.title == input);                     let tid = gedan[a].tid;                     return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((tid) => {                         let d = [];                         setPageTitle('小七榜单');                         let id = tid.split('=');                         let html = JSON.parse(fc('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=toplist&period=' + id[1] + '&topid=' + id[0], 24)).data;                          /*let json = html.list.map(j => {                             let album = j.album.map(n => n.title);                             return {                                 title: j.title,                                 singer: j.author,                                 album: album,                                 pic: j.pic,                                 id: j.mid,                                 vid: j.vid                             };                         });*/                         let json = html.info.song.map(j => {                             return {                                 title: j.title,                                 singer: j.singerName,                                 album: '',                             };                         });                         let intro = html.info.intro.replace(/<br\\s*\\/?>/gi, '');                         d.push({                             title: intro,                             col_type: 'movie_1_vertical_pic_blur',                             desc: '🧸\\t' + html.info.titleShare + '\\n\\n🎼\\t' + html.info.totalNum + '首',                             pic: html.info.headPicUrl,                             url: 'hiker://empty',                         });                         json.map(j => {                             d.push({                                 title: j.title,                                 col_type: 'text_1',                                 desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                 pic_url: j.pic + '@Referer=',                                 url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                     try {                                         var js = JSON.parse(fetch('https://xiaoapi.cn/API/yy_sq.php?type=json&n=1&msg=' + j.title)).url;                                         var url = [js + '#isMusic=true#'];                                         var lrc = '';                                     } catch (e) {                                         var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                             timeout: 2000                                         })).url;                                         var url = [json[3] || json[2] || json[1] || json[0]];                                     }                                     return JSON.stringify({                                         urls: url,                                         lyric: lrc                                     })                                 }, j),                                 extra: {                                     inheritTitle: false,                                     longClick: [{                                         title: '下载歌曲',                                         js: $.toString((j) => {                                             try {                                                 var url = JSON.parse(fetch('https://xiaoapi.cn/API/yy_sq.php?type=json&n=1&msg=' + j.title)).url;                                             } catch (e) {                                                 var url = '';                                             }                                             return 'download://' + url                                         }, j)                                     }, {                                         title: '观看MV',                                         js: $.toString((j) => {                                             try {                                                 var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).url;                                                 var url = [json[3] || json[2] || json[1] || json[0]];                                             } catch (e) {                                                 var url = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).data.url];                                             }                                             return 'video://' + url                                         }, j)                                     }],                                 }                             });                         });                         setResult(d);                     }, tid)                 }, gedan)             }),         }); /*网易排行榜歌单_开始*/         d.push({             title: '‘‘’’小芸<small> 榜单</small>',             col_type: 'icon_3_round_fill',             pic: 'hiker://files/Jm/lm/music/51.svg',             url: $('#noLoading#').lazyRule(() => {                 var gedan = JSON.parse(fc('http://music.163.com/api/toplist', 24)).list.map(l => {                     return {                         title: l.name,                         icon: l.coverImgUrl,                         id: l.id                     };                 });                 return $(gedan, 2, '小芸排行榜').select((gedan) => {                     let a = gedan.findIndex(t => t.title == input);                     let id = gedan[a].id;                     return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((id) => {                         let d = [];                         setPageTitle('小芸歌单');                         let html = JSON.parse(fetch('http://music.163.com/api/v6/playlist/detail?n=1000&id=' + id, {                             headers: {                                 \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\",                                 \"Cookie\": \"os=pc; MUSIC_U=00173997E57DC16112D2E1579F555444812E5133F16C34213D9BB5E3ECEC818845DF8A336A3B9D495EE182F3001AFEAF9E971591CCEDC4713842F3296A1E79DFB7817A8C7BB8154FF15483648F184D0E72D7D26A565E44507380824902C2152CC0BB5DB9A379E80F6F03D0D98B2793A20323034DE4A0BBB4672D48F9362960EF2136153D02E7DF14C9CE84F1F64C16EB307A5BBB58686C6095082AA450583E64EACD3E6B5BE0DFCACA9125F035057FE17B5BDA61D89DF5ABD77906F5E5D858C74DB2E178A3B0E6095DD75518D482DC9D61080A61D9B765D7E98EBE230CF017CD90208392D3E10DE964A68121B6C66D08C902A98ED7113AAE59D1E5559B071DE83126B8C295C780CCD4B0B4DE36E35C09AA634355AEDE2F880998719277E5EF9C7B9CAFFC90E279AAA2BAFCA44C0A83537D609E2DAA5D5D774848C98DD287118895C1C3D6574466F9262DECE07292AC157C1DB70CB703958A7FE55344E273422E69\"                             }                         })).playlist;                         let json = html.tracks.map(j => {                             let singer = j.ar.map(n => n.name);                             return {                                 title: j.name,                                 singer: singer,                                 album: j.tns,                                 pic: j.al.picUrl,                                 id: j.id,                                 vid: j.mv                             };                         });                         d.push({                             title: html.description,                             col_type: 'movie_1_vertical_pic_blur',                             desc: '🧸\\t' + html.creator.nickname + '\\n\\n🎼\\t' + html.trackCount + '首',                             pic: html.coverImgUrl,                             url: 'hiker://empty',                         });                         json.map(j => {                             d.push({                                 title: j.title,                                 col_type: 'text_1',                                 desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                 pic_url: j.pic + '@Referer=',                                 url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                     try {                                         var js = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_wyymusic.php?br=7&n=1&num=&type=json&id=' + j.id)).music_url;                                     } catch (e) {                                         var js = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                     }                                     let url = [js + '#isMusic=true#'];                                     try {                                         var lrc = JSON.parse(fetch('http://music.163.com/api/song/lyric?os=pc&lv=-1&kv=-1&tv=-1&id=' + j.id)).lrc.lyric;                                     } catch {}                                     return JSON.stringify({                                         urls: url,                                         lyric: lrc                                     })                                 }, j),                                 extra: {                                     inheritTitle: false,                                     longClick: [{                                         title: '下载歌曲',                                         js: $.toString((j) => {                                             try {                                                 var url = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_wyymusic.php?br=7&n=1&num=&type=json&id=' + j.id)).music_url;                                             } catch (e) {                                                 var url = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                             }                                             return 'download://' + url                                         }, j)                                     }, {                                         title: '观看MV',                                         js: $.toString((j) => {                                             if (j.vid == '0') {                                                 var url = JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title)).data.url;                                             } else {                                                 var url = 'https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + j.vid;                                             }                                             return 'video://' + url                                         }, j)                                     }],                                 }                             });                         });                         setResult(d);                     }, id)                 }, gedan)             }),         }); /*网易排行榜歌单_结束*/         d.push({             title: getItem('kwgd', 'new') == 'new' ? '‘‘’’小莴<small> 最新</small>' : '‘‘’’小莴<small> 最热</small>',             col_type: 'icon_3_round_fill',             pic: 'hiker://files/Jm/lm/music/82.svg',             url: $('#noLoading#').lazyRule(() => {                 setItem('kwgd', getItem('kwgd', 'new') == 'new' ? 'hot' : 'new');                 refreshPage(false);                 toast('已切换' + (getItem('kwgd', 'new') == 'new' ? '最新歌单' : '最热歌单'));                 return 'hiker://empty'             }),         }, {             title: '搜索',             col_type: 'input',             desc: '👉🏻 歌名、歌手、榜单名称',             url: $.toString(() => { /*if (!input) return \"toast://请输入关键词搜索\";*/                 if (!input) return 'hiker://localMedia';                 var txt = input;                 setItem('sspt_input', txt); /*音乐搜索引擎_开始*/                 return \"select://\" + JSON.stringify({                     options: [\"小七\", \"小芸\", \"小莴\"],                     attachView: true,                     js: $.toString((txt) => {                         if (input == '小七') {                             return $('hiker://empty#fypage#immersiveTheme##noHistory##noRecordHistory#').rule((txt) => {                                 setPageTitle('小七搜索');                                 let d = [];                                 let yiyan = JSON.parse(fetch('hiker://files/Jm/yiyan.json'));                                 let max = yiyan.length - 1;                                 let min = 0;                                 let num = Math.floor(Math.random() * (max - min + 1)) + min;                                 var Display = yiyan[num];                                 let json = JSON.parse(fetch('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=so&page=' + MY_PAGE + '&per_page=30&word=' + txt)).data.list.map(j => {                                     return {                                         title: j.title,                                         singer: j.author,                                         pic: j.pic,                                         album: j.album.name,                                         id: j.mid                                     };                                 });                                 if (MY_PAGE == 1) {                                     d.push({                                         title: '🔎\\t' + txt,                                         col_type: 'movie_1_vertical_pic_blur',                                         desc: '🧸\\t小七音乐\\n\\n🎨\\t' + Display.replace(/，|。/g, ' '),                                         pic: json[0].pic,                                         url: 'hiker://empty',                                     });                                 }                                 json.forEach(j => {                                     d.push({                                         title: j.title,                                         col_type: 'text_1',                                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                         pic_url: j.pic + '@Referer=',                                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                             try {                                                 var js = JSON.parse(fetch('https://xiaoapi.cn/API/yy_sq.php?type=json&n=1&msg=' + j.title)).url;                                                 var url = [js + '#isMusic=true#'];                                                 var lrc = JSON.parse(fetch('https://api.yaohud.cn/api/music/lrc?key=aUlykA35KgmwPUpehJKNbFjo6v&type=qq&mid=' + j.id)).data;                                             } catch {                                                 var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).url;                                                 var url = [json[3] || json[2] || json[1] || json[0]];                                             }                                             return JSON.stringify({                                                 urls: url,                                                 lyric: lrc                                             })                                         }, j),                                         extra: {                                             inheritTitle: false,                                             longClick: [{                                                 title: '下载歌曲',                                                 js: $.toString((j) => {                                                     var url = JSON.parse(fetch('https://xiaoapi.cn/API/yy_sq.php?type=json&n=1&msg=' + j.title)).url;                                                     return 'download://' + url                                                 }, j)                                             }, {                                                 title: '观看MV',                                                 js: $.toString((j) => {                                                     try {                                                         var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                             timeout: 2000                                                         })).url;                                                         var url = [json[3] || json[2] || json[1] || json[0]];                                                     } catch (e) {                                                         var url = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title, {                                                             timeout: 2000                                                         })).data.url];                                                     }                                                     return JSON.stringify({                                                         urls: url,                                                     })                                                 }, j)                                             }],                                         }                                     });                                 });                                 setResult(d);                             }, txt)                         } else if (input == '小芸') {                             return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((txt) => {                                 setPageTitle('小芸搜索');                                 let d = [];                                 let yiyan = JSON.parse(fetch('hiker://files/Jm/yiyan.json'));                                 let max = yiyan.length - 1;                                 let min = 0;                                 let num = Math.floor(Math.random() * (max - min + 1)) + min;                                 var Display = yiyan[num];                                 var json = JSON.parse(fetch('http://music.163.com/api/search/get/web?type=1&offset=0&limit=90&s=' + txt)).result.songs.map(j => {                                     let singer = j.artists.map(s => s.name);                                     return {                                         title: j.name,                                         singer: singer[0],                                         pic: 'https://wanghun.top/qqmusic/wymusic.php?type=pic&id=' + j.id,                                         album: j.album.name,                                         id: j.id,                                         vid: j.mvid                                     };                                 });                                 if (MY_PAGE == 1) {                                     d.push({                                         title: '🔎\\t' + txt,                                         col_type: 'movie_1_vertical_pic_blur',                                         desc: '🧸\\t小芸音乐\\n\\n🎨\\t' + Display.replace(/，|。/g, ' '),                                         pic: json[0].pic,                                         url: 'hiker://empty',                                     });                                 }                                 json.map(j => {                                     d.push({                                         title: j.title,                                         col_type: 'text_1',                                         pic_url: j.pic + '@Referer=',                                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                             try {                                                 var js = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_wyymusic.php?br=7&n=1&num=&type=json&id=' + j.id)).music_url;                                             } catch (e) {                                                 var js = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                             }                                             var url = [js + '#isMusic=true#'];                                             try {                                                 var lrc = JSON.parse(fetch('http://music.163.com/api/song/lyric?os=pc&lv=-1&kv=-1&tv=-1&id=' + j.id)).lrc.lyric;                                             } catch {}                                             return JSON.stringify({                                                 urls: url,                                                 lyric: lrc                                             })                                         }, j),                                         extra: {                                             inheritTitle: false,                                             longClick: [{                                                 title: '下载歌曲',                                                 js: $.toString((j) => {                                                     try {                                                         var url = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_wyymusic.php?br=7&n=1&num=&type=json&id=' + j.id)).music_url;                                                     } catch (e) {                                                         var url = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                                     }                                                     return 'download://' + url                                                 }, j)                                             }, {                                                 title: '观看MV',                                                 js: $.toString((j) => {                                                     if (j.vid == '0') {                                                         var url = JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title)).data.url;                                                     } else {                                                         var url = 'https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + j.vid;                                                     }                                                     return 'video://' + url                                                 }, j)                                             }],                                         }                                     });                                 });                                 setResult(d);                             }, txt)                         } else {                             return $('hiker://empty#fypage#immersiveTheme##noHistory##noRecordHistory#').rule((txt) => {                                 setPageTitle('小莴搜索');                                 let d = [];                                 let yiyan = JSON.parse(fetch('hiker://files/Jm/yiyan.json'));                                 let max = yiyan.length - 1;                                 let min = 0;                                 let num = Math.floor(Math.random() * (max - min + 1)) + min;                                 var Display = yiyan[num];                                 var json = JSON.parse(fetch('https://search.kuwo.cn/r.s?client=kt&pn=' + (MY_PAGE - 1) + '&rn=30&vipver=1&ft=music&encoding=utf8&rformat=json&mobi=1&all=' + txt)).abslist.map(j => {                                     let img = ('http://img1.kwcdn.kuwo.cn/star/albumcover/500' + j.web_albumpic_short.split('120')[1]);                                     return {                                         title: j.SONGNAME,                                         singer: j.ARTIST,                                         pic: img,                                         album: j.ALBUM,                                         rid: j.DC_TARGETID,                                         vid: j.mvpayinfo.vid                                     };                                 });                                 if (MY_PAGE == 1) {                                     d.push({                                         title: '🔎\\t' + txt,                                         pic: json[0].pic,                                         col_type: 'movie_1_vertical_pic_blur',                                         desc: '🧸\\t小莴音乐\\n\\n🎨\\t' + Display.replace(/，|。/g, ' '),                                         url: 'hiker://empty',                                     });                                 }                                 json.map(j => {                                     d.push({                                         title: j.title,                                         col_type: 'text_1',                                         pic: j.pic + '@Referer=',                                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                             try {                                                 var js = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                                             } catch (e) {                                                 var js = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                                             }                                             let url = [js + '#isMusic=true#'];                                             try {                                                 var lrc = JSON.parse(fetch(\"https://m.kuwo.cn/newh5/singles/songinfoandlrc?musicId=\" + j.rid)).data.lrclist.map(d => {​​                                                     let s = (d.time % 60).toFixed(2).padStart(5, '0');                                                     let m = ((d.time - s) / 60).toFixed(0).padStart(2, '0');                                                     return '[' + m + ':' + s + ']' + d.lineLyric​                                                 }).join('\\n');                                             } catch {}                                             return JSON.stringify({                                                 urls: url,                                                 lyric: lrc                                             })                                         }, j),                                         extra: {                                             inheritTitle: false,                                             longClick: [{                                                 title: '下载歌曲',                                                 js: $.toString((j) => {                                                     try {                                                         var url = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                                                     } catch (e) {                                                         var url = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                                                     }                                                     return 'download://' + url                                                 }, j)                                             }, {                                                 title: '观看MV',                                                 js: $.toString((j) => {                                                     if (j.vid == '0') {                                                         var url = JSON.parse(fetch('https://api.suyanw.cn/api/kg_mv.php?n=1&msg=' + j.title)).data.url;                                                     } else {                                                         let html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + j.vid);                                                         let a = html.split('=')[3];                                                         let b = a.split('?')[0];                                                         var url = b;                                                     }                                                     return 'video://' + url                                                 }, j)                                             }],                                         }                                     });                                 });                                 setResult(d);                             }, txt)                         }                     }, txt)                 })             }),             extra: {                 defaultValue: getItem('sspt_input', ''),                 onChange: 'setItem(\"sspt_input\",input)'             }         }); /*音乐搜索引擎_结束*/     } /*固定翻页1结束*/ /*酷我音乐歌单_开始*/     let kwgd = getItem('kwgd', 'new');     let html = ('http://wapi.kuwo.cn/api/pc/classify/playlist/getRcmPlayList?loginUid=0&loginSid=0&appUid=76039576&&pn=' + MY_PAGE + '&rn=36&order=' + kwgd);     var json = JSON.parse(fetch(html)).data;     json.data.map(data => {         d.push({             title: data.name,             col_type: 'card_pic_3',             pic: data.img,             url: $('hiker://empty#fypage#immersiveTheme##noHistory##noRecordHistory#').rule((data) => {                 setPageTitle('小莴歌单');                 let d = [];                 let html = JSON.parse(fetch('https://m.kuwo.cn/newh5app/wapi/api/www/playlist/playListInfo?pid=' + data.id + '&rn=30&ua=&ip=&pn=' + MY_PAGE)).data;                 var json = html.musicList.map(j => {                     return {                         title: j.name,                         singer: j.artist,                         album: j.album,                         pic: j.pic,                         id: j.rid,                         vid: j.mvpayinfo.vid,                         time: j.songTimeMinutes                     };                 });                 if (MY_PAGE == 1) {                     d.push({                         title: html.name,                         col_type: 'movie_1_vertical_pic_blur',                         pic: html.img700 || html.uPic,                         desc: '🧸\\t' + html.userName + '\\n\\n🎼\\t' + data.total + '首',                         url: 'hiker://empty',                     });                 }                 json.map(j => {                     d.push({                         title: j.title,                         col_type: 'text_1',                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                         pic: j.pic + '@Referer=',                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                             try {                                 var js = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                             } catch (e) {                                 var js = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                             }                             let url = [js + '#isMusic=true#'];                             try {                                 var lrc = JSON.parse(fetch(\"https://m.kuwo.cn/newh5/singles/songinfoandlrc?musicId=\" + j.id)).data.lrclist.map(d => {​​                                     let s = (d.time % 60).toFixed(2).padStart(5, '0');                                     let m = ((d.time - s) / 60).toFixed(0).padStart(2, '0');                                     return '[' + m + ':' + s + ']' + d.lineLyric​                                 }).join('\\n');                             } catch {}                             return JSON.stringify({                                 urls: url,                                 lyric: lrc                             })                         }, j),                         extra: {                             inheritTitle: false,                             longClick: [{                                 title: '下载歌曲',                                 js: $.toString((j) => {                                     try {                                         var url = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                                     } catch (e) {                                         var url = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                                     }                                     return 'download://' + url                                 }, j)                             }, {                                 title: '观看MV',                                 js: $.toString((j) => {                                     if (j.vid == '0') {                                         var url = JSON.parse(fetch('https://api.suyanw.cn/api/kg_mv.php?n=1&msg=' + j.title)).data.url;                                     } else {                                         let html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + j.vid);                                         let a = html.split('=')[3];                                         let b = a.split('?')[0];                                         var url = b;                                     }                                     return 'video://' + url                                 }, j)                             }],                         }                     });                 });                 setResult(d);             }, data),         });     }); /*酷我音乐歌单_结束*/     setResult(d); })​","icon":"@js: z+'电1.png'","desc":"","type":"icon_5"},{"status":false,"pattern":0,"name":"音乐歌单","title":"音乐","url":"@js: $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {     var d = [];     if (MY_PAGE == 1) {         d.push({             title: 'ZF音乐',             col_type: 'avatar',             desc: 'ZFOK2005音乐',             pic: 'hiker://files/zf/img/qq音乐.png',             url: 'hiker://empty',         }, {             col_type: 'line',         }, {             title: '搜索',             col_type: 'input',             desc: '👉🏻 歌名、歌手、榜单名称',             url: $.toString(() => {                 if (!input) return \"toast://请输入关键词搜索\";                 var txt = input;                 setItem('sspt_input', txt); /*音乐搜索引擎_开始*/                 return $(['QQ音乐', '易云', '酷我'], 3, '请选择引擎搜索').select((txt) => {                     if (input == 'QQ音乐') {                         return $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule((txt) => {                             setPageTitle('');                             var d = [];                             var json = JSON.parse(fetch('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=so&page=' + MY_PAGE + '&per_page=30&word=' + txt)).data;                             if (MY_PAGE == 1) {                                 d.push({                                     title: 'QQ音乐',                                     col_type: 'avatar',                                     desc: json.meta.query + '•' + json.meta.estimate_sum + '首',                                     pic: 'hiker://files/zf/img/qq音乐.png',                                     url: 'hiker://empty',                                 }, {                                     col_type: 'line',                                 });                             }                             json.list.map(html => {                                 var mid = html.mid;                                 var t = html.title + ' ' + html.author;                                 d.push({                                     title: html.title + '•' + html.author,                                     col_type: 'movie_3_marquee',                                     pic_url: html.pic + '@Referer=',                                     url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((mid, t) => {                                         try {                                             try {                                                 var js = JSON.parse(fetch('https://oiapi.net/API/QQ_Music/?br=1&mid=' + mid)).url;                                             } catch {                                                 var js = JSON.parse(fetch('https://qtkj.love/api/yy.php?type=json&n=1&msg=' + t)).url;                                             }                                             var url = [js + '#isMusic=true#'];                                         } catch {                                             var name = t.split(' ')[0];                                             try {                                                 var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + name, {                                                     timeout: 1500                                                 })).url;                                             } catch {                                                 var json = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + t, {                                                     timeout: 1500                                                 })).data.url];                                             }                                             var url = json;                                         }                                         try {                                             var lrc = JSON.parse(fetch('https://api.yaohud.cn/api/music/lrc?key=aUlykA35KgmwPUpehJKNbFjo6v&type=qq&mid=' + mid)).data;                                         } catch {                                             var lrc = '歌词获取失败';                                         }                                         return JSON.stringify({                                             urls: url,                                             lyric: lrc                                         })                                     }, mid, t),                                     extra: {                                         longClick: [{                                             title: '下载歌曲',                                             js: $.toString((mid, t) => {                                                 try {                                                     var json = JSON.parse(fetch('https://oiapi.net/API/QQ_Music/?br=1&mid=' + mid)).data.music;                                                 } catch {                                                     var json = JSON.parse(fetch('https://qtkj.love/api/yy.php?type=json&n=1&msg=' + t)).music_url;                                                 }                                                 return 'download://' + json                                             }, mid, t)                                         }, {                                             title: '观看MV',                                             js: $.toString((t) => {                                                 var name = t.split(' ')[0];                                                 try {                                                     var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + name, {                                                         timeout: 1500                                                     })).url;                                                 } catch {                                                     var json = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + t, {                                                         timeout: 1500                                                     })).data.url];                                                 }                                                 var url = json;                                                 return JSON.stringify({                                                     urls: url,                                                 })                                             }, t)                                         }],                                     }                                 });                             });                             setResult(d);                         }, txt)                     } else if (input == '网易云') {                         return $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule((txt) => {                             setPageTitle('');                             var d = [];                             var json = JSON.parse(fetch('http://music.163.com/api/search/get/web?type=1&offset=0&limit=100&s=' + txt));                             if (MY_PAGE == 1) {                                 d.push({                                     title: '网易云音乐',                                     col_type: 'avatar',                                     desc: '搜索“' + txt + '”',                                     pic: 'hiker://files/zf/img/网易云音乐.png',                                     url: 'hiker://empty',                                 }, {                                     col_type: 'line',                                 });                             }                             json.result.songs.map(s => {                                 s.artists.map(a => {                                     var id = s.id;                                     var vid = s.mvid;                                     var t = s.name + ' ' + a.name;                                     d.push({                                         title: s.name + '•' + a.name,                                         col_type: 'movie_3_marquee',                                         pic_url: 'https://wanghun.top/qqmusic/wymusic.php?type=pic&id=' + id + '@Referer=',                                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((t, id, vid) => {                                             try {                                                 try {                                                     var js = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + id)).data.src;                                                 } catch {                                                     var js = ('https://music.163.com/song/media/outer/url?id=' + id);                                                 }                                                 var url = [js + '#isMusic=true#'];                                             } catch {                                                 var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                                 if (vid == '0') return json;                                                 var url = ['https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + vid];                                             }                                             try {                                                 var lrc = JSON.parse(fetch('http://music.163.com/api/song/lyric?os=pc&lv=-1&kv=-1&tv=-1&id=' + id)).lrc.lyric;                                             } catch {                                                 var lrc = '歌词获取失败';                                             }                                             return JSON.stringify({                                                 urls: url,                                                 lyric: lrc                                             })                                         }, t, id, vid),                                         extra: {                                             longClick: [{                                                 title: '下载歌曲',                                                 js: $.toString((id) => {                                                     try {                                                         var json = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + id)).data.src;                                                     } catch {                                                         var json = ('https://music.163.com/song/media/outer/url?id=' + id);                                                     }                                                     return 'download://' + json                                                 }, id)                                             }, {                                                 title: '观看MV',                                                 js: $.toString((t, vid) => {                                                     var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                                     if (vid == '0') return json;                                                     var url = ('https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + vid);                                                     return 'video://' + url                                                 }, t, vid)                                             }],                                         }                                     });                                 });                             });                             setResult(d);                         }, txt)                     } else {                         return $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule((txt) => {                             setPageTitle('');                             var d = [];                             var json = JSON.parse(fetch('https://search.kuwo.cn/r.s?client=kt&pn=' + (MY_PAGE - 1) + '&rn=30&vipver=1&ft=music&encoding=utf8&rformat=json&mobi=1&all=' + txt));                             if (MY_PAGE == 1) {                                 d.push({                                     title: '酷我音乐',                                     pic: 'hiker://files/zf/img/酷我.png',                                     col_type: 'avatar',                                     desc: '搜索“' + txt + '”',                                     url: 'hiker://empty',                                 }, {                                     col_type: 'line',                                 });                             }                             json.abslist.map(list => {                                 var rid = list.DC_TARGETID;                                 var t = list.SONGNAME + ' ' + list.ARTIST;                                 var pic = list.web_albumpic_short.split('120');                                 var img = ('http://img1.kwcdn.kuwo.cn/star/albumcover/500' + pic[1]);                                 var vid = list.mvpayinfo.vid;                                 d.push({                                     title: list.SONGNAME + '•' + list.ARTIST,                                     col_type: 'movie_3_marquee',                                     pic: img + '@Referer=',                                     url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((rid, t, vid) => {                                         try {                                             try {                                                 var js = JSON.parse(fetch('https://api.xingzhige.com/API/Kuwo_BD_new/?n=1&br=5&name=' + t)).data.src;                                             } catch {                                                 var js = fetch('https://antiserver.kuwo.cn/anti.s?type=convert_url&format=mp3&rid=' + rid);                                             }                                             var url = [js + '#isMusic=true#'];                                         } catch {                                             var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                             if (vid == '0') return json;                                             var html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + vid);                                             var a = html.split('=')[3];                                             var b = a.split('?')[0];                                             var url = [b];                                         }                                         try {                                             var lrc = JSON.parse(fetch(\"https://m.kuwo.cn/newh5/singles/songinfoandlrc?musicId=\" + rid)).data.lrclist.map(d => {​​                                                 var s = (d.time % 60).toFixed(2).padStart(5, '0');                                                 var m = ((d.time - s) / 60).toFixed(0).padStart(2, '0');                                                 return '[' + m + ':' + s + ']' + d.lineLyric​                                             }).join('\\n');                                         } catch {                                             var lrc = '歌词获取失败';                                         }                                         return JSON.stringify({                                             urls: url,                                             lyric: lrc                                         })                                     }, rid, t, vid),                                     extra: {                                         longClick: [{                                             title: '下载歌曲',                                             js: $.toString((rid, t) => {                                                 try {                                                     var json = JSON.parse(fetch('https://api.xingzhige.com/API/Kuwo_BD_new/?n=1&br=5&name=' + t)).data.src;                                                 } catch {                                                     var json = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + t)).flac_url; /*var json = fetch('https://antiserver.kuwo.cn/anti.s?type=convert_url&format=mp3&rid=' + rid);*/                                                 }                                                 return 'download://' + json                                             }, rid, t)                                         }, {                                             title: '观看MV',                                             js: $.toString((t, vid) => {                                                 var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                                 if (vid == '0') return json;                                                 var html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + vid);                                                 var a = html.split('=')[3];                                                 var b = a.split('?')[0];                                                 var url = b;                                                 return 'video://' + url                                             }, t, vid)                                         }],                                     }                                 });                             });                             setResult(d);                         }, txt)                     }                 }, txt)             }),             extra: {                 defaultValue: getItem('sspt_input', ''),             }         }); /*音乐搜索引擎_结束*/ /*QQ音乐歌单_开始*/         d.push({             title: '我的歌单',             col_type: 'text_2',             url: $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule(() => {                 if (!fileExist('hiker://files/Jm/gd.json')) {                     saveFile('hiker://files/Jm/gd.json', '[\"开店必备@7975048417@http://qpic.y.qq.com/music_cover/JpqGJ1s2wY59u0pofBjqeasmO50venLcH93lSd5LiafIxl91BLzkwgw/600?n=1\",\"热搜歌曲@7532670538@http://qpic.y.qq.com/music_cover/hKFribMhwH4ClwNWJxicuCxjuwIkbZPq4HVT0Qgxsdb8JWQXXC2TFsuQ/600?n=1\",\"动听粤语@2671456608@http://qpic.y.qq.com/music_cover/J4NTFYY1LBI9exFChdIpWTiaUocL7iaIic8iaSS0dzNW4kUkMNOOuk8wNw/600?n=1\",\"抖音热门@7630303474@http://qpic.y.qq.com/music_cover/WpvdJXfn798ibD4gcfjw0NSuBkFTJYpY5QOev3ExcBQiamRcobkpN77g/600?n=1\",\"唯美古风@7801081335@http://qpic.y.qq.com/music_cover/xLnlj0wXbc6Ufr4vIeNA5uDzTw5yzgIzhCcWN5kkHZ3JCIyRUVIBzw/600?n=1\",\"近年火爆@1551071404@http://qpic.y.qq.com/music_cover/MwQPuUvyLxWYKLmsa5JDMvTRG75ruB8lgQ3KG0ISd0BHMvGBHJZjiag/600?n=1\",\"入耳沉醉@4246958569@http://qpic.y.qq.com/music_cover/bglUEFSMMhA3eiblfHXvQRNICMnA5X4d11lqLnmwguvQ2ZmyBicwK70Q/600?n=1\",\"口哨前奏@1755112930@http://qpic.y.qq.com/music_cover/2g8aJznERGdXrFRjaqmCHAAz5kvx9lyEOLuVVFRt1mt6w4DIgqCVCw/600?n=1\",\"电音沦陷@1152182852@http://qpic.y.qq.com/music_cover/Ay2w92PeiaO57pZWMwecv6XBQBkTYHGfp3AyHQ7R0wL5SuiaMLN29H8w/600?n=1\",\"飙车BGM@7917007946@http://qpic.y.qq.com/music_cover/1AF4WbUMG5Scicge124oBFBop0YzNylDiaBIZYWqwmX3Ws88qm0RKrRA/600?n=1\",\"热门BGM@7595923629@http://qpic.y.qq.com/music_cover/QrmdXDG3R4jGSEzqu0qtRzNWvTf32HkJU3rWqwbxss4I4fKGvicOx1w/600?n=1\",\"精选单曲@7382629476@http://qpic.y.qq.com/music_cover/Z89aLA93LOSOicz0QOnMboqgLaiaFohjweglHh6JSoL8hrjOfFOC6DXw/600?n=1\"]');                 }                 var d = [];                 d.push({                     title: 'QQ音乐',                     col_type: 'avatar',                     desc: '管理',                     pic: 'hiker://files/zf/img/qq音乐.png',                     url: $(['歌单管理', '恢复默认'], 2, '请选择').select(() => {                         if (input == '歌单管理') {                             return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {                                 setPageTitle('歌单管理');                                 var d = [];                                 d.push({                                     title: '提取id',                                     col_type: 'input',                                     desc: '请输入分享后复制的链接',                                     url: $.toString(() => {                                         if (!input) return \"toast://不能为空\";                                         var txt = input;                                         var u1 = txt.split('&');                                         var u2 = u1[4];                                         var id = u2.split('=');                                         refreshPage(false);                                         copy(id[1]);                                         return 'toast://已复制' + id[1];                                     })                                 });                                 d.push({                                     title: '添加',                                     col_type: 'input',                                     desc: '显示名称@QQ音乐id@图片链接',                                     url: $.toString(() => {                                         if (!input) return \"toast://请根据提示输入内容\";                                         gedan = JSON.parse(request('hiker://files/Jm/gd.json'));                                         gedan = gedan.concat(input);                                         saveFile('hiker://files/Jm/gd.json', JSON.stringify(gedan));                                         refreshPage(false);                                         return 'toast://已添加'                                     }),                                     extra: {                                         type: 'textarea',                                         height: 2                                     }                                 });                                 d.push({                                     title: '歌单图片链接可以在歌单二级标题复制，所以可以先添加歌单再编辑添加歌单图片，或者自己选一张图作为封面。',                                     col_type: 'scroll_button',                                     url: 'hiker://empty',                                 });                                 gedan = JSON.parse(request('hiker://files/Jm/gd.json'));                                 index = 0;                                 for (var i = 0; i < gedan.length; i++) {                                     var item = gedan[i];                                     var list = item.split('@');                                     d.push({                                         title: index + '.' + list[0],                                         col_type: 'card_pic_3',                                         pic: list[2],                                         url: $(['编辑', '移位', '删除'], 3, '请选择').select((index, item) => {                                             if (input == '编辑') {                                                 return $(item, '想要更换的歌单名,歌单id,图片链接 ').input((index) => {                                                     gedan = JSON.parse(request('hiker://files/Jm/gd.json'));                                                     gedan[index] = input;                                                     saveFile('hiker://files/Jm/gd.json', JSON.stringify(gedan));                                                     refreshPage(false);                                                     return 'toast://更改成功~'                                                 }, index)                                             } else if (input == '移位') {                                                 return $('', '要移动到哪个序号前面/后面').input((index) => {                                                     gedan = JSON.parse(request('hiker://files/Jm/gd.json'));                                                     temp = gedan[index];                                                     gedan.splice(input, 0, temp);                                                     if (input < index) {                                                         gedan.splice(index + 1, 1);                                                     } else {                                                         gedan.splice(index, 1);                                                     }                                                     saveFile('hiker://files/Jm/gd.json', JSON.stringify(gedan));                                                     refreshPage(false);                                                     return 'toast://移位成功~'                                                 }, index)                                             } else {                                                 gedan = JSON.parse(request('hiker://files/Jm/gd.json'));                                                 gedan.splice(index, 1);                                                 saveFile('hiker://files/Jm/gd.json', JSON.stringify(gedan));                                                 refreshPage(false);                                                 return 'toast://删除成功~'                                             }                                         }, index, item),                                     });                                     index++;                                 }                                 setResult(d);                             })                         } else {                             deleteFile('hiker://files//Jm/gd.json');                             refreshPage(false);                             return 'toast://已恢复默认'                         }                     }),                 }, {                     col_type: 'line'                 });                 var gedan = JSON.parse(request('hiker://files/Jm/gd.json'));                 for (var i = 0; i < gedan.length; i++) {                     var list = gedan[i].split('@');                     d.push({                         title: list[0],                         col_type: 'card_pic_3',                         pic: list[2],                         url: $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule((list) => {                             var d = [];                             setPageTitle('');                             var json = JSON.parse(fetch('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=songlist&id=' + list[1])).data;                             d.push({                                 title: json.info.title,                                 col_type: 'avatar',                                 desc: json.info.songnum + '首',                                 pic: json.info.picurl,                                 url: 'copy://' + json.info.picurl,                             }, {                                 col_type: 'line',                             });                             json.list.map(html => {                                 var mid = html.mid;                                 var t = html.title + ' ' + html.author;                                 d.push({                                     title: html.title + '•' + html.author,                                     col_type: 'movie_3_marquee',                                     pic_url: html.pic + '@Referer=',                                     url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((mid, t) => {                                         try {                                             try {                                                 var js = JSON.parse(fetch('https://oiapi.net/API/QQ_Music/?br=1&mid=' + mid)).url;                                             } catch {                                                 var js = JSON.parse(fetch('https://qtkj.love/api/yy.php?type=json&n=1&msg=' + t)).url;                                             }                                             var url = [js + '#isMusic=true#'];                                         } catch {                                             var name = t.split(' ')[0];                                             try {                                                 var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + name, {                                                     timeout: 1500                                                 })).url;                                             } catch {                                                 var json = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + t, {                                                     timeout: 1500                                                 })).data.url];                                             }                                             var url = json;                                         }                                         try {                                             var lrc = JSON.parse(fetch('https://api.yaohud.cn/api/music/lrc?key=aUlykA35KgmwPUpehJKNbFjo6v&type=qq&mid=' + mid)).data;                                         } catch {                                             var lrc = '歌词获取失败';                                         }                                         return JSON.stringify({                                             urls: url,                                             lyric: lrc                                         })                                     }, mid, t),                                     extra: {                                         longClick: [{                                             title: '下载歌曲',                                             js: $.toString((mid, t) => {                                                 try {                                                     var json = JSON.parse(fetch('https://oiapi.net/API/QQ_Music/?br=1&mid=' + mid)).data.music;                                                 } catch {                                                     var json = JSON.parse(fetch('https://qtkj.love/api/yy.php?type=json&n=1&msg=' + t)).music_url;                                                 }                                                 return 'download://' + json                                             }, mid, t)                                         }, {                                             title: '观看MV',                                             js: $.toString((t) => {                                                 var name = t.split(' ')[0];                                                 try {                                                     var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + name, {                                                         timeout: 1500                                                     })).url;                                                 } catch {                                                     var json = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + t, {                                                         timeout: 1500                                                     })).data.url];                                                 }                                                 var url = json;                                                 return JSON.stringify({                                                     urls: url,                                                 })                                             }, t)                                         }],                                     }                                 });                             });                             setResult(d);                         }, list),                     });                 }                 setResult(d);             }),         }); /*QQ音乐歌单_结束*/ /*酷我音乐歌单_开始*/         d.push({             title: getItem('kwgd', '最新') == 'new' ? '最新歌单' : '最热歌单',             col_type: 'text_2',             url: $('#noLoading#').lazyRule(() => {                 setItem('kwgd', getItem('kwgd', '最新') == 'new' ? 'hot' : 'new');                 refreshPage(false);                 toast('已切换' + (getItem('kwgd', '最新') == 'new' ? '最新歌单' : '最热歌单'));                 return 'hiker://empty'             }),         }); /*网易排行榜歌单_开始*/         var wy_list = [\"飙升榜@19723756\", \"新歌榜@3779629\", \"热歌榜@3778678\", \"原创榜@2884035\"];         for (var i = 0; i < wy_list.length; i++) {             var wylist = wy_list[i].split('@');             d.push({                 title: wylist[0],                 col_type: 'text_4',                 pic: wylist[1],                 url: $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule((wylist) => {                     var d = [];                     setPageTitle('');                     var json = JSON.parse(fetch('http://music.163.com/api/v6/playlist/detail?n=1000&id=' + wylist[1]));                     d.push({                         title: '网易云音乐',                         col_type: 'avatar',                         desc: wylist[0],                         pic: 'hiker://files/zf/img/网易云音乐.png',                         url: 'hiker://empty',                     }, {                         col_type: 'line',                     });                     json.playlist.tracks.map(s => {                         var name = s.ar.map(n => n.name);                         var id = s.id;                         var vid = s.mv;                         var t = s.name + ' ' + name;                         d.push({                             title: s.name + '•' + name,                             col_type: 'movie_3_marquee',                             pic_url: s.al.picUrl + '@Referer=',                             url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((id, vid, t) => {                                 try {                                     try {                                         var js = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + id)).data.src;                                     } catch {                                         var js = ('https://music.163.com/song/media/outer/url?id=' + id);                                     }                                     var url = [js + '#isMusic=true#'];                                 } catch {                                     var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                     if (vid == '0') return json;                                     var url = ['https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + vid];                                 }                                 try {                                     var lrc = JSON.parse(fetch('http://music.163.com/api/song/lyric?os=pc&lv=-1&kv=-1&tv=-1&id=' + id)).lrc.lyric;                                 } catch {                                     var lrc = '歌词获取失败';                                 }                                 return JSON.stringify({                                     urls: url,                                     lyric: lrc                                 })                             }, id, vid, t),                             extra: {                                 longClick: [{                                     title: '下载歌曲',                                     js: $.toString((id) => {                                         try {                                             var json = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + id)).data.src;                                         } catch {                                             var json = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_wyymusic.php?br=7&n=1&type=json&id=' + id)).music_url; /*var json = ('https://music.163.com/song/media/outer/url?id=' + id);*/                                         }                                         return 'download://' + json                                     }, id)                                 }, {                                     title: '观看MV',                                     js: $.toString((vid, t) => {                                         var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                         if (vid == '0') return json;                                         var url = ('https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + vid);                                         return 'video://' + url                                     }, vid, t)                                 }],                             }                         });                     });                     setResult(d);                 }, wylist),             });         } /*网易排行榜歌单_结束*/     } /*固定翻页1结束*/     var kwgd = getItem('kwgd', 'new');     var html = ('http://wapi.kuwo.cn/api/pc/classify/playlist/getRcmPlayList?loginUid=0&loginSid=0&appUid=76039576&&pn=' + MY_PAGE + '&rn=36&order=' + kwgd);     var json = JSON.parse(fetch(html)).data;     json.data.map(data => {         d.push({             title: data.name,             col_type: 'card_pic_3',             pic: data.img,             url: $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule((data) => {                 setPageTitle('');                 var d = [];                 var json = JSON.parse(fetch('https://m.kuwo.cn/newh5app/wapi/api/www/playlist/playListInfo?pid=' + data.id + '&rn=30&ua=&ip=&pn=' + MY_PAGE)).data;                 if (MY_PAGE == 1) {                     d.push({                         title: json.name,                         col_type: 'avatar',                         pic: json.img500,                         desc: '🌀 ' + json.userName,                         url: 'hiker://empty',                     }, {                         col_type: 'line',                     });                 }                 json.musicList.forEach(list => {                     var rid = list.rid;                     var vid = list.mvpayinfo.vid;                     var t = list.name + ' ' + list.artist;                     d.push({                         title: list.name + '•' + list.artist,                         col_type: 'movie_3_marquee',                         pic: list.pic + '@Referer=',                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((rid, t, vid) => {                             try {                                 try {                                     var js = JSON.parse(fetch('https://api.xingzhige.com/API/Kuwo_BD_new/?n=1&br=5&name=' + t)).data.src;                                 } catch {                                     var js = fetch('https://antiserver.kuwo.cn/anti.s?type=convert_url&format=mp3&rid=' + rid);                                 }                                 var url = [js + '#isMusic=true#'];                             } catch {                                 var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                 if (vid == '0') return json;                                 var html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + vid);                                 var a = html.split('=')[3];                                 var b = a.split('?')[0];                                 var url = [b];                             }                             try {                                 var lrc = JSON.parse(fetch(\"https://m.kuwo.cn/newh5/singles/songinfoandlrc?musicId=\" + rid)).data.lrclist.map(d => {​​                                     var s = (d.time % 60).toFixed(2).padStart(5, '0');                                     var m = ((d.time - s) / 60).toFixed(0).padStart(2, '0');                                     return '[' + m + ':' + s + ']' + d.lineLyric​                                 }).join('\\n');                             } catch {                                 var lrc = '歌词获取失败';                             }                             return JSON.stringify({                                 urls: url,                                 lyric: lrc                             })                         }, rid, t, vid),                         extra: {                             longClick: [{                                 title: '下载歌曲',                                 js: $.toString((rid, t) => {                                     try {                                         var json = JSON.parse(fetch('https://api.xingzhige.com/API/Kuwo_BD_new/?n=1&br=5&name=' + t)).data.src;                                     } catch {                                         var json = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + t)).flac_url; /*var json = fetch('https://antiserver.kuwo.cn/anti.s?type=convert_url&format=mp3&rid=' + rid);*/                                     }                                     return 'download://' + json                                 }, rid, t)                             }, {                                 title: '观看MV',                                 js: $.toString((vid, t) => {                                     var json = JSON.parse(fetch('https://api.vps02.top/API/kg_music_mv.php?n=1&type=json&msg=' + t)).data.url;                                     if (vid == '0') return json;                                     var html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + vid);                                     var a = html.split('=')[3];                                     var b = a.split('?')[0];                                     var url = b;                                     return 'video://' + url                                 }, vid, t)                             }],                         }                     });                 });                 setResult(d);             }, data),         });     }); /*酷我音乐歌单_结束*/     setResult(d); })​","icon":"hiker://files/zf/img/电1.png","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"影视弹窗版","title":"自用","url":"@js:let title=[        {title:\"武汉天气\",icon:\"hiker://files/zf/img/0.png\",url:\"https://widget.tianqiapi.com/?style=ts&skin=durian&color=597e82&column=3&city=武汉\"},     {title:\"本地媒体\",icon:\"hiker://files/zf/img/1.png\",url:\"hiker://localMedia\"},        {title:\"仓库\",icon:\"hiker://files/zf/img/2.png\",url:\"hiker://home@github仓库[自]\"},        {title:\"主页\",icon:\"hiker://files/zf/img/3.png\",url:\"https://zf2629.github.io/\"},        {title:\"本地合集\",icon:\"hiker://files/zf/img/4.png\",url:\"hiker://home@本地合集\"},        {title:\"远程合集\",icon:\"hiker://files/zf/img/5.png\",url:\"hiker://home@远程合集\"},       {title:\"91看电视\",icon:\"hiker://files/zf/img/6.png\",url:\"hiker://home@91看电视\"},        {title:\"爱听书APP\",icon:\"hiker://files/zf/img/7.png\",url:\"hiker://home@爱听书APP\"},        {title:\"爱听音乐\",icon:\"hiker://files/zf/img/8.png\",url:\"hiker://home@爱听音乐\"},        {title:\"顶点小说APP\",icon:\"hiker://files/zf/img/9.png\",url:\"hiker://home@顶点小说APP\"},        {title:\"纯粹直播\",icon:\"hiker://files/zf/img/11.png\",url:\"hiker://home@LemonLive2\"},        {title:\"下载仓库\",icon:\"hiker://files/zf/img/12.png\",url:\"海阔视界规则【仓库.hiker】￥home_rule_url￥https://raw.githubusercontent.com/zf2629/zf/refs/heads/main/仓库.hiker\"}    ];$(title,3,\"影视\").select((title)=>{let i=title.findIndex(t=>t.title==input);let url=title[i].url;return url},title)","icon":"@js: z+'电2.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"图文弹窗版修改中","title":"娱乐","url":"@js: $([{    title: '斗鱼直播',    icon: 'hiker://files/zf/img/0.png'}, {    title: '哔哩舞蹈',    icon: 'hiker://files/zf/img/1.png'}, {    title: '猫眼电影',    icon: 'hiker://files/zf/img/2.png'}, {    title: '开眼视频',    icon: 'hiker://files/zf/img/3.png'}, {    title: '靓丽视频',    icon: 'hiker://files/zf/img/4.png'}, {    title: '靓丽美图',    icon: 'hiker://files/zf/img/5.png'}, {    title: '微梦图床',    icon: 'hiker://files/zf/img/6.png'}, {    title: '惜染图库',    icon: 'hiker://files/zf/img/7.png'}, {    title: '暂无',    icon: 'hiker://files/zf/img/8.png'}, {    title: '暂无',    icon: 'hiker://files/zf/img/9.png'}, ], 2, '请选择').select(() => {    if (input == '猫看白噪音') {        return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule(() => {            setPageTitle('猫看白噪音');            let d = [];            d.push({                col_type: 'x5_webview_single',                desc: 'float&&100%',                url: 'https://www.maokan.cc/',                extra: {                    canBack: true,                    autoPlay: true,                    showProgress: false,                }            });            setResult(d);        })    }         else if (input == '猫眼电影') {        return $('hiker://empty#fypage#noHistory##noRecordHistory##fullTheme#').rule(() => {            setPageTitle('猫眼电影');            let d = [];            let my_list = getItem('maoyan', 'movieOnInfoList');            let json = JSON.parse(fc('https://m.maoyan.com/ajax/' + my_list + '?ci=&token=&limit=0', 12)).movieIds;            if (MY_PAGE == 1) {                d.push({                    title: '猫眼电影',                    desc: getItem('maoyan', 'movieOnInfoList') == 'movieOnInfoList' ? '正在热映' : '即将上映',                    col_type: 'avatar',                    pic: 'https://favicon.qqsuu.cn/https://m.maoyan.com/',                    url: $('#noLoading#').lazyRule(() => {                        setItem('maoyan', getItem('maoyan', 'movieOnInfoList') == 'movieOnInfoList' ? 'comingList' : 'movieOnInfoList');                        refreshPage(false);                        toast('已切换' + (getItem('maoyan', 'movieOnInfoList') == 'movieOnInfoList' ? '正在热映' : '即将上映'));                        return 'hiker://empty'                    }),                }, {                    col_type: 'line',                });            }            let n = MY_PAGE;            if (MY_PAGE == 1) {                var data = json.slice(0, 6);            } else if (MY_PAGE => 2) {                var data = json.slice(n * 6 - 6, n * 6);            }            data.map(j => {                let js = JSON.parse(fetch('https://m.maoyan.com/ajax/detailmovie?movieId=' + j));                let xq = js.detailMovie;                let desc = (xq.cat + '\\n' + xq.star + '\\n' + xq.pubDesc).replace(/undefined/g, '');                d.push({                    title: xq.nm + '\\n\\n🔹' + xq.dir,                    desc: desc,                    col_type: 'movie_1_vertical_pic',                    pic_url: xq.img ? xq.img : xq.videoImg,                    url: $('hiker://empty#noHistory##noRecordHistory##fullTheme#').rule((xq) => {                        setPageTitle(xq.nm);                        let d = [];                        d.push({                            title: xq.nm,                            desc: '图片',                            col_type: 'avatar',                            pic: xq.img ? xq.img : xq.videoImg,                            url: $('hiker://empty#noHistory##noRecordHistory##gameTheme#').rule((xq) => {                                if (xq.photos == null) return 'toast://木有图片哦。';                                let d = [];                                xq.photos.map(img => {                                    d.push({                                        col_type: 'pic_1_full',                                        pic: img + '#.jpg',                                        url: img + '#.jpg',                                    });                                });                                setResult(d);                            }, xq),                        }, {                            col_type: 'big_blank_block',                        });                        d.push({                            col_type: 'x5_webview_single',                            desc: 'list&&200',                            url: xq.videourl ? xq.vd : '',                            extra: {                                autoPlay: true,                                showProgress: false                            }                        }, {                            col_type: 'big_blank_block',                        }, {                            col_type: 'big_blank_block',                        });                        var list = storage0.getItem('maoyan_search', '[\"青豆\", \"聚影\", \"风影\", \"云盘君.简\"]');                        list.forEach(function(l) {                            d.push({                                title: l,                                col_type: 'text_4',                                url: 'hiker://search?rule=' + l + '&s=' + xq.nm,                                extra: {                                    longClick: [{                                        title: '更改搜索',                                        js: $.toString((list) => {                                            return $(list, '想要更改的搜索小程序名称').input(() => {                                                storage0.setItem('maoyan_search', input);                                                refreshPage(false);                                                return 'hiker://empty'                                            }, list)                                        }, list),                                    }, {                                        title: '恢复默认',                                        js: $.toString(() => {                                            clearItem('maoyan_search', input);                                            refreshPage(false);                                            return 'hiker://empty'                                        })                                    }],                                }                            });                        });                        d.push({                            col_type: 'big_blank_block',                        }, {                            col_type: 'line_blank',                        });                        d.push({                            title: xq.videoName ? xq.videoName + '\\n\\n' + xq.dra : xq.dra,                            col_type: 'long_text',                        });                        setResult(d);                    }, xq),                });            });            setResult(d);        })    }     else if (input == '斗鱼直播') {        return $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {            let d = [];            let fl_id = getItem('斗鱼', '');            let img = 'https://api.xinac.net/icon/?url=https://m.douyu.com';            var fenlei = [{                title: \"原创IP\",                icon: \"https://cs-op.douyucdn.cn/dycatr/1c4f9b3e0db24610879faf1e041d53d5.jpg\",                id: \"ip\"            }, {                title: \"一起看\",                icon: \"https://sta-op.douyucdn.cn/dycatr/af69eeb1943a9444d2362a7f06c22dc6.png\",                id: \"yqk\"            }, {                title: \"二次元\",                icon: \"https://sta-op.douyucdn.cn/dycatr/346f48f437946cd2ef2a00bb0314e6f3.jpg\",                id: \"ecy\"            }, {                title: \"音乐\",                icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/fe21193c72537bad3cd9917d67e4b02c.png\",                id: \"music\"            }, {                title: \"户外\",                icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/b24b716b2a13bc0b758632e5b20e0835.png\",                id: \"HW\"            }, {                title: \"美食\",                icon: \"https://sta-op.douyucdn.cn/dycatr/695949a51d22548a26880235cb6f9c13.png\",                id: \"ms\"            }, {                title: \"心动派对\",                icon: \"https://sta-op.douyucdn.cn/dycatr/19da1f24bc54c3fc5b5dca9af3993a85.png\",                id: \"xdpd\"            }, {                title: \"音遇恋人\",                icon: \"https://sta-op.douyucdn.cn/dycatr/fa56a271305bfd86421dee8851e0a077.png\",                id: \"yinyu\"            }, {                title: \"星秀\",                icon: \"https://sta-op.douyucdn.cn/dycatr/13054bd5068b08d7716a207efe6e4b01.png\",                id: \"xingxiu\"            }, {                title: \"心动FM\",                icon: \"https://sta-op.douyucdn.cn/dycatr/d8cd4a9bfd0425cba1739a6392c46215.png\",                id: \"dtxs\"            }, {                title: \"娱乐推荐\",                icon: \"https://sta-op.douyucdn.cn/dycatr/6def7235dc5e010575ec3254425cc2bf.png\",                id: \"yltj\"            }, {                title: \"颜值\",                icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/d1546cfd3f7f985719f894496f2a7b2e.png\",                id: \"yz\"            }, {                title: \"推荐\",                icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/06d8d4d79ed2f444dd6d88e374c7cd42.png\",                id: \"\"            }, {                title: \"王者荣耀\",                icon: \"https://sta-op.douyucdn.cn/dycatr/0d96d63ee9550728acd899d66eee3625.png\",                id: \"wzry\"            }, {                title: \"和平精英\",                icon: \"https://sta-op.douyucdn.cn/dycatr/8560eb4cba9e734a0d7408f6a9b9efb8.png\",                id: \"hpjy\"            }, {                title: \"英雄联盟\",                icon: \"https://sta-op.douyucdn.cn/dycatr/1de1ea5215b513cf4f5b3c326f5f9657.png\",                id: \"LOL\"            }, {                title: \"热门游戏\",                icon: \"https://sta-op.douyucdn.cn/dycatr/e8d2f2deca2025ec12874d6d6792489a.png\",                id: \"rmyx\"            }, {                title: \"CF手游\",                icon: \"https://sta-op.douyucdn.cn/dycatr/fb26cc75b5d8777f287b2ca0947f5df6.png\",                id: \"CFSY\"            }];            if (MY_PAGE == 1) {                d.push({                    title: '斗鱼直播',                    col_type: 'avatar',                    desc: '切换',                    pic: img,                    url: $(fenlei, 3, '请选择').select((fenlei) => {                        let i = fenlei.findIndex(t => t.title == input);                        let url = fenlei[i].id;                        setItem('斗鱼', url);                        refreshPage(false);                        return 'hiker://empty'                    }, fenlei),                }, {                    col_type: 'line',                }, {                    title: '搜索',                    col_type: 'input',                    desc: '输入你想搜索的',                    url: $.toString(() => {                        if (!input) return 'toast://请输入关键词搜索';                        var txt = input;                        return $('hiker://empty#fypage#noHistory##noRecordHistory#').rule((txt) => {                            setPageTitle('搜索' + '“' + txt + '”');                            let d = [];                            try {                                var json = JSON.parse(fetch('https://www.douyu.com/japi/search/api/searchShow?kw=' + txt + '&page=' + MY_PAGE + '&pageSize=20')).data;                            } catch {}                            let js = json.relateShow.forEach(j => {                                var id = j.rid;                                d.push({                                    desc: j.nickName + '🔹' + j.hot,                                    title: j.cateName + '•' + j.roomName,                                    img: j.roomSrc,                                    col_type: 'movie_2',                                    url: $('#noLoading#').lazyRule((id) => {                                        let a = 'http://zzy789.xyz/douyu1.php?id=' + id;                                        let b = 'http://maomao.kandiantv.cn/douyu1.php?id=' + id;                                        let url = ['video://' + a, 'video://' + b];                                        return JSON.stringify({                                            urls: url,                                        })                                    }, id),                                });                            });                            setResult(d);                        }, txt)                    }),                });            }            try {                var json = JSON.parse(fetch('https://m.douyu.com/api/room/list?limit=20&page=' + MY_PAGE + '&type=' + fl_id)).data;            } catch {}            json.list.map(data => {                var id = data.rid;                d.push({                    title: data.roomName,                    desc: data.nickname + '🔹' + data.hn,                    col_type: 'movie_2',                    pic_url: data.roomSrc,                    url: $('#noLoading#').lazyRule((id) => {                        let a = 'http://zzy789.xyz/douyu1.php?id=' + id;                        let b = 'http://maomao.kandiantv.cn/douyu1.php?id=' + id;                        let url = ['video://' + a, 'video://' + b];                        return JSON.stringify({                            urls: url,                        })                    }, id),                });            });            setResult(d);        })    }     else if (input == '哔哩舞蹈') {        return $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {            setPageTitle('B站舞蹈');            let d = [];            let rid = getItem('rid', '199');            if (MY_PAGE == 1) {                d.push({                    title: '哔哩舞蹈',                    col_type: 'avatar',                    desc: '切换',                    pic: 'hiker://files/02f/more/哔.png',                    url: $('#noLoading#').lazyRule(() => {                        var list = [{                            'title': '日常',                            'rid': '21'                        }, {                            'title': '音乐',                            'rid': '28'                        }, {                            'title': '现场',                            'rid': '29'                        }, {                            'title': '宅舞',                            'rid': '20'                        }, {                            'title': '街舞',                            'rid': '198'                        }, {                            'title': '明星',                            'rid': '199'                        }, {                            'title': '国风',                            'rid': '200'                        }, {                            'title': '网红',                            'rid': '255'                        }, {                            'title': '综合',                            'rid': '154'                        }];                        let title = list.map(i => i.title);                        return $(title, 3, '请选择一个分类').select((list) => {                            let u = list.findIndex(i => i.title == input);                            let id = list[u].rid;                            setItem('rid', id);                            refreshPage(false);                            return 'toast://已切换'                        }, list)                    }),                    extra: {                        longClick: [{                            title: '输入Cookie_sessdata',                            js: $.toString(() => {                                let bili = getItem('bili_input', '');                                return $(bili, 'Cookie中的sessdata\\n输入后才可观看高清视频').input(() => {                                    if (!input) return \"toast://不能为空\";                                    let txt = input;                                    setItem('Cookie_sessdata', txt);                                    setItem('bili_input', txt);                                    refreshPage(false);                                    return 'toast://可以观看高清视频啦'                                })                            })                        }],                    }                }, {                    col_type: 'line',                });            }            let json = JSON.parse(fetch('https://api.bilibilI.com/x/web-interface/newlist?type=0&pn=' + MY_PAGE + '&ps=100&jsonp=jsonp&rid=' + rid)).data;            json.archives.map(html => {                var bvid = html.bvid;                d.push({                    title: html.title,                    desc: html.tname,                    col_type: 'movie_3_marquee',                    pic_url: html.pic + '@Referer=',                    url: $('hiker://empty#noHistory##noRecordHistory#').lazyRule((bvid) => {                        try {                            var json = JSON.parse(fetch('https://api.aag.moe/api/bzspjx?url=https://m.bilibili.com/video/' + bvid));                            var url = ['video://' + json.videourl];                            var audio = [json.audiourl];                        } catch (e) {                            var url = JSON.parse(fetch('https://api.pearktrue.cn/api/bilibili/parse.php?bvid=' + bvid + '&sessdata=' + getItem('Cookie_sessdata'))).data.videos.map(data => data.videourl);                            var audio;                        }                        return JSON.stringify({                            urls: url,                            audioUrls: audio                        })                    }, bvid),                });            });            setResult(d);        })    }     else if (input == '一个图文') {        return $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule(() => {            let d = [];            d.push({                col_type: 'x5_webview_single',                desc: 'float&&100%',                url: 'http://m.wufazhuce.com/one',                extra: {                    canBack: true,                    showProgress: false,                }            });            setResult(d);        })    }     else if (input == '靓丽视频') {        return $('hiker://empty##immersiveTheme##noHistory##noRecordHistory#').rule(() => {            setPageTitle('遇见');            var d = [];            var fl = getItem('分类', 'ksxjjsp');            var html = ('http://www.yujn.cn/api/' + fl + '.php');            var 接口 = getItem('接口', html);            d.push({                col_type: 'x5_webview_single',                desc: '640&&float',                url: 接口,                extra: {                    canBack: true,                    autoPlay: true,                }            }, {                col_type: 'big_blank_block',            }, {                title: '换一个',                col_type: 'text_2',                url: $('#noLoading#').lazyRule(() => {                    refreshPage(false);                    return 'hiker://empty'                })            }, {                title: '切换分类',                col_type: 'text_2',                url: $('#noLoading#').lazyRule(() => {                    var list = [{                        'name': '快手',                        'id': 'ksxjjsp'                    }, {                        'name': '汉服',                        'id': 'hanfu'                    }, {                        'name': '玉足',                        'id': 'yuzu'                    }, {                        'name': '慢摇',                        'id': 'manyao'                    }, {                        'name': '美腿',                        'id': 'jpmt'                    }, {                        'name': '吊带',                        'id': 'diaodai'                    }, {                        'name': '清纯',                        'id': 'qingchun'                    }, {                        'name': '穿搭',                        'id': 'chuanda'                    }, {                        'name': 'COS',                        'id': 'COS'                    }, {                        'name': '丝滑舞蹈',                        'id': 'shwd'                    }, {                        'name': '完美身材',                        'id': 'wmsc'                    }, {                        'name': '萌娃',                        'id': 'mengwa'                    }, {                        'name': '纯情女高',                        'id': 'nvgao'                    }, {                        'name': '双倍快乐',                        'id': 'sbkl'                    }, {                        'name': '你的欲梦',                        'id': 'ndym'                    }, {                        'name': '萝莉',                        'id': 'luoli'                    }, {                        'name': '甜妹',                        'id': 'tianmei'                    }, {                        'name': 'jk洛丽塔',                        'id': 'jksp'                    }, {                        'name': '小哥哥',                        'id': 'xgg'                    }, {                        'name': '热舞',                        'id': 'rewu'                    }];                    var name = list.map(list => list.name);                    return $(name, 3, '请选择分类').select((list) => {                        var o = list.findIndex(list => list.name == input);                        var url = list[o].id;                        setItem('分类', url);                        clearItem('接口');                        refreshPage(false);                        return 'toast://已切换分类'                    }, list)                }),            }, {                title: '更换接口',                col_type: 'text_2',                url: $('', '想更换的.php接口地址').input(() => {                    setItem('接口', input);                    clearItem('分类');                    refreshPage(false);                    return 'toast://已切换接口'                }),            }, {                title: '雅萌系列',                col_type: 'text_2',                url: $('#noLoading#').lazyRule(() => {                    setItem('接口', 'https://api.qqsuu.cn/api/dm-xjj?apiKey=5766419f45855dcbef647ae6d42f80e9');                    clearItem('分类');                    refreshPage(false);                    return 'toast://已切换雅萌系列'                }),            }, {                title: '当前接口：' + 接口,                col_type: 'scroll_button',                url: 'copy://' + 接口,            });            setResult(d);        })    }     else if (input == '惜染图库') {        return $('hiker://empty#fypage##gameTheme##noHistory##noRecordHistory#').rule(() => {            setPageTitle('惜染图库');            let d = [];            d.push({                col_type: 'x5_webview_single',                desc: 'float&&100%',                url: 'https://hefollo.com/?%E6%89%8B%E6%9C%BA%E7%AB%AF-%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87',                extra: {                    canBack: true,                    autoPlay: true,                    showProgress: false,                }            });            setResult(d);        })    }     else if (input == '靓丽美图') {        return $('hiker://empty#fypage##gameTheme##noHistory##noRecordHistory#').rule(() => {            setPageTitle('靓丽美图');            var d = [];            var html = JSON.parse(fetch(\"http://jiuli.xiaoapi.cn/i/img/mnyjs.php\"));            html.img.map(ms => {                d.push({                    col_type: 'pic_1_full',                    pic: ms,                    url: ms,                });            });            setResult(d);        })    }         else if (input == '猫看白噪音') {        return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule(() => {            setPageTitle('猫看白噪音');            let d = [];            d.push({                col_type: 'x5_webview_single',                desc: 'float&&100%',                url: 'https://www.maokan.cc/',                extra: {                    canBack: true,                    autoPlay: true,                    showProgress: false,                }            });            setResult(d);        })    }         else if (input == '开眼视频') {        return $('hiker://empty#fypage#noHistory##noRecordHistory#').rule(() => {            setPageTitle('开眼视频');            let d = [];            function json(url) {                try {                    var json = JSON.parse(fetch(url));                    var item = json.itemList;                } catch {}                item.forEach((item, index) => {                    if (item.type == \"video\") {                        let img = item.data.cover.feed.replace('ali-ali-', 'ali-').split('?')[0];                        d.push({                            title: item.data.title,                            col_type: 'movie_2',                            pic_url: img,                            url: 'video://' + item.data.playUrl,                        });                    };                });                putVar('n', json.nextPageUrl);            };            if (MY_PAGE == 1) {                json('http://baobab.kaiyanapp.com/api/v4/tabs/selected');            } else {                nextp = getVar('n');                json(nextp);            }            setResult(d);        })    }})","icon":"@js: z+'电3.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"电台","title":"电台","url":"@js: $('hiker://empty#noHistory##noRecordHistory#').rule(() => {     setPageTitle('电台广播');    var titles = [ '清晨音乐@https://live.ximalaya.com/radio-first-page-app/live/1011/24.m3u8?transcode=ts', '新闻听天下@https://lhttp.qtfm.cn/live/20500169/64k.mp3', '环球资讯@http://sk.cri.cn/905.m3u8', '北京新闻广播@https://live.ximalaya.com/radio-first-page-app/live/1789/24.m3u8?transcode=ts', '第一财经@https://live.ximalaya.com/radio-first-page-app/live/56/24.m3u8?transcode=ts', '福建交通广播@https://live.ximalaya.com/radio-first-page-app/live/790/24.m3u8?transcode=ts', '厦门音乐广播@https://live1b.kxm.xmtv.cn/aac_xmyybf_1b/playlist.m3u8', '上海动感101@https://live.ximalaya.com/radio-first-page-app/live/53/24.m3u8?transcode=ts', '上海Love Radio@https://live.ximalaya.com/radio-first-page-app/live/55/24.m3u8?transcode=ts', '全时线上音乐@http://lhttp.qingting.fm/live/4913/64k.mp3', '天籁古典@http://lhttp.qingting.fm/live/20210756/64k.mp3', '星河音乐@https://lhttp.qtfm.cn/live/20210755/64k.mp3', '粤语电台@http://lhttp.qingting.fm/live/15318569/64k.mp3', '怀集音乐@https://live.ximalaya.com/radio-first-page-app/live/966/24.m3u8?transcode=ts', '佛山电台 FM906@https://lhttp.qtfm.cn/live/1264/64k.mp3', 'AsiaFM 亚洲粤语台@https://live.ximalaya.com/radio-first-page-app/live/999/24.m3u8?transcode=ts', 'AsiaFM 好听音乐台@https://live.ximalaya.com/radio-first-page-app/live/1427/24.m3u8?transcode=ts', 'AsiaFM 流行音乐台@https://live.ximalaya.com/radio-first-page-app/live/764/24.m3u8?transcode=ts', 'AsiaFM 欧美音乐台@https://lhttp.qtfm.cn/live/20071/64k.mp3', '听梦想FM@https://live.ximalaya.com/radio-first-page-app/live/1015/24.m3u8?transcode=ts', '轻松调频@http://sk.cri.cn/915.m3u8', '鱼佬音乐坊@http://lhttp.qingting.fm/live/20500158/64k.mp3', '心动电台@http://lhttp.qingting.fm/live/20500161/64k.mp3', '90后潮流音悦台@http://lhttp.qingting.fm/live/20207760/64k.mp3', '卷卷猫故事电台@http://lhttp.qingting.fm/live/20500038/64k.mp3', '中国歌曲排行榜@https://live2.kxm.xmtv.cn/aac_xmyy/playlist.m3u8?_upt=14bafea41666103689', '娱乐广播@http://ngcdn014.cnr.cn/live/ylgb/index.m3u8', '交通广播@http://ngcdn016.cnr.cn/live/gsgljtgb/index.m3u8', '文艺之声@http://ngcdn010.cnr.cn/live/wyzs/index.m3u8', '经济之声@http://sk.cri.cn/am1008.m3u8', '中国之声@http://ngcdn001.cnr.cn/live/zgzs/index.m3u8', '中华之声@http://ngcdn005.cnr.cn/live/zhzs/index.m3u8', '华夏之声@http://ngcdn007.cnr.cn/live/hxzs/index.m3u8', '南海之声@http://sk.cri.cn/nhzs.m3u8', '乡村之声@http://ngcdn017.cnr.cn/live/xczs/index.m3u8', '中广新闻网@http://stream.rcs.revma.com/78fm9wyy2tzuv', '中广流行网@http://stream.rcs.revma.com/aw9uqyxy2tzuv', '中广音乐网@http://stream.rcs.revma.com/ks4vsmg3qtzuv', '台湾海峡@http://sk.cri.cn/hxfh.m3u8', '济南故事广播@http://ls.qingting.fm/live/1672.m3u8', '陕西故事广播@http://ls.qingting.fm/live/1608.m3u8', '江苏故事广播@http://lzlive.vojs.cn/rWjyus9/92/live.m3u8', '长春故事广播@http://ls.qingting.fm/live/5014.m3u8', '安徽戏曲广播@http://satellitepull.CNR.cn/live/wxahxqgb/playlist.m3u8', '河南戏曲@http://lhttp.qingting.fm/live/15318393/64k.mp3'];     var d = [];     titles.forEach(function(title) {         var t = title.split('@');         d.push({             title: t[0],             url: t[1] + '#isMusic=true#',             col_type: 'icon_2_round',             pic: 'hiker://files/zf/img/听.png',         });     });     setResult(d); })","icon":"@js: z+'电4.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"放映厅","title":"放映厅","url":"@js: var live = [    {    'name': '放映厅1',    'url': 'hiker://files/zf/live/cctv.json'},          {    'name': '放映厅2',    'url': 'hiker://files/zf/live/live02.json'},          {    'name': '放映厅3',    'url': 'hiker://files/zf/live/live999.json'}               ];    var t = live.map(l => l.name);$(t, 2, '请选择').select((live) => {    var txt = input;                   let t = live.findIndex(l => l.name == txt);     var u = live[t].url;                          return $('hiker://empty#noHistory##noRecordHistory#').rule((u, txt) => {        setPageTitle(txt);                                                                                      let d = [];        try {                        var json = JSON.parse(fetch(u)).data;                                                                                                                                                d.push({                title: '搜索',                col_type: 'input',                desc: '请输入关键词',                url: $.toString((json) => {                    function search(name) {                        return json.filter(item => item.name.toLowerCase().includes(name.toLowerCase()));                    }                    let results = search(input);                    if (results.length > 0) {                        return $('hiker://empty').rule((results) => {                            let d = [];                            let img = ('hiker://files/zf/img/播.png');                            results.forEach(r => {                                d.push({                                    title: r.name,                                    col_type: 'icon_2_round',                                    pic: img,                                    url: $('#noLoading#').lazyRule((r) => {                                        return JSON.stringify({                                            urls: r.url,                                        })                                    }, r),                                    extra: {                                        inheritTitle: false                                    }                                });                            });                            setResult(d);                        }, results)                    } else {                        return 'toast://没有找到'                    }                }, json)            });            json.forEach(a => {                let url = ('hiker://files/zf/live/live01.json');                let img = ('hiker://files/zf/img/播.png');                let imgs = ('hiker://files/zf/img/播.png');                d.push({                    title: a.name,                    col_type: 'icon_2_round',                    pic: u == url ? imgs : img,                    url: $('#noLoading#').lazyRule((a) => {                        if (a.url == \"\") return 'toast://你咋不放链接嘞！';                        let url = a.url;                        return JSON.stringify({                            urls: url,                        })                    }, a),                    extra: {                        inheritTitle: false                    }                });            });        } catch {}        setResult(d);    }, u, txt)}, live);","icon":"@js: z+'电5.png'","desc":"","type":"icon_5"}],"fold_status":true,"pattern":3},{"name":"黑","mark":"","list":[{"status":true,"pattern":0,"name":"美女1","title":"美女1","url":"@js: $('hiker://empty#noRecordHistory##gameTheme#').rule(() => {     let d = [];     let xjj = getPath('hiker://files/zf/file/xjjPro.html');     if (!fileExist(xjj)) {         confirm({             title: '导入',             content: '检测到你没有本地文件，是否导入',             confirm: $.toString((xjj) => {                 writeFile(xjj, fetch('https://gh-proxy.com/https://raw.githubusercontent.com/zf2629/files/refs/heads/main/xjjpro.html'));                 refreshPage(false);             }, xjj),             cancel: $.toString(() => {})         });     };     d.push({         col_type: 'x5_webview_single',         url: xjj,         desc: 'float&&100%',         extra: {             autoPlay: true,             showProgress: false,             ua: MOBILE_UA         }     });     setResult(d); });","icon":"@js: z+'美1.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"电视","title":"电视","url":"@js: $('#noLoading#').lazyRule(() => {     return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {         setPageTitle('我的电视台');         var titles = [  'CCTV1 综合@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv1#.m3u8',  'CCTV13 新闻@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv13#.m3u8',  'CCTV5 体育@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv5#.m3u8', 'CCTV5+ 体育@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=cctv5p#.m3u8',  '湖北卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=hubws#.m3u8',  '江苏卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=jsws#.m3u8',  '浙江卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=zjws#.m3u8',  '东方卫视@https://bp-cdn-ali.bestv.cn/enhance/bestvdfws_enhance.m3u8?auth_key=1750698007-2f4275c970374be784d5ade7f5a0d40e-0-69a11396ebdea8d313db02fd26f63b88',  '湖南卫视@http://110.42.37.69:6688/live/live.php?token=8O3reADW&id=hnws#.m3u8',];         var t = titles;         var d = [];         var img = 'hiker://files/zf/img/播.png';         for (var i = 0; i < t.length; i++) {             var k = t[i].split(/\\s*@\\s*/);             if (k.length < 2) continue;             d.push({                 title: k[0],                 url: 'video://' + k[1],                 col_type: 'icon_2_round',                 pic_url: img,             });         }         setHomeResult(d);     }) });","icon":"@js: z+'播1.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"添加项目","title":"添加项目","url":"@js:$().x5cKey('abbBook@'+(This_Group?This.name:'#空白组#')+'@'+(order_Group===undefined?order:order_Group))","icon":"@js: z+'添加.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"美图","title":"美图","url":"@js: $('#noLoading#').lazyRule(() => {     return $('hiker://empty#fypage##gameTheme##noHistory##noRecordHistory#').rule(() => {         setPageTitle('美女研究社');         var d = [];         var html = JSON.parse(fetch(\"http://jiuli.xiaoapi.cn/i/img/mnyjs.php\"));        html.img.map(ms => {d.push({             col_type: 'pic_1_full',             pic: ms,             url: ms,         });});         setResult(d);     }) });","icon":"@js: z+'美2.png'","desc":"","type":"icon_5"},{"status":true,"pattern":0,"name":"oooo","title":"ooo","url":"@js: $('hiker://empty#noRecordHistory##gameTheme#').rule(() => {     let d = [];     let xjj = getPath('hiker://files/zf/file/xjj.html');     if (!fileExist(xjj)) {         confirm({             title: '导入',             content: '检测到你没有本地文件，是否导入',             confirm: $.toString((xjj) => {                 writeFile(xjj, fetch('https://gh-proxy.com/https://raw.githubusercontent.com/zf2629/files/refs/heads/main/xjj.html'));                 refreshPage(false);             }, xjj),             cancel: $.toString(() => {})         });     };     d.push({         col_type: 'x5_webview_single',         url: xjj,         desc: 'float&&100%',         extra: {             autoPlay: true,             showProgress: false,             ua: MOBILE_UA         }     });     setResult(d); });","icon":"@js: z+'美3.png'","desc":"","type":"icon_5"}],"fold_status":true,"pattern":3},{"title":"导入文件","url":"@js: $(order).clickLazy(() => {     let localHtml = fetch('hiker://files/zf/hikerlive/ktv.json');     let gitHtml = fetch('https://zfspace.neocities.org/hiker/hikerlive/ktv.json');     if (!gitHtml) return \"toast://网络html获取失败\";     const Localfile = HikerHome.getLocalfile();     const bookMark = HikerHome.getBookmarksList(Localfile.getItem(\"BookmarksList\"));     var book = bookMark.get(input);     book.status = !book.status;     bookMark.modify(input, book);     refreshPage(false);     writeFile(\"hiker://files/zf/hikerlive/ktv.json\", gitHtml);     return \"toast://导入成功\"; });","type":"","name":"导入文件","status":false}],"SettingConfig":{"myYiYan":"长风破浪会有时，直挂云帆济沧海。||人生得意须尽欢，莫使金樽空对月。||书山有路勤为径，学海无涯苦作舟。||唯有长江水，无语东流。||莫愁前路无知己，天下谁人不识君。","topPic":"hiker://images/logo","avatarPic":"","hitokotoSwitch":true,"logoType":"pic_1_card","maxHomeCount":12,"myVariables":""}}