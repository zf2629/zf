海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@小红影视@{"last_chapter_rule":"","title":"小红影视","author":"狗浩啊","url":"hiker://empty##https://xiaohys.com/show/movie/page/fypage.html","version":6,"col_type":"movie_3","class_name":"","type":"video","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\nif (MY_PAGE == 1) {\n    d.push({\n        desc: \"搜你想要的...\",\n        title: \"🔍\",\n        url: \"'hiker://search?rule=\" + MY_RULE.title + \"&s='+input\",\n        col_type: \"input\",\n    });\n}\nlet true_url = getMyVar(MY_RULE.url, MY_URL)\nconst page = MY_PAGE;\n\n\nvar getRangeColors = function() {       \n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \n}\n//动态分类定义 \nconst 分类颜色 = getRangeColors();\nconst 大类定位 = '.swiper-wrapper&&li:not(:matches(首页|我的|Q群|周期|专题))';\nconst 大类标题 = 'a&&Text';\nconst 大类链接 = 'a&&href';\n\nconst 拼接分类 = 'body--.swiper-wrapper--.swiper-wrapper&&.swiper-wrapper';\nconst 小类定位 = 'body&&li';\nconst 分类标题 = 'a&&Text';\nconst 分类链接 = 'li&&data-type@@@li&&data-val';\nconst 清除键 = ['class', 'area', 'long', 'version', 'state', 'letter'];\n\nvar html = request(true_url.replace('hiker://empty##', ''))\neval(JSON.parse(request('hiker://page/dtfl')).rule);\n\ntype = pdfh(html, '#dataList&&data-type');\ntime = \"\" + Math.ceil(new Date().getTime() / 1000)\nkey = md5(\"DS\" + time + \"DCC147D11943AF75\")\n\n\n/*数据 = JSON.parse(post(\"https://xiaohys.com//index.php/api/vod\", {\n    headers: {\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"User-Agent\": \"Mozilla/5.0 (Linux; Android 12; 2201122C Build/SKQ1.211006.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/95.0.4638.74 Mobile Safari/537.36\"\n    },\n    body: {\n            type: type,\n            page: page,\n            time: time,\n            key: key,\n            class: getMyVar('dt_class', ''),\n            area: getMyVar('dt_area', ''),\n            year: getMyVar('dt_year', ''),\n            lang: getMyVar('dt_lang', ''),\n            letter: getMyVar('dt_letter', ''),\n            state: getMyVar('dt_state', ''),\n            version: getMyVar('dt_version', ''),\n            by: getMyVar('dt_time', ''),\n        }\n})).list\n*/\n\n\n数据 = JSON.parse(post(\"https://xiaohys.com//index.php/api/vod\", {\n\n    headers: {\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"User-Agent\": \"Mozilla/5.0 (Linux; Android 12; 2201122C Build/SKQ1.211006.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/95.0.4638.74 Mobile Safari/537.36\"\n\n    },\n    body: {\n        'type': type,\n        'page': page,\n        'time': time,\n        'key': key,\n        class: getMyVar('dt_class', ''),\n        area: getMyVar('dt_area', ''),\n        year: getMyVar('dt_year', ''),\n        lang: getMyVar('dt_lang', ''),\n        letter: getMyVar('dt_letter', ''),\n        state: getMyVar('dt_state', ''),\n        version: getMyVar('dt_version', ''),\n        by: getMyVar('dt_time', ''),\n    }\n\n\n\n\n})).list\n\nconst list = 数据\n\nlist.forEach(item => {\n    var urll = \"https://xiaohys.com/detail/\" + item.vod_id+ '/' + \"#immersiveTheme#\";\n    d.push({\n        title: item.vod_name,\n        desc: item.vod_remarks,\n        img: item.vod_pic,\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\n        extra: {\n            url: urll,\n            pic: item.vod_pic\n        },\n        col_type: 'movie_3_marquee',\n    })\n})\n\nsetResult(d);","search_url":"/search**/page/fypage/","group":"#️⃣②影视","searchFind":"js:\nvar d = [];\nvar html = getResCode()\nlet c = getVar(\"cecidy\", \"\");\nif (c != \"\") {\n    setItem(MY_HOME, c);\n    clearVar(\"cecidy\");\n}\n//clearItem(MY_HOME)\nvar cookie = getItem(MY_HOME, \"\")\n\nlet headers = {\n    \"Cookie\": cookie,\n    \"User-Agent\": MOBILE_UA,\n};\n//log(cookie)\nlet html = fetch(MY_URL, {\n    headers: headers,\n});\n\nif (html.includes(\"验证\")) {\n    d.push({\n        title: \"人机验证\",\n        col_type: \"text_center_1\",\n        url: MY_URL + $(\"\").rule(() => {\n            var d = [];\n            d.push({\n                title: \"\",\n                url: MY_URL,\n                col_type: \"x5_webview_single\",\n                desc: \"float&&100%\",\n                extra: {\n                    ua: MOBILE_UA,\n                    js: $.toString(() => {\n                        function check() {\n                            let c = fba.getCookie(location.href);\n                            let nodes = document.querySelectorAll('.search-box');\n\n                            if (nodes && nodes.length > 0 && c) {\n                                fba.putVar(\"cecidy\", c);\n                                fba.log(c)\n                                fba.parseLazyRule($$$().lazyRule(() => {\n                                    back();\n                                }));\n                            } else {\n                                setTimeout(check, 250);\n                            }\n                        }\n                        check();\n                    })\n                }\n            })\n            setResult(d);\n        })\n    })\n}\r\nvar list = pdfa(html, 'body&&.search-box');//列表\nfor (var j in list) {\nvar img=pd(list[j], '.lazy&&data-src')+'@Referer=';//图片\n    d.push({\n        title: pdfh(list[j], '.thumb-txt&&Text'),//标题\n        desc: pdfh(list[j], '.thumb-else&&Text'),//第几集或清晰度\n        img: img,\ncontent:pdfh(list[j], '.thumb-blurb&&Text'),//简介或影片信息\n        url: $(pd(list[j], 'a&&href').replace(/\\/play\\/(.*?)-\\d+-\\d+\\.html/, \"/bangumi/$1.html\")+ \"#immersiveTheme#\").rule(()=>{\nrequire ('hiker://page/ej')\n}),\nextra: {\n  \n            pic: img\n        }\n        \n    });\n}\r\nsetResult(d)","detail_col_type":"movie_1","detail_find_rule":"js:\nvar d = [];\nvar html = getResCode();\n\nvar arts = pdfa(html, '.nav-swiper&&a:not(:matches(下载))');\n\nvar tabs = [];\nfor (var i in arts) {\n    tabs.push(pdfh(arts[i], 'Text'))\n}\n\nvar conts = pdfa(html, 'body&&.anthology-list-box');\n\nvar lists = [];\nfor (var i in conts) {\n    lists.push(pdfa(conts[i], 'body&&a'))\n}\ntry {\nd.push({\n    title: pdfh(html, '.search-show&&li:contains(导演：)&&Text').substring(0, 18) +\n        '\\n' +\n        '\\n' +\n             pdfh(html,\n'.search-show&&li:contains(主演：)&&Text').substring(0, 18),\n    desc: pdfh(html, '.search-show&&li:contains(更新：)&&Text'),\n    img: MY_PARAMS.pic,\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur',extra: {gradient: true}\n});\nvar 简介 = pdfh(html, '.top26&&Text')\nd.push({\n    title: '‘‘’’<small><font color=\"#ff148e8e\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\"red\">详情</font></small></small>',\n    url: 'hiker://empty#' + '\\n' + 简介 +'#noHistory#' + `@rule=js: var d = [];d.push({title:'影片简介：'+ MY_URL.split('#')[1],col_type: 'long_text'}); setResult(d);`,\n    col_type: 'text_1'\n});\n} catch (e) {\nd.push({\n    img: pd(html, \n'.lazyload&&data-original') +'@Referer=',\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur',extra: {gradient: true}\n});\n}\n\n eval(JSON.parse(fetch('hiker://page/lazy', {})).rule);\n\nfunction setTabs(tabs, vari) {\n    d.push({\n        title: (getVar('shsort') == '1') ? '““””<b><span style=\"color: #FF0000\">逆序</span></b>' : '““””<b><span style=\"color: #1aad19\">正序</span></b>',\n        url: `@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功'`,\n        col_type: 'flex_button'\n    })\n    for (var i = 0; i < tabs.length; i++) {\n        var url = \"#noLoading#@lazyRule=.js:putVar('\" + vari + \"', '\" + i + \"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\";\n        d.push({\n            title: getVar(vari, '0') == i ? '““' + tabs[i] + '””' : tabs[i],\n            url: url,\n            col_type: 'flex_button'\n        })\n    }\n}\n\nfunction setLists(lists, index) {\n    var list = lists[index];\n    if (getVar('shsort') == '1') {\n        var list = lists[index].reverse();\n    }\n    for (var j in list) {\n        d.push({\n            title: pdfh(list[j], 'a&&Text')\n                .replace(/第(\\d+)集/, '$1')\n                .replace('第', '')\n                .replace('期', ''),\n            url: pd(list[j], 'a&&href') + lazy,\n            col_type: list.length > 3 ? 'text_4' : 'text_2'\n        });\n    }\n}\n\nsetTabs(tabs, MY_URL);\nsetLists(lists, getVar(MY_URL, '0'));\nd.push({\n    col_type: 'blank_block'\n});\nd.push({\n    col_type: 'line_blank'\n});\nd.push({\n    title: '‘‘’’<small><font color=#20b2aa>数据资源收集于网络，海阔不提供任何资源！</font></small>',\n    desc: '‘‘’’<small><font color=#ff7f50>本规则仅限学习与交流，请导入后24小时内删除，请勿传播！</font></small>',\n    url: 'hiker://empty',\n    col_type: 'text_center_1',\n    extra: {\n        lineVisible: false\n    }\n});\n\nsetResult(d);\n\n","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"mobile","preRule":"initConfig({\n    host: getItem('link', 'http://kan8.tv')\n});","pages":"[{\"col_type\":\"movie_3\",\"name\":\"lazy\",\"path\":\"lazy\",\"rule\":\"var lazy = $('').lazyRule((MY_HOME) => {\\n    eval(getCryptoJS())\\n\\n    function videotype(url, type) {\\n        var type = type || 'mp4';\\n        if (url.indexOf(\\\"m3u8\\\") > 0) {\\n            thetype = \\\"m3u8\\\"\\n        } else if (url.indexOf(\\\".flv\\\") > 0) {\\n            thetype = \\\"flv\\\"\\n        } else if (url.indexOf(\\\".ts\\\") > 0) {\\n            thetype = \\\"ts\\\"\\n        } else if (url.indexOf(\\\".mkv\\\") > 0) {\\n            thetype = \\\"mkv\\\"\\n        } else {\\n            if (type == \\\"hls\\\" || type == \\\"m3u8\\\") {\\n                thetype = \\\"m3u8\\\"\\n            } else {\\n                var ext = url.substring(url.lastIndexOf('.') + 1);\\n                thetype = type ? type : ext\\n            }\\n        }\\n        return thetype\\n    }\\n\\n    function cryptJs(text, key, iv, type) {\\n        var type = type || false;\\n        var key = CryptoJS.enc.Utf8.parse(key || '8' + 'Rs' + 'NMc' + 'Ss' + 'r1T' + 'Y7' + 'jX' + 'c');\\n        var iv = CryptoJS.enc.Utf8.parse(iv || 'd' + 'k' + 'z' + 'a' + 'X' + 'i' + 'wK' + 'ql' + 'iW' + '55' + 'EY');\\n        if (type) {\\n            var content = CryptoJS.AES.encrypt(text, key, {\\n                iv: iv,\\n                mode: CryptoJS.mode.CBC,\\n                padding: CryptoJS.pad.Pkcs7\\n            })\\n        } else {\\n            var content = CryptoJS.AES.decrypt(text, key, {\\n                iv: iv,\\n                padding: CryptoJS.pad.Pkcs7\\n            }).toString(CryptoJS.enc.Utf8)\\n        }\\n        return content\\n    }\\n    var html = request(input);\\n    var MacPlayer = JSON.parse(html.match(/r player_.*?=(.*?)</)[1])\\n    //log(MacPlayer)\\n\\n\\n    if (/xgdm/.test(MacPlayer.from)) {\\n        // 密钥，用于生成 HMAC 签名\\n        const secretKey = \\\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\\\";\\n\\n        // 当前时间戳（秒）\\n        const timestamp = Math.floor(Date.now() / 1000);\\n\\n        // 生成指定长度的随机字符串（nonce）\\n        function generateNonce(length) {\\n            length = length || 16; // 默认长度为 16\\n            const chars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\\";\\n            let result = \\\"\\\";\\n            for (let i = 0; i < length; i++) {\\n                result += chars.charAt(Math.floor(Math.random() * chars.length));\\n            }\\n            return result;\\n        }\\n\\n        // 生成签名（HMAC-SHA256）\\n        function generateSignature(params, key) {\\n            const sortedKeys = Object.keys(params).sort();\\n            const queryString = sortedKeys.map(k => `${k}=${params[k]}`).join(\\\"&\\\");\\n            return CryptoJS.HmacSHA256(queryString, key).toString(CryptoJS.enc.Hex);\\n        }\\n\\n        // 随机字符串\\n        const nonce = generateNonce();\\n\\n        // 签名参数对象\\n        const payload = {\\n            url: MacPlayer.url,\\n            timestamp,\\n            nonce,\\n        };\\n\\n        // 生成签名\\n        const signature = generateSignature(payload, secretKey);\\n\\n        // 构造请求地址\\n        const apiUrl = `${MY_HOME}/api/xgplayer/dec.php?url=${encodeURIComponent(MacPlayer.url)}&timestamp=${timestamp}&nonce=${nonce}&signature=${signature}`;\\n\\n        // 请求解密接口，获取最终播放地址\\n        const xgurl = JSON.parse(request(apiUrl)).url;\\n\\n        // 从返回的 URL 中提取 vid\\n        const vid = xgurl.split('vid=')[1];\\n\\n        // 构造 m3u8 播放列表路径\\n        const basePath = `https://xgct-video.vzcdn.net/${vid}/`;\\n\\n        // 获取 m3u8 内容\\n        const m3u8Content = fetch(basePath + \\\"playlist.m3u8\\\");\\n\\n        // 匹配所有 m3u8 分段地址\\n        const playlist = m3u8Content.match(/.*?m3u8/g).map(item => {\\n            return {\\n                title: item.replace(/.+x(.*?)\\\\/.+/g, \\\"$1P\\\"),\\n                url: basePath + item,\\n            };\\n        });\\n\\n        // 提取所有分段标题和地址\\n        const titles = playlist.map(item => item.title);\\n        const urls = playlist.map(item => item.url);\\n\\n        // 返回 JSON 字符串\\n        return JSON.stringify({\\n            names: titles,\\n            urls: urls,\\n        });\\n    } else if (/1080zyk/.test(MacPlayer.from)) {\\n\\n        return MacPlayer.url+\\\"#isVideo=true#\\\"\\n\\n\\n    }else if (/xhys/.test(MacPlayer.from)) {\\n\\n        eval(request(\\\"https://jx.xiaohys.com/api/ctyun/?url=\\\"+MacPlayer.url).match(/var rand =([\\\\s\\\\S]*?;){2}/)[0])\\n\\n            function js_decrypt(str, key, iv) {\\n                eval(getCryptoJS())\\n                var key = CryptoJS.enc.Utf8.parse(key);\\n                var iv = CryptoJS.enc.Utf8.parse(iv);\\n                var decrypted = CryptoJS.AES.decrypt(str, key, {\\n                    iv: iv,\\n                    padding: CryptoJS.pad.Pkcs7\\n                }).toString(CryptoJS.enc.Utf8);\\n                return decrypted\\n            }\\n\\n            var video = JSON.parse(js_decrypt(player, 'VFBTzdujpR9FWBhe', rand)).url\\n            return video + '#isVideo=true#'\\n\\n\\n    }else if(/bili/.test(MacPlayer.from)){\\n       \\n       \\n       return \\\"toast://官方链接懒得写免嗅\\\"\\n    }\\n\\n  \\n    if (typeof(MacPlayer) !== 'undefined') {\\n        videoUrl = MacPlayer.url;\\n        //log(videoUrl)\\n        if (typeof(MacPlayer.url_next) !== 'undefined') {\\n            next = MacPlayer.url_next;\\n            pre = MacPlayer.link_pre\\n        }\\n        vod_name = pdfh(html, \\\"head&&title&&Text\\\");\\n        if (typeof(MacPlayer.from) !== 'undefined') {\\n            vod_name += \\\" - \\\\u64ad\\\\u653e\\\\u7f16\\\\u7801\\\\uff1a\\\" + MacPlayer.from + \\\"\\\"\\n        }\\n        if (typeof(MacPlayer.nid) !== 'undefined') {\\n            vod_name += \\\" - \\\\u7b2c\\\" + MacPlayer.sid + \\\"-\\\" + MacPlayer.nid + \\\"\\\\u96c6\\\"\\n        }\\n    }\\n    //log(vod_name)\\n    if (videoUrl == '') {\\n        stray.error('\\\\u64ad\\\\u653e\\\\u5730\\\\u5740\\\\u4e0d\\\\u5f97\\\\u4e3a\\\\u7a7a');\\n        return false\\n    }\\n    type = videotype(videoUrl);\\n    //log(type)\\n    var data = JSON.parse(post(MY_HOME + '/static/player/artplayer/api.php?ac=getdate', {\\n        headers: {\\n            \\\"x-requested-with\\\": \\\"XMLHttpRequest\\\"\\n        },\\n        body: {\\n            \\\"url\\\": videoUrl,\\n            \\\"type\\\": type,\\n            \\\"title\\\": vod_name,\\n            \\\"referer\\\": input\\n        }\\n    }))\\n    if (data.code == 200) {\\n        key = CryptoJS.MD5(\\\"xiaohys.com\\\").toString().slice(0, 16);\\n        config = JSON.parse(cryptJs(data.player, key, data.iv));\\n        play_info = JSON.parse(cryptJs(data.data, key, data.iv));\\n        log(play_info)\\n        playurl = play_info.url\\n\\n\\n       }else if (playurl === videoUrl || /\\\\.(m3u8|mp4|flv|avi|mkv)(\\\\?|$)/i.test(playurl) === false) {\\n    return 'toast://视频地址无效，无法播放'\\n   }\\n        return playurl + '#isVideo=true#'\\n    \\n\\n}, MY_HOME)\"},{\"col_type\":\"movie_3\",\"name\":\"验证码\",\"path\":\"yzm\",\"rule\":\"while (/输入验证码|系统安全验证/.test(html)) {\\nrc('https://gitcode.net/liuzaoyue/hai/-/raw/master/juyue.js', 24); \\n    let headers = {\\n        \\\"User-Agent\\\": MOBILE_UA,\\n        \\\"Referer\\\": MY_URL\\n    }\\n    let sz = ocr(MY_HOME + '/verify/index.html?', headers);    \\n     fetch(MY_HOME + html.match(/\\\\/index.php.*?verify=/)[0] + sz, {\\n        headers: headers,\\n        method: 'POST'\\n    })   \\n    var yz = MY_URL\\n   // log(MY_URL)\\n    html = request(yz, {\\n        //   headers: headers\\n    })\\n}\\nif (/频繁操作/.test(html)) {\\n    d.push({\\n    title: '网站搜索时间间隔十秒',\\n    desc: \\\"十秒后下拉刷新重试\\\"\\n})\\n\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"短视动态\",\"path\":\"dtfl\",\"rule\":\"js:\\n/*\\nVer 2023-10-28 1.0\\n备注：不要用海阔代码格式化 内容会出错\\n必须参数：\\n分类颜色 大类定位 \\n小类定位 分类标题 分类链接\\nhtml =>源码 page =>页码\\n可选参数：\\n拼接分类 折叠标记 展开标记 排除\\n大类链接 大类标题 清除键 开启折叠\\n附加定位\\n说明：\\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\\n魔改:α\\n*/\\n\\nlet empty = \\\"hiker://empty\\\";\\nlet categories = [];\\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n    if (拼接分类.includes(';')) {\\n        拼接分类 = 拼接分类.split(';');\\n    }\\n    if (拼接分类.constructor == Array) {\\n        拼接分类.forEach(item => {\\n            categories = categories.concat(pdfa(html, item));\\n        })\\n    } else {\\n        categories = [pdfa(html, 大类定位).join('\\\\n')].concat(pdfa(html, 拼接分类));\\n    }\\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\\n        附加定位.forEach(x => {\\n            var 一级 = pdfa(html, x.一级定位).map(s => {\\n                var 定位 = pdfa(s, x.小类).map(q => {\\n                    var title = pdfh(q, x.标题);\\n                    var url = 'a'\\n                    if (x.链接.includes('@@')) {\\n                        state = x.链接.split('@@')[0]\\n                        value = pdfh(q, x.链接.split('@@')[1]);\\n                        if (x.转换 == true) {\\n                            return `<li data-type=\\\"${state}\\\" data-val=\\\"${value}\\\"><a href=\\\"\\\">${title}</a></li>`\\n                        } else {\\n                            return `<a type=\\\"@extra\\\" state=\\\"${state}\\\" value=\\\"${value}\\\">${title}</a>`;\\n                        }\\n                    } else {\\n                        href = pd(q, x.链接);\\n                        return `<a href=\\\"${href}\\\">${title}</a>`;\\n                    }\\n                });\\n                return 定位;\\n            });\\n            categories.push(一级.join('\\\\n'));\\n        });\\n    }\\n} else {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n}\\n\\nlet items = [];\\nlet cates = [];\\nlet init_cate = new Array(20).fill(\\\"0\\\");\\nconst fold = getMyVar(MY_RULE.group, \\\"0\\\");\\nconst cate_temp = JSON.parse(getMyVar(\\\"head.cate\\\", JSON.stringify(init_cate)));\\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\\\"#FF0000\\\");\\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\\\"#1aad19\\\");\\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\\n全清.unshift('yi_firstpage');\\n\\n\\nif (parseInt(page) === 1) {\\n    if (搜索) {\\n        d.push({\\n            title: \\\"\\\",\\n            url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n            desc: \\\"搜索关键词\\\",\\n            col_type: \\\"input\\\",\\n            extra: {\\n                defaultValue: getMyVar('keyword', ''),\\n                onChange: $.toString(() => {\\n                    putMyVar('keyword', input);\\n                })\\n            }\\n        })\\n    }\\n    if (折叠状态) {\\n        if (page == 1) {\\n            items.push({\\n                title: fold === '1' ? 折叠 : 展开,\\n                url: $(\\\"#noLoading#\\\").lazyRule((title, fold, u, all, exps) => {\\n                    var fold = getMyVar(MY_RULE.group, fold);\\n                    var [展开, 折叠] = exps;\\n                    if (fold == 1) {\\n                        var cx = findItemsByCls(title + 'cate_button');\\n                        storage0.putMyVar('cate_button', cx);\\n                        deleteItemByCls(title + 'cate_button');\\n                    } else {\\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\\n                            return x;\\n                        });\\n                        addItemAfter(title + 'cate_line', cx)\\n                    }\\n                    /*all.forEach((item) => {\\n                      clearMyVar(item);\\n                    });*/\\n                    updateItem(title + 'cate_exp', {\\n                        title: fold == 1 ? 展开 : 折叠,\\n                    })\\n                    putMyVar(MY_RULE.group, fold === \\\"1\\\" ? \\\"0\\\" : \\\"1\\\");\\n                    return \\\"hiker://empty\\\";\\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\\n                col_type: 'scroll_button',\\n                extra: {\\n                    id: MY_RULE.title + 'cate_exp',\\n                    longClick: [{\\n                        title: '清除状态',\\n                        js: $.toString((x, all, cl) => {\\n                            clearMyVar(x);\\n                            clearMyVar('head.cate');\\n                            all.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            cl.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            refreshPage();\\n                        }, 状态, 全清, 清除)\\n                    }]\\n                }\\n            })\\n        }\\n    }\\n    let setTitle = (k, i, t) => {\\n        return k == i ? \\\"““””\\\" + t.fontcolor(分类颜色) : t\\n    }\\n    categories.forEach((category, index) => {\\n        let sub_categories = [];\\n        if (小类定位.includes(';')) {\\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\\n            if (sub_categories.length == 0) {\\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\\n            }\\n        } else {\\n            sub_categories = pdfa(category, 小类定位);\\n        }\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\\n\\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\\n\\n                let title = pdfh(item, _大类标题);\\n                if (typeof (排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                }\\n                let params = {\\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\\n                }\\n\\n                let url = pd(item, _大类链接);\\n                if (大类处理) {\\n                    //log(一级分类处理)\\n                    //log($.stringify(一级分类处理))\\n                    let input = url;\\n                    eval(\\\"result = \\\" + 一级分类处理);\\n                    //log(result)\\n                    url = result;\\n                }\\n                items.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    col_type: 'scroll_button',\\n                    url: $(url + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = [];\\n                        params.clears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(new_cate));\\n                        putMyVar(params.state, input);\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params)\\n                });\\n            });\\n            items.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    id: MY_RULE.title + 'cate_line',\\n                }\\n            })\\n        } else {\\n            sub_categories.forEach((item, key) => {\\n                var extrapos = false;\\n                if (item.includes('type=\\\"@extra\\\"')) {\\n                    extrapos = true;\\n                    //log('附加定位')\\n                }\\n\\n                if (extrapos) {\\n                    var title = pdfh(item, 'a&&Text');\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n                    var json = {\\n                        type: pdfh(item, 'a&&state'),\\n                        value: pdfh(item, 'a&&value'),\\n                    }\\n                } else {\\n\\n                    var title = pdfh(item, 分类标题);\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n\\n                    var json = '';\\n                    switch (true) {\\n                        case 分类链接.includes('@@@'):\\n                            json = {\\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\\n                            }\\n                            break;\\n                        case 分类链接.includes('@@'):\\n                            json = {\\n                                type: 分类链接.split('@@')[0],\\n                                value: pdfh(item, 分类链接.split('@@')[1]),\\n                            }\\n                            break;\\n                        default:\\n                            json = pd(item, 分类链接);\\n                            break;\\n                    }\\n                    /*var json=分类链接.includes('@@@')?{\\n                         type:pdfh(item,分类链接.split('@@@')[0]),\\n                         value:pdfh(item,分类链接.split('@@@')[1]),\\n                     }:pd(item,分类链接);\\n                     \\n                     json=分类链接.includes('@@')?{\\n                         type:分类链接.split('@@')[0],\\n                         value:pdfh(item,分类链接.split('@@')[1]),\\n                     }:pd(item,分类链接);*/\\n\\n                }\\n\\n                let params = {\\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\\n                }\\n                cates.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.cate_temp[params.index] = params.key.toString();\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(params.cate_temp));\\n                        if (params.json.constructor === Object) {\\n                            putMyVar('dt_' + params.json.type, params.json.value);\\n                        } else {\\n                            putMyVar(params.state, params.json);\\n                        }\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params),\\n                    col_type: 'scroll_button',\\n                    extra: {\\n                        cls: MY_RULE.title + 'cate_button',\\n                    }\\n                });\\n            });\\n            cates.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    cls: MY_RULE.title + 'cate_button',\\n                }\\n            });\\n        }\\n    })\\n}\\n\\n\\nif (fold === \\\"1\\\" || 折叠状态 == false) {\\n    items = items.concat(cates);\\n}\\nif (fold === \\\"0\\\") {\\n    storage0.putMyVar('cate_button', cates)\\n}\\nif (typeof setPreResult != 'undefined') {\\n    items = d.concat(items);\\n    //清空继承数组\\n    d.length = 0;\\n    setPreResult(items);\\n} else {\\n    items.forEach(item => {\\n        d.push(item);\\n    })\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"二级\",\"path\":\"ej\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\n\\nvar arts = pdfa(html, '.nav-swiper&&a:not(:matches(下载))');\\n\\nvar tabs = [];\\nfor (var i in arts) {\\n    tabs.push(pdfh(arts[i], 'Text'))\\n}\\n\\nvar conts = pdfa(html, 'body&&.anthology-list-box');\\n\\nvar lists = [];\\nfor (var i in conts) {\\n    lists.push(pdfa(conts[i], 'body&&a'))\\n}\\ntry {\\nd.push({\\n    title: pdfh(html, '.search-show&&li:contains(导演：)&&Text').substring(0, 18) +\\n        '\\\\n' +\\n        '\\\\n' +\\n             pdfh(html,\\n'.search-show&&li:contains(主演：)&&Text').substring(0, 18),\\n    desc: pdfh(html, '.search-show&&li:contains(更新：)&&Text'),\\n    img: MY_PARAMS.pic,\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur',extra: {gradient: true}\\n});\\nvar 简介 = pdfh(html, '.top26&&Text')\\nd.push({\\n    title: '‘‘’’<small><font color=\\\"#ff148e8e\\\">' + 简介.substr(0, 55) + '...</font><small><font color=\\\"red\\\">详情</font></small></small>',\\n    url: 'hiker://empty#' + '\\\\n' + 简介 +'#noHistory#' + `@rule=js: var d = [];d.push({title:'影片简介：'+ MY_URL.split('#')[1],col_type: 'long_text'}); setResult(d);`,\\n    col_type: 'text_1'\\n});\\n} catch (e) {\\nd.push({\\n    img: pd(html, \\n'.this-pic-bj&&style').replace(\\\"background-image: url('\\\",\\\"\\\").replace(\\\"')\\\",\\\"\\\") +'@Referer=',\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur',extra: {gradient: true}\\n});\\n}\\n\\n eval(JSON.parse(fetch('hiker://page/lazy', {})).rule);\\n\\nfunction setTabs(tabs, vari) {\\n    d.push({\\n        title: (getVar('shsort') == '1') ? '““””<b><span style=\\\"color: #FF0000\\\">逆序</span></b>' : '““””<b><span style=\\\"color: #1aad19\\\">正序</span></b>',\\n        url: `@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功'`,\\n        col_type: 'flex_button'\\n    })\\n    for (var i = 0; i < tabs.length; i++) {\\n        var url = \\\"#noLoading#@lazyRule=.js:putVar('\\\" + vari + \\\"', '\\\" + i + \\\"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\\\";\\n        d.push({\\n            title: getVar(vari, '0') == i ? '““' + tabs[i] + '””' : tabs[i],\\n            url: url,\\n            col_type: 'flex_button'\\n        })\\n    }\\n}\\n\\nfunction setLists(lists, index) {\\n    var list = lists[index];\\n    if (getVar('shsort') == '1') {\\n        var list = lists[index].reverse();\\n    }\\n    for (var j in list) {\\n        d.push({\\n            title: pdfh(list[j], 'a&&Text')\\n                .replace(/第(\\\\d+)集/, '$1')\\n                .replace('第', '')\\n                .replace('期', ''),\\n            url: pd(list[j], 'a&&href') + lazy,\\n            col_type: list.length > 3 ? 'text_4' : 'text_2'\\n        });\\n    }\\n}\\n\\nsetTabs(tabs, MY_URL);\\nsetLists(lists, getVar(MY_URL, '0'));\\nd.push({\\n    col_type: 'blank_block'\\n});\\nd.push({\\n    col_type: 'line_blank'\\n});\\nd.push({\\n    title: '‘‘’’<small><font color=#20b2aa>数据资源收集于网络，海阔不提供任何资源！</font></small>',\\n    desc: '‘‘’’<small><font color=#ff7f50>本规则仅限学习与交流，请导入后24小时内删除，请勿传播！</font></small>',\\n    url: 'hiker://empty',\\n    col_type: 'text_center_1',\\n    extra: {\\n        lineVisible: false\\n    }\\n});\\n\\nsetResult(d);\"}]","icon":"","proxy":""}