海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@本地合集@{"last_chapter_rule":"","title":"本地合集","author":"ZF2629","url":"hiker://empty","version":96,"col_type":"icon_round_small_4","class_name":"","type":"all","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nconst QING_TITLE = getMyVar('myCollection'),\n    newWindow = readFile('newWindow'),\n    typeShow = getMyVar('typeShow', ''),\n    types = {\n        '': '全部',\n        'all': '聚合',\n        'video': '视频',\n        'music': '音频',\n        'live': '直播',\n        'cartoon': '漫画',\n        'read': '阅读',\n        'picture': '图集',\n        'news': '资讯',\n        'tool': '工具',\n        'other': '其它'\n    }\nlet el = [{\n        title: ' ' + QING_TITLE.bold() + ' &nbsp &nbsp ' + '⚙ 轻合集设置 ⚙'.small(),\n        url: 'hiker://page/Config?rule=' + QING_TITLE + '&#noRecordHistory#',\n        img: MY_RULE.icon || 'hiker://images/icon1',\n        col_type: 'avatar'\n    }, {\n        url: '\"hiker://search?s=\"+input',\n        desc: '搜你想要的...',\n        title: '搜索',\n        col_type: 'input',\n        extra: {\n            rules: $.toString((QING_TITLE, typeShow) => {\n                let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\n                if (typeShow) rules = rules.filter((v) => v.type == typeShow)\n                return JSON.stringify(rules)\n            }, QING_TITLE, typeShow),\n            defaultValue: getMyVar('searchKey', ''),\n            onChange: \"putMyVar('searchKey',input)\"\n        }\n    }],\n    rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\nfor (let k in types)\n    if (!k || rules.find((v) => v.type == k))\n        el.push({\n            title: '““””' + (k == typeShow ? types[k].bold().fontcolor('#12b668') : types[k]),\n            url: k == typeShow ? 'hiker://empty' : $('#noLoading#').lazyRule((k) => {\n                putMyVar('typeShow', k)\n                refreshPage(false)\n                return 'hiker://empty'\n            }, k),\n            col_type: 'scroll_button'\n        })\n\neval(JSON.parse(fetch('hiker://page/urlParse?rule=' + QING_TITLE)).rule)\nif (typeShow) rules = rules.filter((v) => v.type == typeShow)\nrules.forEach((v) => {\n    let urlParam = v.url.split(';'),\n        ruleTmp = {\n            title: v.title,\n            url: urlParam.shift(),\n            class_name: v.class_name,\n            class_url: v.class_url,\n            area_name: v.area_name,\n            area_url: v.area_url,\n            year_name: v.year_name,\n            year_url: v.year_url,\n            sort_name: v.sort_name,\n            sort_url: v.sort_url\n        },\n        fypage = ruleTmp.url.includes('fypage') ? 'fypage' : '1',\n        domain = (/(https?:\\/\\/.+?)(?:\\/|$)/i.exec(ruleTmp.url) || [, 'hiker://empty'])[1],\n        d = {\n            title: v.title,\n            url: 'hiker://page/frameLoad',\n            img: v.icon || 'hiker://images/icon1',\n            extra: {\n                url: domain + '/#noHistory##noRecordHistory####' + JSON.stringify({\n                    RULE: base64Encode(JSON.stringify(ruleTmp)),\n                    pageNum: fypage,\n                    QING_TITLE: getMyVar('myCollection')\n                }) + '.js:eval(JSON.parse(fetch(\"hiker://page/urlParse？？rule=' + QING_TITLE + '\")).rule)；；indexUrl(input);' + paramHandle(urlParam, v.ua),\n                RULE: {\n                    title: v.title\n                },\n                isIndex: true\n            }\n        }\n    if (newWindow) Object.assign(d.extra, {\n        newWindow: true,\n        windowId: QING_TITLE + '_' + d.title\n    })\n    el.push(d)\n})\nsetResult(el)","search_url":"hiker://empty?keyword=**","group":"[合]","searchFind":"js:\nsetResult([{\n    title: \"点我开始轻合集•视界聚搜\",\n    url: \"hiker://search?s=\" + getParam(\"keyword\"),\n    extra: {\n        rules: $.toString(() => {\n            const QING_TITLE = getMyVar('myCollection'),\n                typeShow = getMyVar('typeShow', '')\n            let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\n            if (typeShow) rules = rules.filter((v) => v.type == typeShow)\n            return JSON.stringify(rules)\n        })\n    }\n}])\n","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"auto","preRule":"putMyVar('myCollection', MY_RULE.title)\nputMyVar('remoteUrl', 'hiker://page/data')\n// \n/*\n*/\n\n\n","pages":"[{\"col_type\":\"text_1\",\"name\":\"ClassTab\",\"path\":\"ClassTab\",\"rule\":\"const ClassTab = function(classArray, params) {\\n    Object.assign(this, params)\\n    this.arr = classArray.map(v => this.init(v))\\n    this.sign = '$' + QING_TITLE + '_' + (this.name || '') + '_'\\n    this.color = this.color || '#12b668'\\n    this.boundary = this.boundary || 'blank_block'\\n}\\nClassTab.prototype = {\\n    constructor: ClassTab,\\n    load(el) {\\n        let folded = this.fold && getVar('fold_' + this.sign, '')\\n        if (this.arr.length > 1 && this.fold) el.push({\\n            title: '““””' + (folded ? '▶' : '▼').fontcolor('#049eff'),\\n            url: $('#noLoading#').lazyRule((sign, folded) => {\\n                putVar('fold_' + sign, { '': 'T', 'T': '' } [folded])\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, this.sign, folded),\\n            col_type: 'scroll_button'\\n        })\\n        let arr = folded ? [this.arr[0]] : this.arr\\n        arr.forEach((v) => {\\n            let { id, class_name, class_url } = v,\\n            selected = JSON.stringify(this.getClass(id))\\n            class_name.forEach((name, i) => {\\n                let url = class_url[i],\\n                    now = JSON.stringify({ name: name, url: url })\\n                el.push({\\n                    title: selected == now ? '““””' + name.fontcolor(this.color).bold() : name,\\n                    url: selected == now ? 'hiker://empty' : $('#noLoading#').lazyRule((sign, id, now) => {\\n                        putVar(sign + id, now)\\n                        refreshPage(false)\\n                        return 'hiker://empty'\\n                    }, this.sign, id, now),\\n                    col_type: 'scroll_button'\\n                })\\n            })\\n            el.push({ col_type: this.boundary })\\n        })\\n    },\\n    init(classObject) {\\n        if (typeof classObject.class_name == 'string')\\n            classObject.class_name = classObject.class_name.split('&')\\n        if (typeof classObject.class_url == 'string')\\n            classObject.class_url = classObject.class_url.split('&').map((v) => v.trim())\\n        return classObject\\n    },\\n    push(classObject) {\\n        this.arr.push(this.init(classObject))\\n    },\\n    getClass(id) {\\n        let defaultClass = this.arr.find(item => item.id == id)\\n        defaultClass = JSON.stringify(defaultClass ? {\\n            name: defaultClass.class_name[0],\\n            url: defaultClass.class_url[0]\\n        } : { name:  'cannot find id: ' + id + ' in classTab: ' + this.sign, url: ''})\\n        return JSON.parse(getVar(this.sign + id, defaultClass))\\n    },\\n    setUrl(url) {\\n        return url.replace(/\\\\$\\\\{([^}]*)\\\\}/g, (_, id) => this.getClass(id).url)\\n    }\\n}\\n// 生成头部分类\\nconst fyAll = RULE.url.includes('fyAll')\\nlet tabHeader = []\\nif (RULE.class_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyclass',\\n    class_name: RULE.class_name,\\n    class_url: RULE.class_url\\n})\\nif (RULE.area_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyarea',\\n    class_name: RULE.area_name,\\n    class_url: RULE.area_url\\n})\\nif (RULE.year_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyyear',\\n    class_name: RULE.year_name,\\n    class_url: RULE.year_url\\n})\\nif (RULE.sort_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fysort',\\n    class_name: RULE.sort_name,\\n    class_url: RULE.sort_url\\n})\\ntabHeader = new ClassTab(tabHeader, { name: RULE.title, fold: readFile('tabFold'), })\\n\"},{\"col_type\":\"icon_2_round\",\"name\":\"设置\",\"path\":\"Config\",\"rule\":\"js:\\naddListener('onClose', 'clearMyVar(\\\"sortFlag\\\");refreshPage()')\\nsetPageTitle('⚙ 轻合集设置 ⚙')\\nconst QING_TITLE = getMyVar('myCollection')\\nlet data = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)(true),\\n    el = [{\\n        title: '<b> 清除缓存，立即更新 <small> （基于远程仓库，不要频繁点击）',\\n        url: $('基于远程仓库，不要频繁点击，增加仓库压力\\\\n若为本地文件，则不会进行缓存，本功能也无效').confirm(() => {\\n            deleteCache(getMyVar('remoteUrl'))\\n            back(false)\\n            return 'toast://已更新'\\n        }),\\n        img: 'hiker://images/icon4',\\n        col_type: 'avatar'\\n    }],\\n    updateInterval = readFile('updateInterval') || '1',\\n    newWindow = readFile('newWindow'),\\n    tabFold = readFile('tabFold'),\\n    disableCustom = readFile('disableCustom'),\\n    editMode = getMyVar('editMode', '启用/禁用')\\n\\nel.push({\\n    title: '  💡 更新频率: ' + (updateInterval == 0 ? '手动' : updateInterval + '天') + '  ',\\n    url: $(updateInterval, '输入更新间隔（天），为0则手动更新\\\\n本地文件链接无效').input(() => {\\n        saveFile('updateInterval', input)\\n        refreshPage()\\n        return 'hiker://empty'\\n    }),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  🖥 独立首页: ' + (newWindow ? '是' : '否') + '  ',\\n    url: $('#noLoading#').lazyRule((newWindow) => {\\n        saveFile('newWindow', newWindow ? '' : '1')\\n        refreshPage()\\n        return 'hiker://empty'\\n    }, newWindow),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  💠 分类折叠: ' + (tabFold ? '是' : '否') + '  ',\\n    url: $('#noLoading#').lazyRule((tabFold) => {\\n        saveFile('tabFold', tabFold ? '' : '1')\\n        refreshPage()\\n        return 'hiker://empty'\\n    }, tabFold),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  💼 备份恢复  ',\\n    url: $(['备份', '恢复'], 1).select((QING_TITLE, updateInterval, newWindow, tabFold, disableCustom) => {\\n        let url = getMyVar('remoteUrl')\\n        if (!url.startsWith('hiker://') && !url.startsWith('file://'))\\n            url = 'hiker://files/libs/' + md5(url) + '.js'\\n        else if(url.startsWith('hiker://page/')) url = 'hiker://empty'\\n        if (input == '备份') return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径')\\n            .input((url, updateInterval, newWindow, tabFold, disableCustom) => {\\n                let rules = request(url),\\n                    customData = readFile('customData')\\n                writeFile(input, JSON.stringify({\\n                    updateInterval: updateInterval,\\n                    newWindow: newWindow,\\n                    tabFold: tabFold,\\n                    disableCustom: disableCustom,\\n                    customData: customData,\\n                    rules: rules\\n                }))\\n                return 'toast://已备份，注意若仓库为子页面则不备份'\\n            }, url, updateInterval, newWindow, tabFold, disableCustom)\\n        else return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径').input((url) => {\\n            let { updateInterval, newWindow, tabFold, disableCustom, customData, rules } = JSON.parse(request(input))\\n            saveFile('updateInterval', updateInterval)\\n            saveFile('newWindow', newWindow)\\n            saveFile('tabFold', tabFold)\\n            saveFile('disableCustom', disableCustom)\\n            saveFile('customData', customData)\\n            if(rules) writeFile(url, rules)\\n            refreshPage()\\n            return 'toast://已恢复，如果不想同步远程仓库，可以设置更新频率为手动'\\n        }, url)\\n    }, QING_TITLE, updateInterval, newWindow, tabFold, disableCustom),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '““””<font color=\\\"#666666\\\"><small>特别鸣谢，小程序提供者：\\\\n' +\\n        data.reduce((self, v) => v.author ? self.concat(v.author.split('&')) : self, [])\\n        .filter((v, i, arr) => v && arr.indexOf(v) == i).join('、'),\\n    url: 'hiker://empty',\\n    col_type: 'text_center_1'\\n})\\n\\nel.push({ col_type: 'line' }, {\\n    title: '““””' + '📝'.small() + '&nbsp 轻合集自定义 &nbsp'.bold().fontcolor('#757575') + (disableCustom ? '❌' : '⭕').small(),\\n    url: $([(disableCustom ? '启用' : '禁用') + '合集自定义', '清除自定义数据'], 1).select(() => {\\n        if (input == '清除自定义数据') {\\n            deleteFile('customData')\\n        } else if (input == '启用合集自定义') {\\n            saveFile('disableCustom', '')\\n        } else {\\n            saveFile('disableCustom', '1')\\n            input += '\\\\n小程序启用/禁用、重新排序等操作均不会体现在首页小程序列表中'\\n        }\\n        refreshPage(false)\\n        return 'toast://已' + input\\n    }),\\n    col_type: 'text_center_1',\\n    extra: { lineVisible: false }\\n});\\n['启用/禁用', '重新排序', '更改图标', '导入海阔'].forEach((v) => {\\n    el.push({\\n        title: v == editMode ? '““””' + v.bold().fontcolor('#12b668') : v,\\n        url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\n            putMyVar('editMode', v)\\n            refreshPage(false)\\n            return 'hiker://empty'\\n        }, v),\\n        col_type: 'scroll_button'\\n    })\\n})\\nJSON.parse(readFile('customData') || '[]').forEach((v, i) => {\\n    let d = { title: v.title, img: data[i].icon }\\n    switch (editMode) {\\n        case '启用/禁用':\\n            d.title = (v.visible ? '🟢  ' : '🔴  ') + d.title\\n            d.url = $('#noLoading#').lazyRule((i) => {\\n                let rules = JSON.parse(readFile('customData') || '[]')\\n                rules[i].visible = !rules[i].visible\\n                saveFile('customData', JSON.stringify(rules))\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, i)\\n            break\\n        case '重新排序':\\n            let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\n            d.title = (sortFlag == i ? '🔃  ' : '') + d.title\\n            if (sortFlag == -1)\\n                d.url = $('#noLoading#').lazyRule((i) => {\\n                    putMyVar('sortFlag', i.toString())\\n                    refreshPage(false)\\n                    return 'toast://选择要移动到的位置'\\n                }, i)\\n            else\\n                d.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\n                    let rules = JSON.parse(readFile('customData') || '[]')\\n                    rules.splice(newIndex, 0, rules.splice(oldIndex, 1)[0])\\n                    saveFile('customData', JSON.stringify(rules))\\n                    putMyVar('sortFlag', '-1')\\n                    refreshPage(false)\\n                    return 'hiker://empty'\\n                }, sortFlag, i)\\n            break\\n        case '更改图标':\\n            d.url = $(v.icon || '', '输入新图标地址或颜色代码：').input((i) => {\\n                let rules = JSON.parse(readFile('customData') || '[]')\\n                if (input)\\n                    rules[i].icon = input\\n                else\\n                    delete rules[i].icon\\n                saveFile('customData', JSON.stringify(rules))\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, i)\\n            break\\n        case '导入海阔':\\n            d.url = 'rule://' + base64Encode(JSON.stringify(data[i]))\\n            break\\n    }\\n    el.push(d)\\n})\\nsetResult(el)\\n\"},{\"col_type\":\"movie_3\",\"name\":\"页面载入\",\"path\":\"frameLoad\",\"rule\":\"js:\\nconst QING_TITLE = getMyVar('myCollection')\\nfunction runCode(rule) {\\n    try {\\n        let [input, code] = rule.split('.js:')\\n        return code ? eval(code) : rule\\n    } catch (e) { return rule }\\n}\\nlet myCollection_el = [],\\n    { RULE, HASH, isIndex, pageTitle } = MY_PARAMS\\n//log(\\\"start:\\\" + QING_TITLE)\\nlet dataRule = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)().find((v) => v.title == RULE.title)\\nlet getRule = $.toString((QING_TITLE, title) => {\\n    //log(\\\"getRule:\\\" + QING_TITLE + \\\"====\\\" + title)\\n    return $.require(\\\"hiker://page/dataLoad?rule=\\\" + QING_TITLE)().find((v) => v.title == title)\\n}, QING_TITLE, RULE.title)\\nRULE = isIndex ? dataRule : Object.assign(dataRule, RULE)\\n//log(dataRule.pageList)\\neval(JSON.parse(fetch('hiker://page/preFunc?rule=' + QING_TITLE)).rule)\\neval(JSON.parse(fetch('hiker://page/urlParse?rule=' + QING_TITLE)).rule)\\n\\nif (isIndex) {\\n    // 计数已打开小程序，防止独立页面时轻合集出发关闭导致页面规则缓存清理\\n    let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n    putMyVar('openedIndex', String(openedIndex + 1))\\n    addListener = function(param0, param1, param2) {\\n        param2 = CALLBACK_KEY;\\n        if (param0 == 'onClose') param1 += ';' + $.toString(() => {\\n            let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n            putMyVar('openedIndex', String(openedIndex - 1))\\n        })\\n        method_addListener.invoke(javaContext, param0, param1, param2)\\n    }\\n    addListener('onClose', '')\\n    if (MY_PAGE == 1) {\\n        // 加载ClassTab组件\\n        eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\n        tabHeader.load(myCollection_el)\\n        if (RULE.search_url) myCollection_el.push({\\n            title: \\\"搜索\\\",\\n            desc: \\\"搜你想要的...\\\",\\n            url: '\\\"hiker://search?s=\\\"+input',\\n            extra: {\\n                rules: $.toString((QING_TITLE, title) => {\\n                    let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\\n                    rules = [rules.find((v) => v.title == title)]\\n                    return JSON.stringify(rules)\\n                }, QING_TITLE, RULE.title),\\n                defaultValue: getMyVar('searchKey', ''),\\n                onChange: \\\"putMyVar('searchKey',input)\\\"\\n            },\\n            col_type: \\\"input\\\",\\n        })\\n    }\\n    // 处理MY_RULE\\n    MY_RULE.url = RULE.url\\n    MY_RULE.col_type = RULE.col_type\\n    MY_RULE.detail_col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.find_rule\\n    MY_RULE.detail_find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = JSON.parse(RULE.pages || '[]')\\n    MY_RULE.pages = JSON.stringify(MY_RULE.pageList)\\n    MY_RULE.params = {}\\n} else {\\n    MY_RULE.url = MY_PARAMS.url\\n    MY_RULE.col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = RULE.pageList || JSON.parse(RULE.pages || '[]')\\n    MY_RULE.pages = RULE.pages\\n    MY_RULE.params = RULE.params\\n}\\nMY_RULE.ua = RULE.ua\\nMY_RULE.title = RULE.title\\nMY_RULE.preRule = RULE.preRule\\nMY_RULE.last_chapter_rule = RULE.last_chapter_rule\\n\\nif (!isIndex) {\\n    if (pageTitle) setPageTitle(pageTitle)\\n    setLastChapterRule(MY_RULE.last_chapter_rule)\\n    MY_PARAMS = MY_RULE.params\\n}\\n// 预处理并初始化config\\nif (isIndex && MY_PAGE == 1) eval(MY_RULE.preRule)\\nlet _cfg = getMyVar('initConfig', '{}')\\nif (_cfg && _cfg.length > 0) {\\n    config = JSON.parse(_cfg)\\n}\\n\\nfunction genRule() {\\n    let _a = Object.assign({}, MY_RULE);\\n    delete _a[\\\"pageList\\\"]\\n    delete _a[\\\"pages\\\"]\\n    return _a\\n}\\n\\n// 正文解析\\nif (MY_RULE.find_rule.startsWith('js:')) {\\n    setResult = function(el, param1, param2, param3) {\\n        param1 = CALLBACK_KEY\\n        param2 = MY_RULE\\n        param3 = MY_TYPE\\n        if (Array.isArray(el.data)) el = el.data;\\n        Array.prototype.push.apply(myCollection_el, el.map((v) => {\\n            let MY__RULE = genRule()\\n            MY__RULE.params = v.extra || {}\\n            v.col_type = v.col_type || MY_RULE.col_type\\n\\n            if (!v.url || ['rule', 'pics', 'toast', 'input', 'copy', 'editFile', 'x5', 'x5WebView', 'x5Play', 'web', 'select', 'x5Rule', 'webRule', 'download', 'share'].find((vv) => v.url.startsWith(vv + '://')) || ['x5_webview_single', 'input'].find((vv) => v.col_type == vv)) {\\n                return v\\n            } else if (v.url.includes('@rule=')) {\\n                let [_, url, rule] = v.url.match(/^([\\\\s\\\\S]*?)@rule=([\\\\s\\\\S]*)$/)\\n                v.url = url\\n                MY__RULE.detail_find_rule = rule\\n                MY__RULE.detail_col_type = MY_RULE.col_type\\n            } else if (v.url.startsWith('hiker://page/')) {\\n                if (v.url.includes('rule=') || (v.extra || {}).rule)\\n                    return v\\n                let [_, path, flag, params] = v.url.match(/^hiker:\\\\/\\\\/page\\\\/(.+?)(#.*?)?(?:\\\\?(.*))?$/),\\n                    subPage = MY_RULE.pageList.find((v) => v.path == path),\\n                    subUrl = (params || '').split('&').find((v) => v.startsWith('url='))\\n                v.url = subUrl ? subUrl.slice(4).replace(/？？/g, '?').replace(/＆＆/g, '&') : (v.extra || {}).url || 'hiker://empty' + flag + '?' + (params || '')\\n                MY__RULE.detail_find_rule = subPage.rule\\n                MY__RULE.detail_col_type = subPage.col_type\\n                MY__RULE.params = v.extra || {}\\n            } else if (v.url.includes('@lazyRule=')) {\\n                let reIndex = v.url.indexOf('.js:')\\n                if (reIndex >= 0) v.url = v.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, ' + getRule + ');' + v.url.slice(reIndex + 4)\\n                return v\\n            } else if (isIndex) {\\n                if (!MY_RULE.detail_find_rule || /hiker:\\\\/\\\\/(?!empty.+$)/.test(v.url)) return v\\n            } else {\\n                return v\\n            }\\n            v.extra = {\\n                url: (function(url) {\\n                    url = url.split(';')\\n                    return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                })(v.url),\\n                RULE: MY__RULE,\\n                pageTitle: isIndex && v.title\\n            }\\n            v.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            return v\\n        }))\\n        method_setResult.invoke(javaContext, myCollection_el, param1, param2, param3)\\n    }\\n    setHomeResult = setResult\\n    setSearchResult = setResult\\n\\n    eval(MY_RULE.find_rule.slice(3))\\n} else {\\n    let [_, findRule, detailFindRule] = MY_RULE.find_rule.match(/^([\\\\s\\\\S]*?)(?:==>([\\\\s\\\\S]*))?$/)\\n    findRule = findRule.split(';')\\n    parseDomForArray(getResCode(), findRule.shift()).forEach((data) => {\\n        let [title, img, desc, url] = findRule.map((v, i) => {\\n                try {\\n                    if (v == '*') return ''\\n                    else v = (i == 1 || i == 3) ?\\n                        parseDom(data, v) :\\n                        parseDomForHtml(data, v)\\n                    if (i != 3) v = runCode(v)\\n                    return v\\n                } catch (e) { return '' }\\n            }),\\n            res = {\\n                title: title, url: url,\\n                desc: desc, img: img,\\n                col_type: MY_RULE.col_type\\n            }\\n        if (res.url) {\\n            if (res.url.includes('@lazyRule=')) {\\n                let reIndex = res.url.indexOf('.js:')\\n                if (reIndex >= 0) res.url = res.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, ' + getRule +  ');' + res.url.slice(reIndex + 4)\\n            } else if (detailFindRule) {\\n                let _a = genRule()\\n                _a.detail_find_rule = detailFindRule\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url.split(';')[2])\\n                    })(url),\\n                    RULE: _a,\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            } else if (MY_RULE.detail_find_rule) {\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                    })(url),\\n                    RULE: genRule(),\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            }\\n        }\\n        myCollection_el.push(res)\\n    })\\n    setResult(myCollection_el)\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"数据载入\",\"path\":\"dataLoad\",\"rule\":\"$.exports = function(showAll) {\\n    let url = getMyVar('remoteUrl'),\\n        data = []\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\n        // 如果为本地文件则不进行缓存\\n        try {\\n            let oriData = fetch(url)\\n            if (url.startsWith('hiker://page/'))\\n                oriData = JSON.parse(oriData).rule\\n            data = JSON.parse(oriData)\\n        } catch (e) {}\\n    } else {\\n        // 获取远程数据，检查间隔默认一天\\n        let interval = parseInt(readFile('updateInterval') || '1'),\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\n            remoteData = fetchCache(url, 24 * interval)\\n        try { remoteData = JSON.parse(remoteData) } catch(e) {}\\n        if(!Array.isArray(remoteData)) remoteData = []\\n        if (remoteData.length < 3) {\\n            log('未获取到数据')\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData)\\n            data = JSON.parse(oldData || '[]')\\n        } else {\\n            log('已获取到数据')\\n            data = remoteData\\n        }\\n    }\\n    data = data.filter((v) => { return v.title != getMyVar('myCollection') && !(v.author || '').includes('轻合集生成器') })\\n    if (readFile('disableCustom')) return data\\n    else { // 写入自定义数据\\n        let customData = JSON.parse(readFile('customData') || '[]'),\\n            rewriteData = []\\n        customData = customData.reduce((self, v) => {\\n            let index = data.findIndex((vv) => v.title == vv.title)\\n            if (index >= 0) {\\n                self.push(v)\\n                let rule = data.splice(index, 1)[0]\\n                if (showAll || v.visible)\\n                    rewriteData.push(Object.assign(rule, v))\\n            }\\n            return self\\n        }, [])\\n        data.forEach((v) => customData.push({ title: v.title, visible: true }))\\n        saveFile('customData', JSON.stringify(customData))\\n        return rewriteData.concat(data)\\n    }\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"函数重写\",\"path\":\"preFunc\",\"rule\":\"// 防止require多次运行\\nlet rCache = {}\\nrequire = function(param0, param1, param2, param3, param4) {\\n    if (!param0 || rCache[param0] != null) {\\n        return\\n    }\\n    rCache[param0] = 1\\n    param2 = param2 || 0\\n    param3 = MY_TICKET\\n    param4 = eval\\n    return method_require.invoke(javaContext, param0, param1, param2, param3, param4)\\n}\\nrequireCache = function(param0, param1, param2, param3, param4, param5) {\\n    if (!param0 || rCache[param0] != null) {\\n        return\\n    }\\n    rCache[param0] = 1\\n    param3 = param3 || 0\\n    param4 = MY_TICKET\\n    param5 = eval\\n    return method_requireCache.invoke(javaContext, param0, param1, param2, param3, param4, param5)\\n}\\nrc = requireCache\\n\\n// 最新章节规则注入预处理代码\\nsetLastChapterRule = function(param0) {\\n    if (!param0) return\\n    if (param0.startsWith(\\\"js:\\\") && MY_RULE.preRule) {\\n        param0 = 'js:\\\\ntry{eval(JSON.parse(fetch(\\\"hiker://page/preFunc?rule=' + QING_TITLE + '\\\")).rule);\\\\\\n            eval(base64Decode(\\\"' + base64Encode(MY_RULE.preRule) + '\\\"));\\\\\\n            let _cfg = getMyVar(\\\"initConfig\\\", \\\"{}\\\");\\\\\\n            if (_cfg && _cfg.length>0) {config = JSON.parse(_cfg)}}catch(e){log(e.message)}\\\\n;' +\\n            param0.slice(3)\\n    }\\n    method_setLastChapterRule.invoke(javaContext, param0);\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"链接处理\",\"path\":\"urlParse\",\"rule\":\"// 首页链接替换分类\\nfunction indexUrl(param) {\\n    function runCode(rule) {\\n        try {\\n            let [input, code] = rule.split('.js:')\\n            return code ? eval(code) : rule\\n        } catch (e) { return rule }\\n    }\\n    let { RULE, pageNum, QING_TITLE } = JSON.parse(param.split('###')[1])\\n    RULE = JSON.parse(base64Decode(RULE))\\n    pageNum = parseInt(pageNum)\\n    let url = RULE.url,\\n        tabHeader = []\\n\\n    eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\n    url = tabHeader.setUrl(fyAll ? url.replace(/fyAll/g, '$${fyAll}') : url.replace(/fy(class|area|year|sort)/g, '$${fy$1}'))\\n    url = url.replace(/fypage(?:@(-?\\\\d+)@)?(?:\\\\*(\\\\d+)@)?/g, (_, start, space) => parseInt(start || 0) + 1 + (pageNum - 1) * parseInt(space || 1))\\n    url = /^([\\\\s\\\\S]*?)(?:\\\\[firstPage=([\\\\s\\\\S]*?)\\\\])?(?:(\\\\.js:[\\\\s\\\\S]*?))?$/.exec(url)\\n    if (pageNum == 1 && url[2]) url[1] = url[2]\\n    if (url[3] && !url[1].includes('.js:')) url[1] += url[3]\\n    return runCode(url[1])\\n}\\n// 链接参数处理\\nfunction paramHandle(urlParam, ua, urlTmp) {\\n    let charset, UserAgent\\n    try { // 链接的编码和ua应该是首先继承首页链接\\n        [, , charset, UserAgent] = urlTmp.split(';')\\n        UserAgent = UserAgent.match(/^{(.*)}$/)[1].split('&&').find((v) => v.startsWith('User-Agent@'))\\n    } catch (e) {}\\n    urlParam[0] = urlParam[0] || 'GET'\\n    urlParam[1] = urlParam[1] || charset || 'UTF-8'\\n    try {\\n        urlParam[2] = urlParam[2].match(/^{(.*)}$/)[1].split('&&')\\n    } catch (e) { urlParam[2] = [] }\\n    // 添加全局UA\\n    if (!urlParam[2].some((v) => v.startsWith('User-Agent@'))) {\\n        if (UserAgent) urlParam[2].push(UserAgent)\\n        else if (ua == 'pc')\\n            urlParam[2].push('User-Agent@' + PC_UA.replace(/;/g, '；；').replace(/\\\\?/, '？？'))\\n        else if (ua == 'mobile')\\n            urlParam[2].push('User-Agent@' + MOBILE_UA.replace(/;/g, '；；').replace(/\\\\?/, '？？'))\\n    }\\n    urlParam[2] = '{' + urlParam[2].join('&&') + '}'\\n    return urlParam.join(';')\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"规则列表\",\"path\":\"data\",\"rule\":\"[{\\\"last_chapter_rule\\\":\\\"\\\",\\\"title\\\":\\\"ZF仓库\\\",\\\"author\\\":\\\"\\\",\\\"version\\\":0,\\\"type\\\":\\\"video\\\",\\\"url\\\":\\\"https://zlove.neocities.org/zf/zf0fyclass.html\\\",\\\"col_type\\\":\\\"pic_2\\\",\\\"class_name\\\":\\\"规则仓库&电视直播&分类3\\\",\\\"class_url\\\":\\\"1&2&3\\\",\\\"area_name\\\":\\\"\\\",\\\"area_url\\\":\\\"\\\",\\\"sort_name\\\":\\\"\\\",\\\"year_name\\\":\\\"\\\",\\\"sort_url\\\":\\\"\\\",\\\"year_url\\\":\\\"\\\",\\\"find_rule\\\":\\\"body&&.list&&a;a&&Text;a&&pic;a&&title;a&&href\\\",\\\"searchFind\\\":\\\"\\\",\\\"search_url\\\":\\\"\\\",\\\"group\\\":\\\"ZF_fly\\\",\\\"detail_col_type\\\":\\\"text_2\\\",\\\"detail_find_rule\\\":\\\"body&&.list&&a;a&&Text;a&&pic;a&&title;a&&href\\\",\\\"sdetail_col_type\\\":\\\"text_3\\\",\\\"sdetail_find_rule\\\":\\\"\\\",\\\"ua\\\":\\\"mobile\\\",\\\"preRule\\\":\\\"\\\",\\\"pages\\\":\\\"[]\\\",\\\"proxy\\\":\\\"\\\",\\\"icon\\\":\\\"#ff6354ef\\\"},{\\\"last_chapter_rule\\\":\\\"\\\",\\\"title\\\":\\\"聚直播\\\",\\\"author\\\":\\\"ZF\\\",\\\"version\\\":10,\\\"type\\\":\\\"live\\\",\\\"url\\\":\\\"hiker://empty\\\",\\\"col_type\\\":\\\"icon_2_round\\\",\\\"class_name\\\":\\\"\\\",\\\"class_url\\\":\\\"\\\",\\\"area_name\\\":\\\"\\\",\\\"area_url\\\":\\\"\\\",\\\"sort_name\\\":\\\"\\\",\\\"year_name\\\":\\\"\\\",\\\"sort_url\\\":\\\"\\\",\\\"year_url\\\":\\\"\\\",\\\"find_rule\\\":\\\"js:\\\\neval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule); //getConfig\\\\n\\\\nlet data = [],\\\\n    config = getConfig();\\\\nconfig.data = config.data.filter(v => !v.inVisible);\\\\n\\\\nif (config.data.length <= 0) {\\\\n    data = $.require('hiker://page/renderSetting').renderSetting();\\\\n} else {\\\\n    let select = getItem(\\\\\\\"live-select\\\\\\\", config.data[0].name),\\\\n        has = config.data.map(i => i.name).includes(select);\\\\n    if (!has) {\\\\n        select = config.data[0].name;\\\\n    }\\\\n\\\\n    data.push({\\\\n        title: '聚直播'.bold() + ' &nbsp &nbsp ' + '⚙ 聚直播设置 ⚙'.small(),\\\\n        col_type: \\\\\\\"avatar\\\\\\\",\\\\n        pic_url: MY_RULE.icon,\\\\n        url: $(\\\\\\\"hiker://empty#noLoading#\\\\\\\").rule(() => {\\\\n            addListener('onClose', 'refreshPage()')\\\\n            setResult($.require('hiker://page/renderSetting').renderSetting())\\\\n        })\\\\n    })\\\\n\\\\n    data.push({\\\\n        title: '搜索',\\\\n        desc: '请输入搜索关键词',\\\\n        extra: {\\\\n            defaultValue: getVar('search_key', ''),\\\\n            onChange: 'putVar(\\\\\\\"search_key\\\\\\\",input)'\\\\n        },\\\\n        col_type: 'input',\\\\n        url: $.toString(() => {\\\\n            return 'hiker://search?rule=' + getMyVar('title') + '&s=' + getVar('search_key', '')\\\\n        })\\\\n    })\\\\n\\\\n\\\\n\\\\n    for (source of config.data) {\\\\n        data.push({\\\\n            title: source.name == select ? \\\\\\\"““””<span style='color: #19B89D'>\\\\\\\" + select + \\\\\\\"</span>\\\\\\\" : source.name,\\\\n            col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n            url: $('#noLoading#').lazyRule((a) => {\\\\n                setItem(\\\\\\\"live-select\\\\\\\", a);\\\\n                setItem('selectGroup', '');\\\\n                refreshPage();\\\\n                return \\\\\\\"hiker://empty\\\\\\\"\\\\n            }, source.name)\\\\n        })\\\\n    }\\\\n\\\\n    data.push({\\\\n        col_type: 'blank_block'\\\\n    })\\\\n    \\\\n    if (typeof(setPreResult) != \\\\\\\"undefined\\\\\\\") {\\\\n        data.push({\\\\n            pic_url: \\\\\\\"hiker://files/zf/cy/放映厅.png\\\\\\\",\\\\n            col_type: \\\\\\\"pic_1_center\\\\\\\",\\\\n            extra: {\\\\n                cls: \\\\\\\"loading_gif\\\\\\\"\\\\n            }\\\\n       })\\\\n       setPreResult(data);\\\\n       data = [];\\\\n    }\\\\n\\\\n    for (source of config.data) {\\\\n        if (source.name == select) {\\\\n            try {\\\\n                let items = $.require('hiker://page/renderData').renderLiveData(source.url,source.ua);\\\\n                let groups = Object.keys(items);\\\\n                //groups.push(groups.splice(groups.indexOf(0), 1)[0]);\\\\n                let selectGroup = getItem('selectGroup', groups[0]);\\\\n                if (selectGroup == \\\\\\\"\\\\\\\" || !groups.includes(selectGroup)) selectGroup = groups[0];\\\\n                groups.forEach((group) => {\\\\n                    if (group) {\\\\n                        data.push({\\\\n                            title: group == selectGroup ? \\\\\\\"““””<span style='color: #19B89D'>\\\\\\\" + group + \\\\\\\"</span>\\\\\\\" : group,\\\\n                            url: $('#noLoading#').lazyRule((group) => {\\\\n                                setItem('selectGroup', group);\\\\n                                refreshPage();\\\\n                                return 'hiker://empty'\\\\n                            }, group),\\\\n                            col_type: 'scroll_button',\\\\n                            extra: {\\\\n                                lineVisible: false\\\\n                            }\\\\n                        })\\\\n                    }\\\\n                })\\\\n                \\\\n                for (let title in items[selectGroup]) {\\\\n                    data.push({\\\\n                        title: title,\\\\n                        url: $().lazyRule((sourceurl,selectGroup,title) => {\\\\n                            let items = $.require('hiker://page/renderData').renderLiveData(sourceurl);\\\\n                            let surls = items[selectGroup][title].url;\\\\n                            let sheaders = items[selectGroup][title].headers;\\\\n                            for (let groupi in items){\\\\n                                let group = items[groupi];\\\\n                                if(!group) continue;\\\\n                                for (let ititle in group){\\\\n                                    if(ititle == title && !!group[ititle]){\\\\n                                        let urls = group[ititle].url;\\\\n                                        let headers = group[ititle].headers;\\\\n                                       surls = surls.concat(urls);\\\\n                                       sheaders = sheaders.concat(headers);\\\\n                                    }\\\\n                                }\\\\n                            }\\\\n                            surls = Array.from(new Set(surls));\\\\n                            sheaders = Array.from(new Set(sheaders));\\\\n                            return JSON.stringify({\\\\n                                urls: surls,\\\\n                                headers: sheaders\\\\n                            })\\\\n                        },source.url,selectGroup,title),\\\\n                        //col_type: 'text_3',\\\\n                        img: \\\\\\\"hiker://files/zf/cy/放映厅.png\\\\\\\"\\\\n                    })\\\\n                }\\\\n            } catch (e) {\\\\n                data.push({\\\\n                    title: \\\\\\\"数据加载失败\\\\\\\\n\\\\\\\" + JSON.stringify(e),\\\\n                    col_type: \\\\\\\"long_text\\\\\\\"\\\\n                })\\\\n            }\\\\n            break;\\\\n        }\\\\n    }\\\\n    deleteItemByCls(\\\\\\\"loading_gif\\\\\\\");\\\\n}\\\\nsetResult(data);\\\",\\\"searchFind\\\":\\\"js:\\\\neval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\nlet config = getConfig();\\\\nlet rules = config.data.map((source) => {\\\\n    return {\\\\n        title: source.name,\\\\n        search_url: 'hiker://empty?key=**',\\\\n        searchFind: 'js:' + $.toString((url, rule_title) => {\\\\n            let d = [],\\\\n                key = getParam('key');\\\\n            let items = $.require('hiker://page/renderData?rule=' + rule_title).renderLiveData(url);\\\\n            for (let group in items) {\\\\n                for (let title in items[group]) {\\\\n                    if (title.indexOf(key) >= 0 || title.toLowerCase().indexOf(key) >= 0) {\\\\n                        d.push({\\\\n                            title: title,\\\\n                            url: JSON.stringify({\\\\n                                urls: items[group][title].url,\\\\n                                headers: items[group][title].headers\\\\n                            })\\\\n                        })\\\\n                    }\\\\n                }\\\\n            }\\\\n            setResult(d);\\\\n        }, source.url, getMyVar('title'))\\\\n    };\\\\n})\\\\nsetResult([{\\\\n    title: \\\\\\\"点我开始聚搜\\\\\\\",\\\\n    url: \\\\\\\"hiker://search?s=\\\\\\\" + getParam(\\\\\\\"key\\\\\\\"),\\\\n    extra: {\\\\n        rules: $.toString((rules) => {\\\\n            return JSON.stringify(rules)\\\\n        }, rules)\\\\n    }\\\\n}])\\\",\\\"search_url\\\":\\\"hiker://empty?key=**\\\",\\\"group\\\":\\\"ZF_fly\\\",\\\"detail_col_type\\\":\\\"movie_1\\\",\\\"detail_find_rule\\\":\\\"\\\",\\\"sdetail_col_type\\\":\\\"movie_1\\\",\\\"sdetail_find_rule\\\":\\\"\\\",\\\"ua\\\":\\\"mobile\\\",\\\"preRule\\\":\\\"putMyVar('title',MY_RULE.title);\\\",\\\"pages\\\":\\\"[{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"加载数据\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"config\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"function getConfig() {\\\\\\\\n    try {\\\\\\\\n        let config = fetch(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\");\\\\\\\\n        if (!config || config == \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n            return {\\\\\\\\n                data: [],\\\\\\\\n                version: 0\\\\\\\\n            }\\\\\\\\n        } else {\\\\\\\\n            return JSON.parse(config)\\\\\\\\n        }\\\\\\\\n    } catch (e) {\\\\\\\\n        try {\\\\\\\\n            toast(\\\\\\\\\\\\\\\"配置文件格式有误\\\\\\\\\\\\\\\")\\\\\\\\n        } catch (e) {}\\\\\\\\n        return {\\\\\\\\n            data: [],\\\\\\\\n            version: 0\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\"},{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"批量导入\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"batchIm\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"function batchImport(input, rule) {\\\\\\\\n    input = input.trim();\\\\\\\\n    if (input.length < 3 || input[0] != \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\") {\\\\\\\\n        return \\\\\\\\\\\\\\\"toast://请输入正确的格式\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n    let im = JSON.parse(input);\\\\\\\\n    if (im.data == null || im.data.length < 1) {\\\\\\\\n        return \\\\\\\\\\\\\\\"toast://请输入正确的格式\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n    eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config?rule=\\\\\\\\\\\\\\\" + rule)).rule);\\\\\\\\n    let config = getConfig();\\\\\\\\n    let count = 0;\\\\\\\\n    let all = config.data.map(it => it.url + \\\\\\\\\\\\\\\"&&&\\\\\\\\\\\\\\\").join();\\\\\\\\n    for (let i of im.data) {\\\\\\\\n        if (all.indexOf(i.url + \\\\\\\\\\\\\\\"&&&\\\\\\\\\\\\\\\") >= 0) {\\\\\\\\n            //重复的不要\\\\\\\\n            continue;\\\\\\\\n        }\\\\\\\\n        count++;\\\\\\\\n        config.data.push(i)\\\\\\\\n    }\\\\\\\\n    writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n    refreshPage();\\\\\\\\n    return \\\\\\\\\\\\\\\"toast://已导入\\\\\\\\\\\\\\\" + count + \\\\\\\\\\\\\\\"条订阅源\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\"},{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"直播数据\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"renderData\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"function renderLiveData(url,ua) {\\\\\\\\n    let m3u = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\\\\\\\n        m3u = fetch(url);\\\\\\\\n    } else {\\\\\\\\n        let interval = Number(getItem('interval', '24')),\\\\\\\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\\\\\\\n            remoteData = '';\\\\\\\\n        try {\\\\\\\\n            remoteData = fetchCache(url, interval, {\\\\\\\\n                headers:{\\\\\\\\n                    'User-Agent' : ua || MOBILE_UA\\\\\\\\n                },\\\\\\\\n                timeout: 50000\\\\\\\\n            });\\\\\\\\n        } catch (e) {}\\\\\\\\n        if (!remoteData.includes('http') || remoteData.includes('<body>')) { \\\\\\\\n            log('更新失败');\\\\\\\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData);\\\\\\\\n            m3u = oldData;\\\\\\\\n        } else {\\\\\\\\n            m3u = remoteData;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    let mode =  m3u.indexOf('#EXTM3U') == 0 , re;\\\\\\\\n    if(mode){\\\\\\\\n        re = /(.*),(.*)\\\\\\\\\\\\\\\\s*?((?:http|rtmp)[^#\\\\\\\\\\\\\\\\s]*)/g;\\\\\\\\n    }else{\\\\\\\\n        re = /()(?:\\\\\\\\\\\\\\\\B\\\\\\\\\\\\\\\\$c_start|\\\\\\\\\\\\\\\\B#{1,2})?(.*?),?(##|头#|\\\\\\\\\\\\\\\\$c_end|,?#genre#|(?:http|rtmp)[^\\\\\\\\\\\\\\\\s]*)/g;\\\\\\\\n    }\\\\\\\\n        \\\\\\\\n    let items = {},\\\\\\\\n        group = '未分组';\\\\\\\\n    for (let i = re.exec(m3u); i != null; i = re.exec(m3u)) {\\\\\\\\n        if (mode) {\\\\\\\\n            group = (i[1].match(/group-title=\\\\\\\\\\\\\\\"(.*?)\\\\\\\\\\\\\\\"/) || [null, group])[1];\\\\\\\\n        } else if (['#genre#','##','头#','$c_end'].includes(i[3])) {\\\\\\\\n            group = i[2];\\\\\\\\n            continue;\\\\\\\\n        }\\\\\\\\n        let title = i[2],\\\\\\\\n            url = i[3].includes('#') ? i[3].split('#') : [i[3]],\\\\\\\\n            headers = [];\\\\\\\\n        if(!url[url.length-1]) url.pop();\\\\\\\\n        url.forEach((v,index,array)=>{\\\\\\\\n            if(/;\\\\\\\\\\\\\\\\{(.*)\\\\\\\\\\\\\\\\}/.test(v)){\\\\\\\\n                let obj = {},\\\\\\\\n                     con = v.match(/;\\\\\\\\\\\\\\\\{(.*)\\\\\\\\\\\\\\\\}/)[1],\\\\\\\\n                     arr = con.split('&&');\\\\\\\\n                arr.forEach((i)=>{\\\\\\\\n                    let [key,value] = i.split('@');\\\\\\\\n                    obj[key] = value.replace(/;/g,'；；');\\\\\\\\n                })\\\\\\\\n                array[index] = v.match(/^([^;]*);\\\\\\\\\\\\\\\\{/)[1]\\\\\\\\n                headers.push(obj);\\\\\\\\n            }else{\\\\\\\\n                headers.push({'User-Agent' : MOBILE_UA.replace(/;/g,'；；')});\\\\\\\\n            }\\\\\\\\n            array[index] = array[index].replace(/;/g,'；；')+'#isVideo=true#';\\\\\\\\n        });\\\\\\\\n        if (items[group]) {\\\\\\\\n            if (items[group][title]) {\\\\\\\\n                items[group][title].url = items[group][title].url.concat(url);\\\\\\\\n                items[group][title].headers = items[group][title].headers.concat(headers);\\\\\\\\n            } else {\\\\\\\\n                items[group][title] = {url:url,headers:headers};\\\\\\\\n            }\\\\\\\\n        } else {\\\\\\\\n            items[group] = {};\\\\\\\\n            items[group][title] = {url:url,headers:headers};\\\\\\\\n        };\\\\\\\\n    }\\\\\\\\n    return items;\\\\\\\\n}\\\\\\\\n\\\\\\\\n$.exports = {\\\\\\\\n    renderLiveData: renderLiveData\\\\\\\\n}\\\\\\\\n\\\\\\\"},{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"设置页\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"renderSetting\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"function renderSetting() {\\\\\\\\n    function getColoredText(text) {\\\\\\\\n        return '““””<span style=\\\\\\\\\\\\\\\"color: #19B89D\\\\\\\\\\\\\\\">' + text + '</span>';\\\\\\\\n    }\\\\\\\\n    const d = [];\\\\\\\\n    let interval = getItem('interval', '24');\\\\\\\\n    d.push({\\\\\\\\n        title: interval == -1 ? '已禁止自动更新'.fontcolor(\\\\\\\\\\\\\\\"#19B89D\\\\\\\\\\\\\\\").bold() : ('更新间隔:' + interval + '小时').fontcolor(\\\\\\\\\\\\\\\"#19B89D\\\\\\\\\\\\\\\").bold(),\\\\\\\\n        url: $(interval, '输入n为正整数时，每隔n小时自动更新\\\\\\\\\\\\\\\\n为0时，每次打开都会更新\\\\\\\\\\\\\\\\n为-1时，禁止自动更新').input(() => {\\\\\\\\n            if (parseInt(input) >= -1) {\\\\\\\\n                setItem('interval', input);\\\\\\\\n            }\\\\\\\\n            refreshPage();\\\\\\\\n            return 'hiker://empty'\\\\\\\\n        }),\\\\\\\\n        pic_url: 'hiker://files/zf/cy/live.png',\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"avatar\\\\\\\\\\\\\\\"\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    d.push({\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"big_blank_block\\\\\\\\\\\\\\\"\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    d.push({\\\\\\\\n        title: getColoredText(\\\\\\\\\\\\\\\"新建订阅\\\\\\\\\\\\\\\"),\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"scroll_button\\\\\\\\\\\\\\\",\\\\\\\\n        desc: \\\\\\\\\\\\\\\"请输入直播源订阅地址\\\\\\\\\\\\\\\",\\\\\\\\n        url: $('', '请输入订阅地址\\\\\\\\\\\\\\\\n可以在地址后加ua\\\\\\\\\\\\\\\\n(使用$$$分割)').input((rule) => {\\\\\\\\n            if (input == \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n                return \\\\\\\\\\\\\\\"toast://不能为空\\\\\\\\\\\\\\\"\\\\\\\\n            } else if (input.indexOf(\\\\\\\\\\\\\\\"http\\\\\\\\\\\\\\\") != 0 && input.indexOf(\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\") != 0 && input.indexOf(\\\\\\\\\\\\\\\"hiker\\\\\\\\\\\\\\\") != 0) {\\\\\\\\n                return \\\\\\\\\\\\\\\"toast://链接格式有误\\\\\\\\\\\\\\\"\\\\\\\\n            } else {\\\\\\\\n                let [url,ua] = input.split('$$$');\\\\\\\\n                return $('', \\\\\\\\\\\\\\\"请输入订阅标题\\\\\\\\\\\\\\\").input((url, rule,ua) => {\\\\\\\\n                    eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config?rule=\\\\\\\\\\\\\\\" + rule)).rule);\\\\\\\\n                    let config = getConfig();\\\\\\\\n                    config.data.push({\\\\\\\\n                        name: input,\\\\\\\\n                        url: url,\\\\\\\\n                        ua: ua || ''\\\\\\\\n                    });\\\\\\\\n                    writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n                    refreshPage();\\\\\\\\n                    return \\\\\\\\\\\\\\\"toast://已保存\\\\\\\\\\\\\\\";\\\\\\\\n                }, url, rule,ua)\\\\\\\\n            }\\\\\\\\n        }, getMyVar('title'))\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    d.push({\\\\\\\\n        title: getColoredText(\\\\\\\\\\\\\\\"导入订阅\\\\\\\\\\\\\\\"),\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"scroll_button\\\\\\\\\\\\\\\",\\\\\\\\n        url: $('', '支持原始数据和云剪贴板分享链接').input((rule) => {\\\\\\\\n            eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/batchIm?rule=\\\\\\\\\\\\\\\" + rule)).rule);\\\\\\\\n            if (input.startsWith('聚直播分享##')) {\\\\\\\\n                input = parsePaste(input.split('##\\\\\\\\\\\\\\\\n')[1]);\\\\\\\\n            }\\\\\\\\n            return batchImport(input, rule);\\\\\\\\n        }, getMyVar('title'))\\\\\\\\n    });\\\\\\\\n    d.push({\\\\\\\\n        title: getColoredText(\\\\\\\\\\\\\\\"导入本地源\\\\\\\\\\\\\\\"),\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"scroll_button\\\\\\\\\\\\\\\",\\\\\\\\n        desc: \\\\\\\\\\\\\\\"请输入直播源名称\\\\\\\\\\\\\\\",\\\\\\\\n        url: $('', '请输入直播源名称').input((rule) => {\\\\\\\\n            if (input == \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n                return \\\\\\\\\\\\\\\"toast://不能为空\\\\\\\\\\\\\\\"\\\\\\\\n            } else {\\\\\\\\n                return \\\\\\\\\\\\\\\"fileSelect://\\\\\\\\\\\\\\\" + $.toString((name) => {\\\\\\\\n                    let s = input.split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\")\\\\\\\\n                    var url = \\\\\\\\\\\\\\\"hiker://files/cache/live/\\\\\\\\\\\\\\\" + name + \\\\\\\\\\\\\\\".m3u\\\\\\\\\\\\\\\"\\\\\\\\n                    var c = fetch(\\\\\\\\\\\\\\\"hiker://files/cache/\\\\\\\\\\\\\\\" + s[s.length - 1])\\\\\\\\n                    if (!c.includes('http')) {\\\\\\\\n                        return 'toast://非法文件'\\\\\\\\n                    }\\\\\\\\n                    writeFile(url, c)\\\\\\\\n                    eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config?rule=聚直播\\\\\\\\\\\\\\\")).rule);\\\\\\\\n                    let config = getConfig();\\\\\\\\n                    config.data.push({\\\\\\\\n                        name: name,\\\\\\\\n                        url: url\\\\\\\\n                    });\\\\\\\\n                    writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n                    refreshPage();\\\\\\\\n                    return 'toast://已保存'\\\\\\\\n                }, input)\\\\\\\\n            }\\\\\\\\n        })\\\\\\\\n    });\\\\\\\\n    d.push({\\\\\\\\n        title: getColoredText(\\\\\\\\\\\\\\\"分享订阅\\\\\\\\\\\\\\\"),\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"scroll_button\\\\\\\\\\\\\\\",\\\\\\\\n        url: $([\\\\\\\\\\\\\\\"原始数据\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"云剪贴板\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"云口令\\\\\\\\\\\\\\\"], 3).select(() => {\\\\\\\\n            return $('确定导出？\\\\\\\\\\\\\\\\n(禁用订阅不会导出)').confirm((type) => {\\\\\\\\n                eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config\\\\\\\\\\\\\\\")).rule);\\\\\\\\n                config = getConfig();\\\\\\\\n                config.data = config.data.filter(v => !v.inVisible);\\\\\\\\n                if (type == \\\\\\\\\\\\\\\"云剪贴板\\\\\\\\\\\\\\\") {\\\\\\\\n                    var data = '聚直播分享##\\\\\\\\\\\\\\\\n' + sharePaste(JSON.stringify(config));\\\\\\\\n                } else if (type == \\\\\\\\\\\\\\\"云口令\\\\\\\\\\\\\\\") {\\\\\\\\n                    var data = '聚直播分享,复制后打开软件即可导入\\\\\\\\\\\\\\\\n' + sharePaste(JSON.stringify(config)) + '@import=js:eval(JSON.parse(fetch(\\\\\\\\\\\\\\\"hiker://page/cloud?rule=聚直播\\\\\\\\\\\\\\\")).rule)';\\\\\\\\n                } else {\\\\\\\\n                    var data = JSON.stringify(config);\\\\\\\\n                }\\\\\\\\n                return \\\\\\\\\\\\\\\"copy://\\\\\\\\\\\\\\\" + data;\\\\\\\\n            }, input)\\\\\\\\n        })\\\\\\\\n    });\\\\\\\\n    d.push({\\\\\\\\n        title: getColoredText(\\\\\\\\\\\\\\\"编辑全部\\\\\\\\\\\\\\\"),\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"scroll_button\\\\\\\\\\\\\\\",\\\\\\\\n        url: \\\\\\\\\\\\\\\"editFile://hiker://files/rules/live/config.json\\\\\\\\\\\\\\\"\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    d.push({\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"blank_block\\\\\\\\\\\\\\\"\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config\\\\\\\\\\\\\\\")).rule);\\\\\\\\n    config = getConfig();\\\\\\\\n    let editMode = getMyVar('editMode', '启用禁用');\\\\\\\\n    ['启用禁用', '删除订阅', '重新排序', '编辑订阅', '清除缓存'].forEach((v) => {\\\\\\\\n        d.push({\\\\\\\\n            title: v == editMode ? '““””' + v.bold().fontcolor('#19B89D') : v,\\\\\\\\n            url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\\\\\\\n                putMyVar('editMode', v)\\\\\\\\n                refreshPage(false)\\\\\\\\n                return 'hiker://empty'\\\\\\\\n            }, v),\\\\\\\\n            col_type: 'scroll_button'\\\\\\\\n        })\\\\\\\\n    });\\\\\\\\n    config.data.forEach((v, i) => {\\\\\\\\n        let el = {\\\\\\\\n            title: v.name,\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"text_3\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        switch (editMode) {\\\\\\\\n            case '启用禁用':\\\\\\\\n                el.title = (v.inVisible ? '🔴 ' : '🟢 ') + el.title\\\\\\\\n                el.url = $('#noLoading#').lazyRule((i) => {\\\\\\\\n                    eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config\\\\\\\\\\\\\\\")).rule);\\\\\\\\n                    config = getConfig();\\\\\\\\n                    config.data[i].inVisible = !config.data[i].inVisible;\\\\\\\\n                    writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n                    refreshPage(false);\\\\\\\\n                    return 'hiker://empty'\\\\\\\\n                }, i)\\\\\\\\n                break\\\\\\\\n            case '删除订阅':\\\\\\\\n                el.url = \\\\\\\\\\\\\\\"confirm://确认删除“\\\\\\\\\\\\\\\" + v.name + \\\\\\\\\\\\\\\"”订阅？.js:\\\\\\\\\\\\\\\" + $.toString((i) => {\\\\\\\\n                    eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config\\\\\\\\\\\\\\\")).rule);\\\\\\\\n                    config = getConfig();\\\\\\\\n                    config.data.splice(i, 1);\\\\\\\\n                    writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n                    refreshPage(false);\\\\\\\\n                    return \\\\\\\\\\\\\\\"toast://已删除\\\\\\\\\\\\\\\";\\\\\\\\n                }, i)\\\\\\\\n                break\\\\\\\\n            case '重新排序':\\\\\\\\n                let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\\\\\\\n                el.title = (sortFlag == i ? '🔃  ' : '') + el.title\\\\\\\\n                if (sortFlag == -1)\\\\\\\\n                    el.url = $('#noLoading#').lazyRule((i) => {\\\\\\\\n                        putMyVar('sortFlag', i.toString())\\\\\\\\n                        refreshPage(false)\\\\\\\\n                        return 'toast://选择要移动到的位置'\\\\\\\\n                    }, i)\\\\\\\\n                else\\\\\\\\n                    el.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\\\\\\\n                        eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config\\\\\\\\\\\\\\\")).rule);\\\\\\\\n                        config = getConfig();\\\\\\\\n                        config.data.splice(newIndex, 0, config.data.splice(oldIndex, 1)[0])\\\\\\\\n                        writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n                        putMyVar('sortFlag', '-1')\\\\\\\\n                        refreshPage(false)\\\\\\\\n                        return 'hiker://empty'\\\\\\\\n                    }, sortFlag, i)\\\\\\\\n                break\\\\\\\\n            case '编辑订阅':\\\\\\\\n                let arr = ['编辑名称', '编辑地址', '编辑内容'];\\\\\\\\n                el.url = $(arr, 3).select((v, i) => {\\\\\\\\n                    if (input == '编辑名称') {\\\\\\\\n                        return $(v.name, '输入新名称').input((i) => {\\\\\\\\n                            eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config\\\\\\\\\\\\\\\")).rule);\\\\\\\\n                            config = getConfig();\\\\\\\\n                            if (input) {\\\\\\\\n                                config.data[i].name = input\\\\\\\\n                                writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n                                refreshPage(false)\\\\\\\\n                                return 'toast://修改成功'\\\\\\\\n                            } else {\\\\\\\\n                                return 'toast://不能为空'\\\\\\\\n                            }\\\\\\\\n                        }, i);\\\\\\\\n                    } else if (input == '编辑地址') {\\\\\\\\n                        return $(v.ua ? v.url + '$$$' + v.ua : v.url, '输入新地址').input((i) => {\\\\\\\\n                            eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/config\\\\\\\\\\\\\\\")).rule);\\\\\\\\n                            config = getConfig();\\\\\\\\n                            if (input == \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n                                return \\\\\\\\\\\\\\\"toast://不能为空\\\\\\\\\\\\\\\"\\\\\\\\n                            } else if (input.indexOf(\\\\\\\\\\\\\\\"http\\\\\\\\\\\\\\\") != 0 && input.indexOf(\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\") != 0 && input.indexOf(\\\\\\\\\\\\\\\"hiker\\\\\\\\\\\\\\\") != 0) {\\\\\\\\n                                return \\\\\\\\\\\\\\\"toast://链接格式有误\\\\\\\\\\\\\\\"\\\\\\\\n                            } else {\\\\\\\\n                                let [url,ua] = input.split('$$$');\\\\\\\\n                                config.data[i].url = url;\\\\\\\\n                                config.data[i].ua = ua;\\\\\\\\n                                writeFile(\\\\\\\\\\\\\\\"hiker://files/rules/live/config.json\\\\\\\\\\\\\\\", JSON.stringify(config));\\\\\\\\n                                refreshPage(false)\\\\\\\\n                                return 'toast://修改成功'\\\\\\\\n                            }\\\\\\\\n                        }, i);\\\\\\\\n                    } else if (input == '编辑内容') {\\\\\\\\n                        if (v.url.startsWith('file://') || v.url.startsWith('hiker://files')) {\\\\\\\\n                            return 'editFile://' + v.url;\\\\\\\\n                        }\\\\\\\\n                        return 'editFile://hiker://files/libs/' + md5(v.url) + '.js'\\\\\\\\n                    }\\\\\\\\n                }, v, i);\\\\\\\\n                break;\\\\\\\\n            case '清除缓存':\\\\\\\\n                el.url = $('确定清除“' + v.name + '”订阅缓存？\\\\\\\\\\\\\\\\n(可立即更新)').confirm((url) => {\\\\\\\\n                    deleteCache(url);\\\\\\\\n                    return 'toast://清除成功'\\\\\\\\n                }, v.url)\\\\\\\\n                break;\\\\\\\\n        }\\\\\\\\n        d.push(el)\\\\\\\\n    });\\\\\\\\n    return d;\\\\\\\\n}\\\\\\\\n\\\\\\\\n$.exports = {\\\\\\\\n    renderSetting: renderSetting\\\\\\\\n}\\\\\\\"},{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"云口令\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"cloud\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"eval(JSON.parse(request(\\\\\\\\\\\\\\\"hiker://page/batchIm?rule=聚直播\\\\\\\\\\\\\\\")).rule);\\\\\\\\nlet content = parsePaste(input);\\\\\\\\nbatchImport(content, \\\\\\\\\\\\\\\"聚直播\\\\\\\\\\\\\\\");\\\\\\\"}]\\\",\\\"proxy\\\":\\\"\\\",\\\"icon\\\":\\\"hiker://files/zf/cy/live.png\\\"},{\\\"firstHeader\\\":\\\"class\\\",\\\"last_chapter_rule\\\":\\\"\\\",\\\"title\\\":\\\"我的CCTV\\\",\\\"author\\\":\\\"ZF\\\",\\\"version\\\":0,\\\"type\\\":\\\"live\\\",\\\"url\\\":\\\"hiker://empty##\\\",\\\"col_type\\\":\\\"text_3\\\",\\\"class_name\\\":\\\"\\\",\\\"class_url\\\":\\\"\\\",\\\"area_name\\\":\\\"\\\",\\\"area_url\\\":\\\"\\\",\\\"sort_name\\\":\\\"\\\",\\\"year_name\\\":\\\"\\\",\\\"sort_url\\\":\\\"\\\",\\\"year_url\\\":\\\"\\\",\\\"find_rule\\\":\\\"js:\\\\nvar titles = [\\\\n'CCTV-1 综合@@http://dsj.jshfgy.cn:8880/mgtv/608807420.m3u8@@http://cdn.gcufbd.top/img/1.jpg',\\\\n'CCTV-2 财经@@http://dsj.jshfgy.cn:8880/mgtv/631780532.m3u8@@http://cdn.gcufbd.top/img/2.jpg',\\\\n'CCTV-3 综艺@@http://dsj.jshfgy.cn:8880/mgtv/624878271.m3u8@@http://cdn.gcufbd.top/img/3.jpg',\\\\n'CCTV-4 国际@@http://dsj.jshfgy.cn:8880/mgtv/631780421.m3u8@@http://cdn.gcufbd.top/img/4.jpg',\\\\n'CCTV-5 体育@@http://dsj.jshfgy.cn:8880/mgtv/641886683.m3u8@@http://cdn.gcufbd.top/img/5.jpg',\\\\n\\\\n'CCTV-5+ 体育赛事@@http://dsj.jshfgy.cn:8880/mgtv/641886773.m3u8@@http://cdn.gcufbd.top/img/6.jpg',\\\\n'CCTV-6 电影@@http://dsj.jshfgy.cn:8880/mgtv/624878396.m3u8@@http://cdn.gcufbd.top/img/6.jpg',\\\\n'CCTV-7 军事@@http://dsj.jshfgy.cn:8880/mgtv/673168121.m3u8@@http://cdn.gcufbd.top/img/7.jpg',\\\\n'CCTV-8 电视剧@@http://dsj.jshfgy.cn:8880/mgtv/624878356.m3u8@@http://cdn.gcufbd.top/img/8.jpg',\\\\n'CCTV-9 纪录@@http://dsj.jshfgy.cn:8880/mgtv/673168140.m3u8@@http://cdn.gcufbd.top/img/9.jpg',\\\\n'CCTV-10 科教@@http://dsj.jshfgy.cn:8880/mgtv/624878405.m3u8@@http://cdn.gcufbd.top/img/10.jpg',\\\\n'CCTV-11 戏曲@@http://dsj.jshfgy.cn:8880/mgtv/667987558.m3u8@@http://cdn.gcufbd.top/img/11.jpg',\\\\n'CCTV-12 社会与法@@http://dsj.jshfgy.cn:8880/mgtv/673168185.m3u8@@http://cdn.gcufbd.top/img/12.jpg',\\\\n'CCTV-13 新闻@@http://dsj.jshfgy.cn:8880/mgtv/608807423.m3u8@@http://cdn.gcufbd.top/img/13.jpg',\\\\n'CCTV-14 少儿@@http://dsj.jshfgy.cn:8880/mgtv/624878440.m3u8@@http://cdn.gcufbd.top/img/14.jpg',\\\\n'CCTV-15 音乐@@http://dsj.jshfgy.cn:8880/mgtv/673168223.m3u8@@http://cdn.gcufbd.top/img/15.jpg',\\\\n'CCTV-17 农业@@http://dsj.jshfgy.cn:8880/mgtv/673168256.m3u8@@http://cdn.gcufbd.top/img/17.jpg',\\\\n\\\\n\\\\n];\\\\n\\\\nvar t = titles;\\\\nvar res = {};\\\\nvar d = [];\\\\n\\\\n\\\\nfor (var i = 0; i < t.length && i < 24; i++) {\\\\n var k = t[i].split(/\\\\\\\\s*@@\\\\\\\\s*/);\\\\n var r = {};\\\\n r.desc = k[0];\\\\n r.title = k[0];\\\\n r.url = k[1];\\\\n r.pic_url = k[2];\\\\n r.col_type = 'movie_2';\\\\n d.push(r);\\\\n}\\\\n\\\\nfor (var i = 24; i < t.length; i++) {\\\\n var k = t[i].split(/\\\\\\\\s*@@\\\\\\\\s*/);\\\\n if (k.length < 2) continue;\\\\n var r = {};\\\\n r.title = k[0];\\\\n r.url = k[1];\\\\n r.col_type = 'text_3';\\\\n d.push(r);\\\\n}\\\\n\\\\nres.data = d;\\\\nsetHomeResult(res);\\\",\\\"searchFind\\\":\\\"\\\",\\\"search_url\\\":\\\"\\\",\\\"group\\\":\\\"ZF_fly\\\",\\\"detail_col_type\\\":\\\"movie_1\\\",\\\"detail_find_rule\\\":\\\"\\\",\\\"sdetail_col_type\\\":\\\"movie_1\\\",\\\"sdetail_find_rule\\\":\\\"\\\",\\\"ua\\\":\\\"auto\\\",\\\"preRule\\\":\\\"\\\",\\\"pages\\\":\\\"[]\\\",\\\"proxy\\\":\\\"\\\",\\\"icon\\\":\\\"\\\"},{\\\"last_chapter_rule\\\":\\\"\\\",\\\"title\\\":\\\"追忆影视APP\\\",\\\"author\\\":\\\"zhao\\\",\\\"version\\\":1,\\\"type\\\":\\\"video\\\",\\\"url\\\":\\\"hiker://empty##fypage\\\",\\\"col_type\\\":\\\"movie_3\\\",\\\"class_name\\\":\\\"\\\",\\\"class_url\\\":\\\"\\\",\\\"area_name\\\":\\\"\\\",\\\"area_url\\\":\\\"\\\",\\\"sort_name\\\":\\\"\\\",\\\"year_name\\\":\\\"\\\",\\\"sort_url\\\":\\\"\\\",\\\"year_url\\\":\\\"\\\",\\\"find_rule\\\":\\\"js:\\\\nvar {\\\\n    apiview,\\\\n    tuijian,\\\\n    fenlei1,\\\\n    paihang\\\\n} = $.require(\\\\\\\"hanshu\\\\\\\");\\\\nvar d = [];\\\\nvar page = MY_PAGE;\\\\nvar tindex = storage0.getMyVar(\\\\\\\"tindex\\\\\\\", 0);\\\\nvar titles = [\\\\\\\"首页\\\\\\\", \\\\\\\"分类\\\\\\\", \\\\\\\"排行\\\\\\\"];\\\\nvar imgs = [\\\\\\\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\\\\\\\", \\\\\\\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\\\\\\\", \\\\\\\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\\\\\\\"];\\\\ntitles = titles.map((title, index) => index == tindex ? apiview.color(\\\\\\\"#90EE90\\\\\\\" ,title) : title);\\\\nif (page == 1) {\\\\n    for (var i = 0; i < titles.length; i++) {\\\\n        d.push({\\\\n            title: titles[i],\\\\n            img: imgs[i],\\\\n            url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((i) => {\\\\n                storage0.putMyVar(\\\\\\\"tindex\\\\\\\", i);\\\\n                refreshPage();\\\\n                return \\\\\\\"hiker://empty\\\\\\\";\\\\n            }, i),\\\\n            col_type: \\\\\\\"icon_small_3\\\\\\\"\\\\n        })\\\\n    }\\\\n    d.push({\\\\n        img: \\\\\\\"https://icdn.binmt.cc/2504/680728df4f639.png\\\\\\\",\\\\n        url: \\\\\\\"hiker://empty\\\\\\\",\\\\n        col_type: \\\\\\\"pic_1_full\\\\\\\"\\\\n    })\\\\n}\\\\ntry{\\\\nswitch (parseInt(tindex)) {\\\\n    case 0:\\\\n        if (page == 1) {\\\\n            tuijian(d)\\\\n        }\\\\n        break;\\\\n    case 1:\\\\n        fenlei1(d)\\\\n        break;\\\\n    case 2:\\\\n        if (page == 1) {\\\\n            paihang(d)\\\\n        }\\\\n        break;\\\\n}\\\\n}catch(e){\\\\n    log(e.message)\\\\n}\\\\nsetResult(d)\\\",\\\"searchFind\\\":\\\"js:\\\\nvar {\\\\n    search\\\\n} = $.require(\\\\\\\"hanshu\\\\\\\");\\\\nvar d = []\\\\nvar word = MY_URL.split(\\\\\\\"##\\\\\\\")[1]\\\\nvar page = MY_URL.split(\\\\\\\"##\\\\\\\")[2]\\\\ntry{\\\\n    search(word, page)\\\\n}catch(e){\\\\n    log(e.message)\\\\n}\\\\nsetResult(d)\\\",\\\"search_url\\\":\\\"hiker://empty##**##fypage\\\",\\\"group\\\":\\\"ZF_fly\\\",\\\"detail_col_type\\\":\\\"movie_1\\\",\\\"detail_find_rule\\\":\\\"\\\",\\\"sdetail_col_type\\\":\\\"movie_1\\\",\\\"sdetail_find_rule\\\":\\\"\\\",\\\"ua\\\":\\\"mobile\\\",\\\"preRule\\\":\\\"$.require(\\\\\\\"hanshu\\\\\\\").configs()\\\",\\\"pages\\\":\\\"[{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"函数\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"hanshu\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"const host1 = getMyVar(\\\\\\\\\\\\\\\"host\\\\\\\\\\\\\\\")\\\\\\\\nconst key1 = getMyVar(\\\\\\\\\\\\\\\"key\\\\\\\\\\\\\\\")\\\\\\\\nconst header1 = {\\\\\\\\n    \\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2.0.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"ua\\\\\\\\\\\\\\\": md5(getMyVar(\\\\\\\\\\\\\\\"ua\\\\\\\\\\\\\\\"))+\\\\\\\\\\\\\\\"0000000000000000\\\\\\\\\\\\\\\"+md5(\\\\\\\\\\\\\\\"a.\\\\\\\\\\\\\\\"+String(Math.floor(new Date().getTime())))\\\\\\\\n}\\\\\\\\nconst tubiao1 = \\\\\\\\\\\\\\\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nfunction aesecbde(word, keyy) {\\\\\\\\n    const CryptoUtil = $.require(\\\\\\\\\\\\\\\"hiker://assets/crypto-java.js\\\\\\\\\\\\\\\");\\\\\\\\n    let key = CryptoUtil.Data.parseUTF8(keyy);\\\\\\\\n    let decrypted = CryptoUtil.AES.decrypt(word, key, {\\\\\\\\n        mode: \\\\\\\\\\\\\\\"AES/ECB/PKCS7Padding\\\\\\\\\\\\\\\"\\\\\\\\n    });\\\\\\\\n    return decrypted.toString()\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction aesecben(word, keyy) {\\\\\\\\n    const CryptoUtil = $.require(\\\\\\\\\\\\\\\"hiker://assets/crypto-java.js\\\\\\\\\\\\\\\");\\\\\\\\n    let key = CryptoUtil.Data.parseUTF8(keyy);\\\\\\\\n    let encrypted = CryptoUtil.AES.encrypt(word, key, {\\\\\\\\n        mode: \\\\\\\\\\\\\\\"AES/ECB/PKCS7Padding\\\\\\\\\\\\\\\"\\\\\\\\n    });\\\\\\\\n    return encrypted.toString()\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction req1(url1, body1) {\\\\\\\\n    var html1 = request(host1+url1, {\\\\\\\\n        headers: header1,\\\\\\\\n        body: body1,\\\\\\\\n        method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\"\\\\\\\\n    }); //log(html1)\\\\\\\\n    return JSON.parse(aesecbde(html1, key1))\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction req2(url1, keyy) {\\\\\\\\n    var html1 = request(url1, {\\\\\\\\n        headers: header1,\\\\\\\\n        method: \\\\\\\\\\\\\\\"GET\\\\\\\\\\\\\\\"\\\\\\\\n    }); //log(html1)\\\\\\\\n    return JSON.parse(aesecbde(html1, keyy))\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction configs() {\\\\\\\\n    if(getMyVar('host','0') == '0'){\\\\\\\\n        try{\\\\\\\\n            var host = req2(\\\\\\\\\\\\\\\"https://vip.123pan.cn/1848451100/zl/zy.txt\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"rectangleadsadxa\\\\\\\\\\\\\\\")[0]; log(host)\\\\\\\\n            var html1 = request(host+'/shark/api.php?action=configs', {\\\\\\\\n                headers: header1,\\\\\\\\n                body: 'username=&token=',\\\\\\\\n                method: 'POST'\\\\\\\\n            }); //log(html1)\\\\\\\\n            var data = JSON.parse(aesecbde(html1.replace(/<.*>/g, '').replace(/\\\\\\\\\\\\\\\\n/g, ''), \\\\\\\\\\\\\\\"aassddwwxxllsx1x\\\\\\\\\\\\\\\")); //log(data)\\\\\\\\n            \\\\\\\\n            putMyVar('host',host)\\\\\\\\n            putMyVar('dmUrl',data.config.dmUrl)\\\\\\\\n            putMyVar('hulue',data.config.hulue.split('&')[0])\\\\\\\\n            putMyVar(\\\\\\\\\\\\\\\"ua\\\\\\\\\\\\\\\",data.config.ua)\\\\\\\\n            putMyVar(\\\\\\\\\\\\\\\"key\\\\\\\\\\\\\\\",(md5(aesecbde(data.config.hult, data.config.hulue.split('&')[0])).substring(0,16)))\\\\\\\\n            storage0.putMyVar('playerinfos',data.playerinfos)\\\\\\\\n            \\\\\\\\n        }catch(e){\\\\\\\\n            log(e.message)\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction List1(d, list) {\\\\\\\\n    list.forEach(item => {\\\\\\\\n        d.push({\\\\\\\\n            title: item.vod_name,\\\\\\\\n            desc: item.vod_remarks,\\\\\\\\n            pic_url: item.vod_pic,\\\\\\\\n            url: rule1(item.vod_id),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"movie_3\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                pageTitle: item.vod_name\\\\\\\\n            }\\\\\\\\n        })\\\\\\\\n    })\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction fenlei(d, data, url) {\\\\\\\\n    for(let a of data){\\\\\\\\n        d.push({\\\\\\\\n            title: a.split(\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\")[1] == getMyVar(url,\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\") ? apiview.colorr(\\\\\\\\\\\\\\\"#90EE90\\\\\\\\\\\\\\\", a.split(\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\")[0]) : a.split(\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\")[0],\\\\\\\\n            url: $(\\\\\\\\\\\\\\\"#noLoading#\\\\\\\\\\\\\\\").lazyRule((a, url)=>{\\\\\\\\n                putMyVar(url,a.split(\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\")[1]);\\\\\\\\n                refreshPage();\\\\\\\\n                return \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\"\\\\\\\\n            }, a, url),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"scroll_button\\\\\\\\\\\\\\\"\\\\\\\\n        })\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction tuijian(d) {\\\\\\\\n    var list1 = req2(host1+\\\\\\\\\\\\\\\"/api.php/v1.home/data?type_id=20\\\\\\\\\\\\\\\", key1).data.verLandList\\\\\\\\n    list1.forEach(item1 => {\\\\\\\\n        d.push({\\\\\\\\n            title: item1.type_name,\\\\\\\\n            img: tubiao1,\\\\\\\\n            url: \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\",\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"avatar\\\\\\\\\\\\\\\"\\\\\\\\n        })\\\\\\\\n        item1.vertical_lands.forEach(item2 => {\\\\\\\\n            d.push({\\\\\\\\n                title: item2.vod_name,\\\\\\\\n                desc : item2.vod_remarks,\\\\\\\\n                pic_url: item2.vod_pic,\\\\\\\\n                url: rule1(item2.vod_id),\\\\\\\\n                col_type: \\\\\\\\\\\\\\\"movie_2\\\\\\\\\\\\\\\"\\\\\\\\n            })\\\\\\\\n        })\\\\\\\\n    })\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction fenlei1(d) {\\\\\\\\n    if (page == 1) {\\\\\\\\n        fenlei(d, [\\\\\\\\\\\\\\\"电视剧#1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"电影#2\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"动漫#3\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"综艺#4\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"短剧#5\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"直播#17\\\\\\\\\\\\\\\"], \\\\\\\\\\\\\\\"type_id\\\\\\\\\\\\\\\")\\\\\\\\n    }\\\\\\\\n    var list1 = req1(\\\\\\\\\\\\\\\"/api.php/v1.classify/content?page=\\\\\\\\\\\\\\\"+page, JSON.stringify({\\\\\\\\\\\\\\\"area\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"全部地区\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"lang\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"全部语言\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"rank\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"最新\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"全部类型\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type_id\\\\\\\\\\\\\\\":getMyVar(\\\\\\\\\\\\\\\"type_id\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"),\\\\\\\\\\\\\\\"year\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"全部年代\\\\\\\\\\\\\\\"})).data.video_list\\\\\\\\n    List1(d, list1)\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction paihang(d) {\\\\\\\\n    fenlei(d, [\\\\\\\\\\\\\\\"电视剧#1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"电影#2\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"动漫#3\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"综艺#4\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"短剧#5\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"直播#17\\\\\\\\\\\\\\\"], \\\\\\\\\\\\\\\"rank\\\\\\\\\\\\\\\")\\\\\\\\n    var list1 = req2(host1+\\\\\\\\\\\\\\\"/api.php/v1.rank/RankData?page=1&type_id=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"rank\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"), key1).data.videos\\\\\\\\n    list1.forEach(item => {\\\\\\\\n        d.push({\\\\\\\\n            title: item.vod_name,\\\\\\\\n            pic_url: item.vod_pic,\\\\\\\\n            url: rule1(item.vod_id),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"movie_2\\\\\\\\\\\\\\\"\\\\\\\\n        })\\\\\\\\n    })\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction rule1(vod_id) {\\\\\\\\n    return $(\\\\\\\\\\\\\\\"hiker://empty#\\\\\\\\\\\\\\\"+vod_id+\\\\\\\\\\\\\\\"#immersiveTheme#\\\\\\\\\\\\\\\").rule(() => {\\\\\\\\n        $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\").erji(MY_URL.split(\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\")[1])\\\\\\\\n    })\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction erji(vod_id) {\\\\\\\\n    var d = []\\\\\\\\n    try{\\\\\\\\n    var data1 = req2(host1+\\\\\\\\\\\\\\\"/api.php/v1.player/details?vod_id=\\\\\\\\\\\\\\\"+vod_id, key1).data\\\\\\\\n    var detail = data1.detail\\\\\\\\n    d.push({\\\\\\\\n        title: detail.vod_name+\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"+detail.vod_actor,\\\\\\\\n        desc: detail.vod_class+\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"+detail.vod_remarks,\\\\\\\\n        pic_url: detail.vod_pic,\\\\\\\\n        url: \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\",\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"movie_1_vertical_pic_blur\\\\\\\\\\\\\\\",\\\\\\\\n        extra: {\\\\\\\\n            gradient: true\\\\\\\\n        }\\\\\\\\n    })\\\\\\\\n    setDesc(d, detail.vod_content.replace(/[<p>|</p>]/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"))\\\\\\\\n    \\\\\\\\n    var tab1 = []\\\\\\\\n    var list1 = []\\\\\\\\n    detail.play_url_list.map(item => {\\\\\\\\n        tab1.push(item.from)\\\\\\\\n        list1.push(item.urls)\\\\\\\\n    })\\\\\\\\n    var lazy1 = $(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").lazyRule((tab1) => {\\\\\\\\n        var {\\\\\\\\n            header1,\\\\\\\\n            aesecbde\\\\\\\\n        } = $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\")\\\\\\\\n        // 根据 playername 获取对应的 playerjiekou\\\\\\\\n        function getPlayerJiekou(playername) {\\\\\\\\n            const playerInfo = storage0.getMyVar('playerinfos').find(item => item.playername === playername);\\\\\\\\n            return playerInfo\\\\\\\\n        }\\\\\\\\n        var parse = tab1[getMyVar(\\\\\\\\\\\\\\\"xianluindex\\\\\\\\\\\\\\\", '0')]; //log(parse)\\\\\\\\n        if (parse.includes(\\\\\\\\\\\\\\\"zhibo\\\\\\\\\\\\\\\")) return input+\\\\\\\\\\\\\\\"#isVideo=true#\\\\\\\\\\\\\\\"\\\\\\\\n        var jiekou = getPlayerJiekou(parse).playerjiekou; //log(jiekou)\\\\\\\\n        var parsee = aesecbde(jiekou, getMyVar('hulue')); //log(parsee)\\\\\\\\n        if (parsee == \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") return input+\\\\\\\\\\\\\\\"#isVideo=true#\\\\\\\\\\\\\\\"\\\\\\\\n        if (parsee.includes(\\\\\\\\\\\\\\\"http\\\\\\\\\\\\\\\")) {\\\\\\\\n            var html1 = JSON.parse(request(parsee+input)); //log(html1)\\\\\\\\n            var play = html1.url\\\\\\\\n            if (play === undefined) return \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\"\\\\\\\\n            if ([\\\\\\\\\\\\\\\"NBY\\\\\\\\\\\\\\\"].includes(parse)) {\\\\\\\\n                if (play.includes(\\\\\\\\\\\\\\\".mp4\\\\\\\\\\\\\\\")) {\\\\\\\\n                    var play = request(play, {\\\\\\\\n                        redirect:false,\\\\\\\\n                        onlyHeaders:true\\\\\\\\n                    }); //log(play)\\\\\\\\n                    return JSON.parse(play).headers.location[0]+\\\\\\\\\\\\\\\"#isVideo=true#\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n                writeFile(\\\\\\\\\\\\\\\"hiker://files/cache/video.m3u8\\\\\\\\\\\\\\\", request(play))\\\\\\\\n                return getPath(\\\\\\\\\\\\\\\"hiker://files/cache/video.m3u8\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"+play\\\\\\\\n            }\\\\\\\\n            if ([\\\\\\\\\\\\\\\"QD4K\\\\\\\\\\\\\\\"].includes(parse)) {\\\\\\\\n                if (play.includes(\\\\\\\\\\\\\\\"m3u8\\\\\\\\\\\\\\\")) {\\\\\\\\n                    var play = request(play, {\\\\\\\\n                        redirect:false,\\\\\\\\n                        onlyHeaders:true\\\\\\\\n                    }); //log(play)\\\\\\\\n                    return JSON.parse(play).headers.location[0]+\\\\\\\\\\\\\\\"#isVideo=true#\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n            if (play) return play+\\\\\\\\\\\\\\\"#isVideo=true#\\\\\\\\\\\\\\\"\\\\\\\\n            return \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        var html1 = request(getMyVar(\\\\\\\\\\\\\\\"host\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"/shark/api.php?action=parsevod\\\\\\\\\\\\\\\", {\\\\\\\\n            headers: header1,\\\\\\\\n            body: \\\\\\\\\\\\\\\"parse=\\\\\\\\\\\\\\\"+parsee+\\\\\\\\\\\\\\\"&url=\\\\\\\\\\\\\\\"+input+\\\\\\\\\\\\\\\"&matching=\\\\\\\\\\\\\\\",\\\\\\\\n            method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\"\\\\\\\\n        }); //log(html1)\\\\\\\\n        var play = JSON.parse(aesecbde(html1.replace(/<.*>/g, '').replace(/\\\\\\\\\\\\\\\\n/g, ''), getMyVar(\\\\\\\\\\\\\\\"key\\\\\\\\\\\\\\\"))).url\\\\\\\\n        if (play) return play+\\\\\\\\\\\\\\\"#isVideo=true#\\\\\\\\\\\\\\\"\\\\\\\\n        return \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\"\\\\\\\\n    }, tab1)\\\\\\\\n    eval(JSON.parse(request('hiker://page/erjihanshu')).rule)\\\\\\\\n    \\\\\\\\n    d.push({\\\\\\\\n        title: \\\\\\\\\\\\\\\"猜你喜欢\\\\\\\\\\\\\\\",\\\\\\\\n        pic_url: \\\\\\\\\\\\\\\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\\\\\\\\\\\\\\\",\\\\\\\\n        url: \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\",\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"avatar\\\\\\\\\\\\\\\"\\\\\\\\n    })\\\\\\\\n    List1(d, data1.likes.like_video.slice(0,6))\\\\\\\\n    } catch (e) {\\\\\\\\n        log(e.message)\\\\\\\\n    }\\\\\\\\n    setResult(d)\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction search(word, page) {\\\\\\\\n    var list1 = req2(host1+\\\\\\\\\\\\\\\"/api.php/v1.search/data?wd=\\\\\\\\\\\\\\\"+word+\\\\\\\\\\\\\\\"&type_id=0&page=\\\\\\\\\\\\\\\"+page, key1).data.search_data\\\\\\\\n    list1.forEach(item => {\\\\\\\\n        d.push({\\\\\\\\n            title: item.vod_name,\\\\\\\\n            content: item.vod_blurb,\\\\\\\\n            desc: item.vod_remarks,\\\\\\\\n            pic_url: item.vod_pic,\\\\\\\\n            url: rule1(item.vod_id)\\\\\\\\n        })\\\\\\\\n    })\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst apiview = {\\\\\\\\n    color: (yanse, test) => {\\\\\\\\n        return '<font color='+yanse+'>' + test + '</front>';\\\\\\\\n    },\\\\\\\\n    colorr: (yanse, test) => {\\\\\\\\n        return '‘‘’’<font color=\\\\\\\\\\\\\\\"'+yanse+'\\\\\\\\\\\\\\\">'+test+'</font>';\\\\\\\\n    },\\\\\\\\n    strong: (test) => {\\\\\\\\n        return '<strong>' + test + '</strong>';\\\\\\\\n    },\\\\\\\\n    small: (test) => {\\\\\\\\n        return '<small>' + test + '</small>';\\\\\\\\n    },\\\\\\\\n    center: (test) => {\\\\\\\\n        return '<p style=\\\\\\\\\\\\\\\"text-align: center;\\\\\\\\\\\\\\\">' + test + '</p>'\\\\\\\\n    },\\\\\\\\n    big: (test) => {\\\\\\\\n        return '<big>' + test + '</big>';\\\\\\\\n    },\\\\\\\\n    grey: (text) => {\\\\\\\\n        return \\\\\\\\\\\\\\\"<font color='grey'>\\\\\\\\\\\\\\\" + text + \\\\\\\\\\\\\\\"</font>\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n    },\\\\\\\\n    gray: (test) => {\\\\\\\\n        return \\\\\\\\\\\\\\\"<font color='gray'>\\\\\\\\\\\\\\\" + test + \\\\\\\\\\\\\\\"</font>\\\\\\\\\\\\\\\";\\\\\\\\n    },\\\\\\\\n    rich: (test) => {\\\\\\\\n        return \\\\\\\\\\\\\\\"‘‘’’\\\\\\\\\\\\\\\" + test;\\\\\\\\n    },\\\\\\\\n    addressTag: (url, text) => {\\\\\\\\n        return \\\\\\\\\\\\\\\"<a href='\\\\\\\\\\\\\\\" + url + \\\\\\\\\\\\\\\"'>\\\\\\\\\\\\\\\" + text + \\\\\\\\\\\\\\\"</a>\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction setDesc(d, desc, num) {\\\\\\\\n    //log(desc)\\\\\\\\n    if (desc == undefined) {\\\\\\\\n        return;\\\\\\\\n    }\\\\\\\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\\\\\\\n    if (desc.replace(/(<br>|\\\\\\\\\\\\\\\\s+|<\\\\\\\\\\\\\\\\/?p>|&nbsp;)/g, '').length == 0) {\\\\\\\\n        return;\\\\\\\\n    }\\\\\\\\n    const mark = 'desc';\\\\\\\\n    num = typeof(num) == 'undefined' ? 45 : num\\\\\\\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\\\\\\\n    desc = desc.replace(/'/g, \\\\\\\\\\\\\\\"&#39;\\\\\\\\\\\\\\\");\\\\\\\\n    desc = desc.replace(/\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n/g, \\\\\\\\\\\\\\\"<br>\\\\\\\\\\\\\\\");\\\\\\\\n    desc = desc.replace(/\\\\\\\\\\\\\\\\r/g, \\\\\\\\\\\\\\\"<br>\\\\\\\\\\\\\\\");\\\\\\\\n    desc = desc.replace(/\\\\\\\\\\\\\\\\n/g, \\\\\\\\\\\\\\\"<br>\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n    function substr(str, maxLength) {\\\\\\\\n        let len = 0;\\\\\\\\n        for (let i = 0; i < str.length; i++) {\\\\\\\\n            if (str.charCodeAt(i) > 255) {\\\\\\\\n                len += 2;\\\\\\\\n            } else {\\\\\\\\n                len++;\\\\\\\\n            }\\\\\\\\n            if (len > maxLength) {\\\\\\\\n                return str.slice(0, i) + '...';\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n        return str;\\\\\\\\n    }\\\\\\\\n    let sdesc = substr(desc, num);\\\\\\\\n    var colors = {\\\\\\\\n        show: \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\",\\\\\\\\n        hide: \\\\\\\\\\\\\\\"grey\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\\\\\\\\n        var show = storage0.getItem(m, '0');\\\\\\\\n        var title = findItem('desc').title;\\\\\\\\n        var re = /(<\\\\\\\\\\\\\\\\/small><br>.*?>).+/g;\\\\\\\\n        var exp = '展开:';\\\\\\\\n        var ret = '收起:';\\\\\\\\n        if (show == '1') {\\\\\\\\n            updateItem('desc', {\\\\\\\\n                title: title\\\\\\\\n                    .replace(ret, exp)\\\\\\\\n                    .replace(re, '$1' + sdc + '</small>')\\\\\\\\n                    .replace(/(<\\\\\\\\\\\\\\\\/small><br>\\\\\\\\\\\\\\\\<font color=\\\\\\\\\\\\\\\").*?(\\\\\\\\\\\\\\\">)/, '$1' + cs.hide + '$2')\\\\\\\\n            })\\\\\\\\n            storage0.setItem(m, '0');\\\\\\\\n        } else {\\\\\\\\n            updateItem('desc', {\\\\\\\\n                title: title\\\\\\\\n                    .replace(exp, ret)\\\\\\\\n                    .replace(re, '$1' + dc + '</small>')\\\\\\\\n                    .replace(/(<\\\\\\\\\\\\\\\\/small><br>\\\\\\\\\\\\\\\\<font color=\\\\\\\\\\\\\\\").*?(\\\\\\\\\\\\\\\">)/, '$1' + cs.show + '$2')\\\\\\\\n            })\\\\\\\\n            storage0.setItem(m, '1');\\\\\\\\n        }\\\\\\\\n        return `hiker://empty`\\\\\\\\n    }, desc, sdesc, mark, colors)\\\\\\\\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\\\\\\\\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\\\\\\\\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\\\\\\\\n    d.push({\\\\\\\\n        title: '' + '<b><font color=\\\\\\\\\\\\\\\"#098AC1\\\\\\\\\\\\\\\">∷剧情简介\\\\\\\\t</font></b>' + \\\\\\\\\\\\\\\"<small><a style='text-decoration: none;' href='\\\\\\\\\\\\\\\" + lazy + \\\\\\\\\\\\\\\"'>\\\\\\\\\\\\\\\" + sc + '</a></small><br><font color=\\\\\\\\\\\\\\\"' + cs + '\\\\\\\\\\\\\\\">' + `${dc}` + '</small>',\\\\\\\\n        col_type: 'rich_text',\\\\\\\\n        extra: {\\\\\\\\n            id: 'desc',\\\\\\\\n            lineSpacing: 6,\\\\\\\\n            textSize: 15,\\\\\\\\n            lineVisible: true,\\\\\\\\n        }\\\\\\\\n    })\\\\\\\\n}\\\\\\\\n\\\\\\\\n$.exports = {\\\\\\\\n    header1,\\\\\\\\n    tuijian,\\\\\\\\n    fenlei1,\\\\\\\\n    paihang,\\\\\\\\n    erji,\\\\\\\\n    search,\\\\\\\\n    aesecbde,\\\\\\\\n    configs,\\\\\\\\n    apiview\\\\\\\\n}\\\\\\\"},{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"二级函数\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"erjihanshu\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"var tabs = tab1\\\\\\\\nvar lists = list1\\\\\\\\nvar lazy = lazy1\\\\\\\\n\\\\\\\\naddListener(\\\\\\\\\\\\\\\"onClose\\\\\\\\\\\\\\\", $.toString(() => {\\\\\\\\n    clearMyVar(\\\\\\\\\\\\\\\"lists\\\\\\\\\\\\\\\");\\\\\\\\n}));\\\\\\\\nstorage0.putMyVar(\\\\\\\\\\\\\\\"lists\\\\\\\\\\\\\\\", lists);\\\\\\\\nvar list = lists[getMyVar(MY_URL, '0')];\\\\\\\\nvar 排序 = getMyVar(MY_URL + \\\\\\\\\\\\\\\"章节排序\\\\\\\\\\\\\\\", '#1aad19\\\\\\\\\\\\\\\">正序');\\\\\\\\nvar 提示 = 排序 == '#FF0000\\\\\\\\\\\\\\\">倒序' ? '#1aad19\\\\\\\\\\\\\\\">正序' : '#FF0000\\\\\\\\\\\\\\\">倒序';\\\\\\\\nvar 排序名 = '““””<b><span style=\\\\\\\\\\\\\\\"color:排序</span></b>';\\\\\\\\n\\\\\\\\nd.push({\\\\\\\\n    title: '““””<b><span style=\\\\\\\\\\\\\\\"color: ' + 排序 + '</span></b>',\\\\\\\\n    url: $(\\\\\\\\\\\\\\\"#noLoading#\\\\\\\\\\\\\\\").lazyRule((tabs, 排序名, lazy, d, TV推送) => {\\\\\\\\n        var lists = storage0.getMyVar(\\\\\\\\\\\\\\\"lists\\\\\\\\\\\\\\\");\\\\\\\\n        var 章节 = lists[getMyVar(MY_URL, '0')];\\\\\\\\n        var 排序 = getMyVar(MY_URL + \\\\\\\\\\\\\\\"章节排序\\\\\\\\\\\\\\\", '#1aad19\\\\\\\\\\\\\\\">正序');\\\\\\\\n        var 提示 = 排序 == '#FF0000\\\\\\\\\\\\\\\">倒序' ? '#1aad19\\\\\\\\\\\\\\\">正序' : '#FF0000\\\\\\\\\\\\\\\">倒序';\\\\\\\\n        updateItem({\\\\\\\\n            extra: {\\\\\\\\n                id: MY_URL + \\\\\\\\\\\\\\\"_排序\\\\\\\\\\\\\\\",\\\\\\\\n                longClick: [{\\\\\\\\n                    title: \\\\\\\\\\\\\\\"TVbox推送\\\\\\\\\\\\\\\",\\\\\\\\n                    js: TV推送(tabs, lists, d)\\\\\\\\n                }]\\\\\\\\n            },\\\\\\\\n            title: 排序名.replace('排序', 提示)\\\\\\\\n        });\\\\\\\\n        if (排序 == '#1aad19\\\\\\\\\\\\\\\">正序') {\\\\\\\\n            章节.reverse();\\\\\\\\n        }\\\\\\\\n        let cp = 章节.map((data, ssid) => ({\\\\\\\\n            title: data.name,\\\\\\\\n            url: data.url + lazy,\\\\\\\\n            col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\\\\\\\n            extra: {\\\\\\\\n                cls: MY_URL + \\\\\\\\\\\\\\\"_选集\\\\\\\\\\\\\\\",\\\\\\\\n                id: data.url\\\\\\\\n            }\\\\\\\\n        }));\\\\\\\\n        deleteItemByCls(MY_URL + \\\\\\\\\\\\\\\"_选集\\\\\\\\\\\\\\\");\\\\\\\\n        addItemBefore(MY_URL + \\\\\\\\\\\\\\\"footer\\\\\\\\\\\\\\\", cp);\\\\\\\\n        putMyVar(MY_URL + \\\\\\\\\\\\\\\"章节排序\\\\\\\\\\\\\\\", 提示);\\\\\\\\n        return \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\";\\\\\\\\n    }, tabs, 排序名, lazy, d[0], TV推送),\\\\\\\\n    col_type: 'flex_button',\\\\\\\\n    extra: {\\\\\\\\n        id: MY_URL + \\\\\\\\\\\\\\\"_排序\\\\\\\\\\\\\\\",\\\\\\\\n        longClick: [{\\\\\\\\n            title: \\\\\\\\\\\\\\\"TVbox推送\\\\\\\\\\\\\\\",\\\\\\\\n            js: TV推送(tabs, lists, d[0])\\\\\\\\n        }]\\\\\\\\n    }\\\\\\\\n});\\\\\\\\n\\\\\\\\nfunction TV推送(tabs, lists, d) {\\\\\\\\n    return $.toString((tabs, lists, d) => {\\\\\\\\n        var 推送 = {\\\\\\\\n            \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": getPageTitle(),\\\\\\\\n            \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": d.desc,\\\\\\\\n            \\\\\\\\\\\\\\\"pic\\\\\\\\\\\\\\\": d.img || d.pic_url,\\\\\\\\n            \\\\\\\\\\\\\\\"from\\\\\\\\\\\\\\\": tabs.join('$$$'),\\\\\\\\n            \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\": storage0.getMyVar(\\\\\\\\\\\\\\\"lists\\\\\\\\\\\\\\\").map(li => li.map(li1 => li1.name + '$' + li1.url).join('#')).join('$$$')\\\\\\\\n        };\\\\\\\\n        return \\\\\\\\\\\\\\\"hiker://page/push?rule=XYQ推送&pushurl=\\\\\\\\\\\\\\\" + encodeURIComponent(JSON.stringify(推送));\\\\\\\\n    }, tabs, lists, d);\\\\\\\\n}\\\\\\\\n\\\\\\\\ntabs.forEach((data, id) => {\\\\\\\\n    d.push({\\\\\\\\n        title: getMyVar(MY_URL, '0') == id ? `““${data}””` : data,\\\\\\\\n        url: $(\\\\\\\\\\\\\\\"#noLoading#\\\\\\\\\\\\\\\").lazyRule((线路, lazy, id) => {\\\\\\\\n            var lists = storage0.getMyVar(\\\\\\\\\\\\\\\"lists\\\\\\\\\\\\\\\");\\\\\\\\n            var 排序 = getMyVar(MY_URL + \\\\\\\\\\\\\\\"章节排序\\\\\\\\\\\\\\\", '#1aad19\\\\\\\\\\\\\\\">正序');\\\\\\\\n            var 提示 = 排序 == '#FF0000\\\\\\\\\\\\\\\">倒序' ? '#1aad19\\\\\\\\\\\\\\\">正序' : '#FF0000\\\\\\\\\\\\\\\">倒序';\\\\\\\\n            线路.forEach((data, xlid) => {\\\\\\\\n                updateItem({\\\\\\\\n                    title: id == xlid ? `““${data}””` : data,\\\\\\\\n                    extra: {\\\\\\\\n                        id: MY_URL + \\\\\\\\\\\\\\\"_线路\\\\\\\\\\\\\\\" + xlid\\\\\\\\n                    }\\\\\\\\n                });\\\\\\\\n            })\\\\\\\\n            putMyVar(MY_URL, id)\\\\\\\\n            putMyVar(\\\\\\\\\\\\\\\"xianluindex\\\\\\\\\\\\\\\", id)\\\\\\\\n            var 章节 = lists[getMyVar(MY_URL, '0')];\\\\\\\\n            if (排序 == '#FF0000\\\\\\\\\\\\\\\">倒序') {\\\\\\\\n                章节.reverse()\\\\\\\\n            }\\\\\\\\n            let cp = 章节.map((data, ssid) => {\\\\\\\\n                return {\\\\\\\\n                    title: data.name,\\\\\\\\n                    url: data.url + lazy,\\\\\\\\n                    col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\\\\\\\n                    extra: {\\\\\\\\n                        cls: MY_URL + \\\\\\\\\\\\\\\"_选集\\\\\\\\\\\\\\\",\\\\\\\\n                        id: data.url\\\\\\\\n                    }\\\\\\\\n                };\\\\\\\\n            });\\\\\\\\n            deleteItemByCls(MY_URL + \\\\\\\\\\\\\\\"_选集\\\\\\\\\\\\\\\");\\\\\\\\n            addItemBefore(MY_URL + \\\\\\\\\\\\\\\"footer\\\\\\\\\\\\\\\", cp);\\\\\\\\n            return \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\"\\\\\\\\n        }, tabs, lazy, id),\\\\\\\\n        col_type: 'flex_button',\\\\\\\\n        extra: {\\\\\\\\n            id: MY_URL + \\\\\\\\\\\\\\\"_线路\\\\\\\\\\\\\\\" + id\\\\\\\\n        }\\\\\\\\n    });\\\\\\\\n})\\\\\\\\n\\\\\\\\nif (排序 == '#FF0000\\\\\\\\\\\\\\\">倒序') {\\\\\\\\n    list.reverse()\\\\\\\\n}\\\\\\\\nlist.forEach((data, id) => {\\\\\\\\n    d.push({\\\\\\\\n        title: data.name,\\\\\\\\n        url: data.url + lazy,\\\\\\\\n        col_type: list.length > 3 ? 'text_4' : 'text_2',\\\\\\\\n        extra: {\\\\\\\\n            cls: MY_URL + \\\\\\\\\\\\\\\"_选集\\\\\\\\\\\\\\\",\\\\\\\\n            id: data.url\\\\\\\\n        }\\\\\\\\n    });\\\\\\\\n})\\\\\\\\n\\\\\\\\nsetLastChapterRule('js:' + $.toString((play_url_list) => {\\\\\\\\n    setResult('更新至: 第' + play_url_list.map(item => item.urls.length).sort((a, b) => b - a)[0] + \\\\\\\\\\\\\\\"集\\\\\\\\\\\\\\\");\\\\\\\\n}, detail.play_url_list));\\\\\\\\n\\\\\\\\nd.push({\\\\\\\\n    col_type: \\\\\\\\\\\\\\\"big_blank_block\\\\\\\\\\\\\\\",\\\\\\\\n    extra: {\\\\\\\\n        id: MY_URL + \\\\\\\\\\\\\\\"footer\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n});\\\\\\\"}]\\\",\\\"proxy\\\":\\\"\\\",\\\"icon\\\":\\\"data:image/png;base64,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\\\"}]\"}]","icon":"hiker://files/zf/img/heji.png","proxy":""}