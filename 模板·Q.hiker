海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@模板·Q@{"last_chapter_rule":"","title":"模板·Q","author":"发粪涂墙","url":"hiker://empty##fypage","version":25090500,"col_type":"text_center_1","class_name":"","type":"tool","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\naddListener(\"onClose\", $.toString(() => {\n    [\"template-url\", \"search-url\", \"pages-unfold\"].forEach(clearMyVar);\n}));\nconst isUnfolded = getMyVar('pages-unfold', 'false') === 'true'\nlet d2 = [{\n    desc: \"输入分类或详情页链接测试匹配\",\n    col_type: \"input\",\n    url: \"input\",\n    title: \"测试\",\n    extra: {\n        defaultValue: getMyVar('template-url', \"\"),\n        onChange: \"putMyVar('template-url',input)\"\n    }\n}, {\n    desc: \"输入搜索链接，**为关键字占位符\",\n    col_type: \"input\",\n    url: \"input\",\n    title: \"测试搜索\",\n    extra: {\n        titleVisible: false,\n        defaultValue: getVar(\"search-url\"),\n        onChange: \"putVar('search-url',input)\"\n    }\n}, {\n    desc: \"输入搜索关键词测试匹配\",\n    col_type: \"input\",\n    url: $.toString(() => `hiker://search?s=${input}&rule=${MY_RULE.title}`)\n}, {\n    title: \"生成规则\",\n    col_type: \"text_2\",\n    url: $(\"\", \"请输入规则名\").input(() => {\n        const url = getMyVar('template-url', \"\");\n        if (!url || !input) return \"toast://请先输入链接和规则名\";\n        const rule = {\n            title: input,\n            url: url,\n            search_url: getVar(\"search-url\"),\n            group: \"测试\",\n            ua: \"mobile\",\n            find_rule: MY_RULE.detail_find_rule,\n            detail_find_rule: MY_RULE.detail_find_rule,\n            searchFind: MY_RULE.detail_find_rule,\n            version: 0,\n            col_type: \"movie_3\",\n            detail_col_type: \"movie_1\",\n            sdetail_col_type: \"movie_1\",\n            sdetail_find_rule: \"*\"\n        };\n        return `海阔视界规则分享，当前分享的是：小程序￥home_rule￥${JSON.stringify(rule)}`;\n    })\n}, {\n    title: '视频教程',\n    col_type: 'text_2',\n    url: \"video://https://www.bilibili.com/video/BV1dM4y1g7re\"\n}, {\n    title: isUnfolded ? '点我收缩模板列表' : '点我展开模板列表',\n    col_type: 'text_center_1',\n    url: $(\"#noLoading#\").lazyRule((isUnfolded) => {\n        putMyVar('pages-unfold', isUnfolded ? 'false' : 'true');\n        refreshPage(false);\n        return `toast://${isUnfolded ? '收缩' : '展开'}成功`;\n    }, isUnfolded)\n}, {\n    title: '测试提示：首页链接需改页码为fypage，测试通过后填好名称生成规则，详细教程参考上方链接',\n    col_type: 'rich_text'\n}]\n\nif (isUnfolded) {\n    d2.push({\n        title: '点击模板可查看代码：',\n        col_type: 'rich_text'\n    });\n\n    const validPages = MY_RULE.pageList.filter(page =>\n        page.name !== '#Mapping' && page.name !== '#auto'\n    );\n\n    validPages.forEach(page => {\n        d2.push({\n            title: page.name,\n            col_type: 'text_2',\n            url: $().rule(page => setResult([{\n                title: page.rule,\n                col_type: 'long_text'\n            }]), page)\n        });\n    });\n}\nsetResult(d2);","search_url":"hiker://empty#**#fypage.js: let surl =  getVar(\"search-url\")；；let insplits=input.split(\"#\")；；let url = surl.replace(base64Decode(\"Kio=\"), insplits[1]).replace(base64Decode(\"ZnlwYWdl\"), insplits[2])；；url；；","group":"*️⃣工具","searchFind":"js:\nvar d = []\nvar html = getResCode()\n$.require('hiker://page/yzm?rule=模板·Q')\n$.require(\"hiker://page/auto?rule=模板·Q\").autoPage(html)","detail_col_type":"movie_3","detail_find_rule":"js:\n$.require(\"hiker://page/auto?rule=模板·Q\").autoPage(getResCode())","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"auto","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"一级stui-vodlist\",\"path\":\"stui-vodlist\",\"rule\":\"var d = []\\nMY_RULE.url.match(/fypage/)[0];\\nsetResult(\\n  pdfa(getResCode(), '.stui-vodlist&&li').map((list) => ({\\n    title: pdfh(list, 'a&&title'),\\n    desc: pdfh(list, '.pic-text&&Text'),\\n    img: pd(list, '.lazyload||a&&data-original') + '@Referer=',\\n    url: pd(list, 'a&&href') + '#immersiveTheme#',\\n  }))\\n);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"二级.b\",\"path\":\".b\",\"rule\":\"var d = [];\\nvar html = getResCode();\\nif (html.indexOf('检测中') != -1) {\\n    html = request(MY_URL + '?btwaf' + html.match(/btwaf(.*?)\\\\\\\"/)[1], {});\\n}\\nd.push({\\n    title: pdfh(html, '.stui-content__detail--h1&&Text')\\n        .replace('地区', '\\\\n地区')\\n        .replace('主演', '\\\\n主演'),\\n    desc: pdfh(html, '.desc||.detail-content&&Text'),\\n    pic_url: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = 'body&&.b'\\nvar 选集 = 线路\\nvar 线路名 = 'h3&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索stui-vodlist__media\",\"path\":\"stui-vodlist__media\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), '.stui-vodlist__media&&li');\\nlog('搜索结果')\\nlog(list)\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'a&&title'),\\n        desc: pdfh(list[j], '.pic-text&&Text'),\\n        img: pd(list[j], 'a&&data-original'),\\n        content: pdfh(list[j], '.detail--h3&&Text'),\\n        url: pd(list[j], 'a&&href')+'#immersiveTheme#'\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"一级myui-vodlist\",\"path\":\"myui-vodlist\",\"rule\":\"var d = []\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '.myui-vodlist&&li')\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'h4&&Text'),\\n        desc: pdfh(list[j], '.pic-tag||.pic-text&&Text'),\\n        img: pd(list[j], '.lazyload&&data-original'),\\n        url: pd(list[j], 'a&&href').replace('vodplay','voddetail') + '#immersiveTheme#'\\n    })\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"二级nav-tabs\",\"path\":\"nav-tabs\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.data&&Text')\\n        .replace('地区：', '  ')\\n        .replace('年份：', '  ') + '\\\\n' +\\n        pdfh(html, '.data,1&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, '.data,2&&Text'),\\n    desc: pdfh(html, '.data,3&&Text'),\\n    img: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = '.nav-tabs&&a'\\nvar 选集 = '.tab-content&&.myui-content__list||.stui-content__playlist'\\nvar 线路名 = 'Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索myui-vodlist__media\",\"path\":\"myui-vodlist__media\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), '#searchList&&li');\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'a&&title'),\\n        desc: pdfh(list[j], '.pic-text&&Text'),\\n        pic_url: pd(list[j], 'a&&data-original'),\\n        content: pdfh(list[j], '.detail--h4&&Text'),\\n        url: pd(list[j], 'a&&href')+'#immersiveTheme#'\\n    })\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"一级vodlist\",\"path\":\"vodlist\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '.vodlist&&li');\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], 'a&&title'),\\n       desc: pdfh(list[j], 'a&&Text'),\\n       pic_url: pd(list[j], '.lazyload&&data-original')+'@Referer=',\\n       url: pd(list[j],'a&&href') + '#immersiveTheme#'\\n  });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级mo-play-load\",\"path\":\"mo-play-load\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.video-info-items,2&&Text')\\n  .replace('分类|', '')\\n  .replace('地区：', '')\\n  .replace('年份：', ' ').substring(0, 18) + '\\\\n' + '\\\\n' + \\n  pdfh(html, '.video-info-items,1&&Text').substring(0, 18),\\n    pic_url: pd(html, '.lazyload&&data-src'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = 'body&&.module-tab-content&&.module-tab-item'\\nvar 选集 = 'body&&.sort-item'\\nvar 线路名 = 'span&&Text'\\nvar 选集列表 = 'body&&a'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级nav-tabs1\",\"path\":\"nav-tabs1\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, 'p,1&&Text')\\n        .replace('类型：', '')\\n        .replace('地区：', ' ')\\n        .replace('年份：', '')\\n        .replace('语言：', '') +\\n        '\\\\n\\\\n' + pdfh(html, 'p,4&&Text')\\n        .substring(0, 30),\\n    desc: pdfh(html, 'p,2&&Text'),\\n    pic_url: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = '.nav-tabs&&a'\\nvar 选集 = 'body&&.stui-content__playlist'\\nvar 线路名 = 'a&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"flex_button\",\"name\":\"定位二级\",\"path\":\"erji\",\"rule\":\"(() => {\\n     d = typeof d === 'undefined' ? [] : d\\n    var tabs = pdfa(html, 线路).map(data => {\\n    let tabText = pdfh(data, 线路名);\\n    return (typeof 排除 !== 'undefined' && 排除) ?\\n        tabText.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\") :\\n        tabText;\\n});\\n\\nvar lists = pdfa(html, 选集).map(data => pdfa(data, 选集列表));\\naddListener(\\\"onClose\\\", $.toString(() => clearMyVar(\\\"lists\\\")));\\nstorage0.putMyVar(\\\"lists\\\", lists);\\n\\nif (typeof lazy === 'undefined') {\\n    lazy = $('').lazyRule(() => {\\n        try {\\n            var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\\n            var url = html.url\\n            if (html.encrypt == '1') {\\n                url = unescape(url);\\n            } else if (html.encrypt == '2') {\\n                url = unescape(base64Decode(url));\\n            }\\n            if (/m3u8|mp4/.test(url)) {\\n                return url\\n            } else {\\n                return 'video://' + input\\n            }\\n        } catch (e) {\\n            return 'video://' + input\\n        }\\n    })\\n}\\n\\nconst currentLine = getMyVar(MY_URL, '0');\\nvar sortOrder = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\nvar sortLabel = sortOrder == '#FF0000\\\">倒序' ?\\n    '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\nvar sortTitle = '““””<b><span style=\\\"color:排序</span></b>';\\n\\nvar TV推送 = (tabs, lists, d) => $.toString((tabs, lists, d) => {\\n    var 推送 = {\\n        \\\"name\\\": getPageTitle(),\\n        \\\"content\\\": d.desc,\\n        \\\"pic\\\": d.img || d.pic_url,\\n        \\\"from\\\": tabs.join('$$$'),\\n        \\\"url\\\": storage0.getMyVar(\\\"lists\\\").map(li => li.map(li1 => pdfh(li1, 'Text') + '$' + pd(li1, 'a&&href')).join('#')).join('$$$')\\n    };\\n    return \\\"hiker://page/push?rule=XYQ推送&pushurl=\\\" + encodeURIComponent(JSON.stringify(推送));\\n}, tabs, lists, d);\\n\\nd.push({\\n    title: '““””<b><span style=\\\"color: ' + sortOrder + '</span></b>',\\n    url: $(\\\"#noLoading#\\\").lazyRule((tabs, sortTitle, lazy, d, TV推送) => {\\n        const lists = storage0.getMyVar(\\\"lists\\\");\\n        const currentLine = getMyVar(MY_URL, '0');\\n        const sortOrder = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\n        const newLabel = sortOrder == '#FF0000\\\">倒序' ?\\n            '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\n\\n        updateItem({\\n            extra: {\\n                id: MY_URL + \\\"_排序\\\",\\n                longClick: [{\\n                    title: \\\"TVbox推送\\\",\\n                    js: TV推送(tabs, lists, d)\\n                }]\\n            },\\n            title: sortTitle.replace('排序', newLabel)\\n        });\\n\\n        let chapters = lists[currentLine];\\n        if (sortOrder == '#1aad19\\\">正序') {\\n            chapters.reverse();\\n        }\\n\\n        let chapterItems = chapters.map(data => ({\\n            title: pdfh(data, 'a&&Text'),\\n            url: pd(data, 'a&&href') + lazy,\\n            col_type: chapters.length > 3 ? 'text_4' : 'text_2',\\n            extra: {\\n                cls: MY_URL + \\\"_选集\\\",\\n                id: pd(data, 'a&&href')\\n            }\\n        }));\\n\\n        deleteItemByCls(MY_URL + \\\"_选集\\\");\\n        addItemBefore(MY_URL + \\\"footer\\\", chapterItems);\\n        putMyVar(MY_URL + \\\"章节排序\\\", newLabel);\\n        return \\\"hiker://empty\\\";\\n    }, tabs, sortTitle, lazy, d[0], TV推送),\\n    col_type: 'flex_button',\\n    extra: {\\n        id: MY_URL + \\\"_排序\\\",\\n        longClick: [{\\n            title: \\\"TVbox推送\\\",\\n            js: TV推送(tabs, lists, d[0])\\n        }]\\n    }\\n});\\n\\n\\ntabs.forEach((tabName, id) => {\\n    d.push({\\n        title: currentLine == id ? `““${tabName}””` : tabName,\\n        url: $(\\\"#noLoading#\\\").lazyRule((线路列表, lazy, id) => {\\n            const lists = storage0.getMyVar(\\\"lists\\\");\\n            线路列表.forEach((name, xid) => updateItem({\\n                title: id == xid ? `““${name}””` : name,\\n                extra: {\\n                    id: `${MY_URL}_线路${xid}`\\n                }\\n            }));\\n\\n            putMyVar(MY_URL, id);\\n            let chapters = lists[getMyVar(MY_URL, '0')];\\n            if (getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序') == '#FF0000\\\">倒序') {\\n                chapters.reverse();\\n            }\\n\\n            let chapterItems = chapters.map(data => ({\\n                title: pdfh(data, 'a&&Text'),\\n                url: pd(data, 'a&&href') + lazy,\\n                col_type: chapters.length > 3 ? 'text_4' : 'text_2',\\n                extra: {\\n                    cls: MY_URL + \\\"_选集\\\",\\n                    id: pd(data, 'a&&href')\\n                }\\n            }));\\n\\n            deleteItemByCls(MY_URL + \\\"_选集\\\");\\n            addItemBefore(MY_URL + \\\"footer\\\", chapterItems);\\n            return \\\"hiker://empty\\\";\\n        }, tabs, lazy, id),\\n        col_type: 'flex_button',\\n        extra: {\\n            id: `${MY_URL}_线路${id}`\\n        }\\n    });\\n});\\n\\nlet currentChapters = lists[currentLine];\\nif (sortOrder == '#FF0000\\\">倒序') {\\n    currentChapters.reverse();\\n}\\n\\ncurrentChapters.forEach(data => {\\n    d.push({\\n        title: pdfh(data, 'a&&Text'),\\n        url: pd(data, 'a&&href') + lazy,\\n        col_type: currentChapters.length > 3 ? 'text_4' : 'text_2',\\n        extra: {\\n            cls: MY_URL + \\\"_选集\\\",\\n            id: pd(data, 'a&&href')\\n        }\\n    });\\n});\\n\\nsetLastChapterRule('js:' + $.toString((选集, 选集列表) =>\\n    setResult('更新至: 第' +\\n        pdfa(getResCode(), 选集).map(d =>\\n            pdfa(d, 选集列表).length\\n        ).sort((a, b) => b - a)[0] + \\\"集\\\"), 选集, 选集列表));\\n\\nd.push({\\n    col_type: \\\"big_blank_block\\\",\\n    extra: {\\n        id: MY_URL + \\\"footer\\\"\\n    }\\n})\\nsetResult(d)\\n})()\"},{\"col_type\":\"movie_3\",\"name\":\"二级play_source_tab\",\"path\":\"play_source_tab\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.remarks&&Text') +\\n        '\\\\n' + pdfh(html, '.s-top-info-detail&&a&&Text') +\\n        pdfh(html, '.s-top-info-detail&&a,1&&Text') +\\n        pdfh(html, '.s-top-info-detail&&a,2&&Text') +\\n        '\\\\n““简介：不能用就删掉吧””',\\n    desc: pdfh(html, '.desc_txt&&Text').substring(0, 20),\\n    img: pd(html, '.img-cover||.vod-detail-bj&&src'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = '.play_source_tab&&a'\\nvar 选集 = 'body&&.player_list||#playlistbox||#playsx'\\nvar 线路名 = 'a&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级fed-play-item\",\"path\":\"fed-play-item\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, 'dd&&li,3&&Text') +\\n        '\\\\n' + pdfh(html, 'dd&&li,4&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, 'dd&&li,5&&Text')\\n        .substring(0, 15),\\n    desc: pdfh(html, 'dd&&li,6&&Text').substring(0, 25),\\n    pic_url: pd(html, '.fed-lazy&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic'\\n});\\nvar 线路 = 'body&&.fed-drop-btns'\\nvar 选集 = 'body&&.fed-play-item'\\nvar 线路名 = 'a&&Text'\\nvar 选集列表 = 'body&&.fed-btns-info'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索dl\",\"path\":\"dl\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), 'body&&dl');\\nlog('搜索结果')\\nlog(list)\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], 'h1&&Text'),\\n       desc: pdfh(list[j], '.fed-list-remarks&&Text'),\\n\\t    content: pdfh(list[j], '.fed-part-esan--span&&Text'),\\n       img: pd(list[j], 'a&&data-original'),\\n       url: pd(list[j], 'a&&href')\\n  });\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"#Mapping\",\"path\":\"Mapping\",\"rule\":\"js:\\n$.exports = {\\n    \\\"home\\\": [{\\n            keys: [\\\" b \\\"],\\n            url: \\\".b\\\",\\n            //     allKey: true,\\n        },\\n        {\\n            keys: [\\\"nav-tabs\\\"],\\n            url: \\\"nav-tabs\\\",\\n        },\\n        {\\n            keys: [\\\"myui-content__list\\\"],\\n            url: \\\"myui-content__list\\\",\\n        },\\n        {\\n            keys: [\\\"nav-tabs\\\", \\\"stui-content__playlist\\\"],\\n            url: \\\"nav-tabs1\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"h3\\\", \\\"stui-content__playlist\\\"],\\n            url: \\\"h3\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"myui-vodlist \\\"],\\n            url: \\\"myui-vodlist\\\",\\n        },\\n        {\\n            keys: [\\\"mo-movs-item\\\"],\\n            url: \\\"mo-movs-item\\\",\\n        },\\n        {\\n            keys: [\\\"module-tab-item\\\"],\\n            url: \\\"module-tab-item\\\",\\n            //     allKey: true,\\n        },{\\n            keys: [\\\"y-playList\\\"],\\n            url: \\\"y-playList\\\",\\n        },\\n        {\\n            keys: [\\\"stui-vodlist \\\"],\\n            url: \\\"stui-vodlist\\\",\\n            //     allKey: true,\\n        },\\n        {\\n            keys: [\\\"play_source_tab\\\"],\\n            url: \\\"play_source_tab\\\",\\n        },\\n        {\\n            keys: [\\\"fed-play-item\\\"],\\n            url: \\\"fed-play-item\\\",\\n        },\\n        {\\n            keys: [\\\"module-item\\\"],\\n            url: \\\"module-items\\\",\\n        },\\n        {\\n            keys: [\\\"vodlist \\\", \\\"lazyload\\\"],\\n            url: \\\"vodlist\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"mo-play-load\\\"],\\n            url: \\\"mo-play-load\\\",\\n        },\\n        {\\n            keys: [\\\"fed-list-title\\\"],\\n            url: \\\"fed-list-title\\\",\\n            //allKey: true,\\n        },\\n        {\\n            keys: [\\\"pack-ykpack\\\\\\\"\\\"],\\n            url: \\\"pack-ykpack\\\",\\n        },\\n        /*\\n                {\\n                    keys: [\\\"item\\\"],\\n                    url: \\\"item\\\",\\n                },*/\\n        {\\n            keys: [\\\"data_list\\\"],\\n            url: \\\"data_list\\\",\\n        },\\n    ],\\n    \\\"search\\\": [{\\n            keys: [\\\"stui-vodlist__media\\\"],\\n            url: \\\"stui-vodlist__media\\\",\\n        },\\n        {\\n            keys: [\\\"myui-vodlist__media\\\"],\\n            url: \\\"myui-vodlist__media\\\",\\n        },\\n        {\\n            keys: [\\\"module-search-item\\\"],\\n            url: \\\"module-search-item\\\",\\n        },\\n        {\\n            keys: [\\\"stui-vodlist \\\"],\\n            url: \\\"stui-vodlist\\\",\\n            //     allKey: true,\\n        },\\n        {\\n            keys: [\\\"dl \\\"],\\n            url: \\\"dl\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"module-items\\\"],\\n            url: \\\"module-items\\\",\\n        },\\n    ]\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"#auto\",\"path\":\"auto\",\"rule\":\"js:\\nfunction getPageSource(key) {\\n    let src = request(\\\"hiker://page/\\\" + key + \\\"?rule=模板·Q\\\");\\n    src = JSON.parse(src).rule;\\n    return src;\\n}\\nconst sourceMap = $.require(\\\"hiker://page/Mapping?rule=模板·Q\\\");\\n\\nfunction autoPage(htmlsrc, type) {\\n    let pageRules = [],\\n        htmlSource = htmlsrc,\\n        pageType,\\n        mMapping;\\n    if (type !== undefined) {\\n        pageType = type;\\n    } else {\\n        pageType = MY_TYPE;\\n    }\\n    mMapping = sourceMap[pageType];\\n    if (mMapping === undefined || !Array.isArray(mMapping)) {\\n        throw new Error(\\\"不存在\\\" + pageType + \\\"类型的模板\\\");\\n    }\\n    for (let item of mMapping) {\\n        if (item.allKey) {\\n            if (item.keys.every(key => htmlSource.includes(key))) {\\n                pageRules.push(item);\\n            }\\n        } else {\\n            if (item.keys.some(key => htmlSource.includes(key))) {\\n                pageRules.push(item);\\n            }\\n        }\\n    }\\n    if(pageRules.length == 0) {\\n        log(\\\"暂无合适的模板\\\");\\n    }\\n    for (let pageRule of pageRules) {\\n        log(\\\"正在匹配：\\\" + pageRule.url);\\n        try {\\n            eval.call(null, \\\";(function(){\\\" + getPageSource(pageRule.url) + \\\"})()\\\");\\n            log(\\\"匹配模板成功，正在结束匹配进程\\\");\\n            break;\\n        } catch (e) {\\n            log(\\\"匹配模板错误\\\");\\n            log(e.toString())\\n            log(\\\"正在匹配下一个模板......\\\")\\n            if (pageRule.url == pageRules[pageRules.length - 1].url) {\\n                log(\\\"已匹配到最后一个模板，暂无合适的模板\\\");\\n                setResult([]);\\n            }\\n        }\\n    }\\n\\n}\\n$.exports.autoPage = autoPage;\"},{\"col_type\":\"movie_3\",\"name\":\"一级pack-ykpack\",\"path\":\"pack-ykpack\",\"rule\":\"var d =[];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), 'body&&.pack-ykpack');\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], 'a&&title'),\\n       desc: pdfh(list[j], 'span,-1&&Text'),\\n       img: pd(list[j], '.eclazy&&data-original')+'@Referer=',\\n       url: pd(list[j],'a&&href')+ '#immersiveTheme#'\\n  });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"一级module-items\",\"path\":\"module-items\",\"rule\":\"MY_RULE.url.match(/fypage/)[0]\\nvar d = []\\nvar list = pdfa(getResCode(), 'body&&.module-item');\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'strong||a&&Text||title'),\\n        desc: pdfh(list[j], '.module-item-text||.module-item-note&&Text'),\\n        pic_url: pd(list[j], 'img||.lazy&&data-src||data-original||src') + '@Referer=',\\n        url: pd(list[j], 'a&&href') + \\\"#immersiveTheme#\\\"\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级module-tab-item\",\"path\":\"module-tab-item\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\ntry {\\n    var title = pdfa(html, 'body--a&&.tag-link');\\n} catch (e) {\\n    var title = '';\\n}\\nvar T = [];\\nfor (var i in title) {\\n    T.push(pdfh(title[i], 'a&&Text'))\\n}\\n\\nd.push({\\n    title: T.join('  ') + '\\\\n' +\\n        pdfh(html, '.video-info-items,1&&Text')\\n        .split('/').join('  ')\\n        .substring(0, 20) + '\\\\n' +\\n        pdfh(html, '.video-info-items&&Text')\\n        .split('/').join('  ')\\n        .substring(0, 20),\\n    desc: pdfh(html, '.video-info-items,2&&Text'),\\n    img: pd(html, '.lazyload&&data-original||data-src||src'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = 'body&&.module-tab-item'\\nvar 选集 = 'body&&.scroll-box-y||.module-list'\\nvar 线路名 = 'span&&Text'\\nvar 选集列表 = 'body&&a'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索module-search-item\",\"path\":\"module-search-item\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), 'body&&.module-search-item');\\nlog('搜索结果')\\nlog(list)\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'h3&&Text'),\\n        desc: pdfh(list[j], '.video-serial&&Text'),\\n        content: pdfh(list[j], '.video-info-aux&&Text'),\\n        img: pd(list[j], 'img&&data-original||data-src'),\\n        url: pd(list[j], '.video-serial&&href') + '#immersiveTheme#'\\n    });\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"一级item\",\"path\":\"item\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), 'body&&.item');\\nfor (let i in list) {\\n    d.push({\\n        title: pdfh(list[i], 'img&&alt'),\\n        desc: pdfh(list[i], 'p&&Text'),\\n        pic_url: pd(list[i], 'img&&src'),\\n        url: pd(list[i], 'a&&href'),\\n        col_type: 'movie_3'\\n    })\\n}\\nsetResult(d)\"},{\"name\":\"一级data_list\",\"path\":\"data_list\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '#data_list&&li');\\nfor (let i in list) {\\n    d.push({\\n        title: pdfh(list[i], 'a&&title'),\\n        desc: pdfh(list[i], 'em&&Text'),\\n        pic_url: pd(list[i], 'img&&data-src'),\\n        url: pd(list[i], 'a&&href'),\\n        col_type: 'movie_3'\\n    })\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"二级h3\",\"path\":\"h3\",\"rule\":\"var d = [];\\nvar html = getResCode();\\nif (html.indexOf('检测中') != -1) {\\n    html = request(MY_URL + '?btwaf' + html.match(/btwaf(.*?)\\\\\\\"/)[1]);\\n}\\nd.push({\\n    title: pdfh(html, '.data,2&&Text')\\n        .replace('类型：', '')\\n        .replace('地区：', '')\\n        .replace('年份：', ' ')\\n        .substring(0, 18) + '\\\\n' +\\n        pdfh(html, '.data,1&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, '.data&&Text')\\n        .substring(0, 15),\\n    desc: pdfh(html, '.detail-sketch||.data,3||#desc&&Text'),\\n    img: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = 'body&&.stui-pannel:has(.stui-content__playlist)'\\nvar 选集 = 'body&&.stui-content__playlist'\\nvar 线路名 = 'h3&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"一级fed-list-title\",\"path\":\"fed-list-title\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '.fed-list-info&&li');\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], '.fed-list-title&&Text'),\\n       desc: pdfh(list[j], '.fed-text-center&&Text'),\\n       img: pd(list[j], 'a&&data-original')+'@Referer=',\\n       url: pd(list[j], 'a&&href')\\n  });\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"二级myui-content__list\",\"path\":\"myui-content__list\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.data,0&&Text')\\n        .replace('地区：', '  ')\\n        .replace('年份：', '  ') + '\\\\n' +\\n        pdfh(html, '.data,1&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, '.data,2&&Text'),\\n    desc: pdfh(html, '.data,3&&Text'),\\n    pic_url: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = 'body&&.myui-panel-box:has(.myui-content__list)'\\nvar 选集 = 'body&&.myui-content__list'\\nvar 线路名 = 'h3&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类\",\"path\":\"dtfl\",\"rule\":\"// 配置常量\\nconst CONFIG = {\\n    INIT_CATE: Array(20).fill(\\\"0\\\"),\\n    FOLD_DEFAULT: \\\"0\\\",\\n    FOLD_ICONS: {\\n        open: '∨',\\n        close: '∧'\\n    },\\n    COLORS: {\\n        fold: \\\"#FF0000\\\",\\n        unfold: \\\"#1aad19\\\",\\n        category: 分类颜色 || \\\"#12b668\\\"\\n    }\\n};\\n\\n// 获取分类数据\\nfunction getCategories() {\\n    const baseCates = pdfa(html, 大类定位);\\n    return typeof 拼接分类 !== 'undefined' && 拼接分类 \\n        ? baseCates.concat(pdfa(html, 拼接分类))\\n        : baseCates;\\n}\\n\\n// 创建分类按钮\\nfunction createCategoryButton(item, key, index, resetOthers, currentSelected) {\\n    let title = pdfh(item, 分类标题);\\n    \\n    // 安全检查排除变量\\n    if (typeof 排除 !== 'undefined' && 排除) {\\n        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n    }\\n    \\n    const isSelected = key.toString() === currentSelected[index];\\n    const displayTitle = isSelected ? `““””${title.fontcolor(CONFIG.COLORS.category)}` : title;\\n    \\n    return {\\n        title: displayTitle,\\n        url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n            const newCate = params.currentSelected.map((c, i) => \\n                params.resetOthers \\n                    ? (i === params.index ? params.key.toString() : \\\"0\\\")\\n                    : (i === params.index ? params.key.toString() : c)\\n            );\\n            \\n            putMyVar(MY_RULE.title, JSON.stringify(newCate));\\n            putMyVar(MY_RULE.url, input);\\n            refreshPage(true);\\n            return \\\"hiker://empty\\\";\\n        }, { \\n            currentSelected: currentSelected, \\n            index: index, \\n            key: key, \\n            resetOthers: resetOthers \\n        }),\\n        col_type: 'scroll_button',\\n    };\\n}\\n\\n// 创建折叠按钮\\nfunction createFoldButton(currentFoldState) {\\n    const isFolded = currentFoldState === '1';\\n    const icon = isFolded ? CONFIG.FOLD_ICONS.open : CONFIG.FOLD_ICONS.close;\\n    const color = isFolded ? CONFIG.COLORS.fold : CONFIG.COLORS.unfold;\\n    \\n    return {\\n        title: `““””<b>${icon.fontcolor(color)}</b>`,\\n        url: $().lazyRule((f) => {\\n            putMyVar(MY_RULE.group, f === '1' ? '0' : '1');\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, currentFoldState),\\n        col_type: 'scroll_button',\\n    };\\n}\\n\\n// 主函数\\nfunction buildCategoryUI() {\\n    const result = [];\\n    const categories = getCategories();\\n    const foldState = getMyVar(MY_RULE.group, CONFIG.FOLD_DEFAULT);\\n    const currentCate = JSON.parse(getMyVar(MY_RULE.title, JSON.stringify(CONFIG.INIT_CATE)));\\n    \\n    if (parseInt(MY_PAGE) === 1) {\\n        result.push(createFoldButton(foldState));\\n        \\n        categories.forEach((category, index) => {\\n            const subCategories = pdfa(category, 小类定位);\\n            if (index === 0 || foldState === '1') {\\n                subCategories.forEach((item, key) => {\\n                    result.push(createCategoryButton(item, key,index,index === 0,currentCate));\\n                });\\n                result.push({ col_type: \\\"blank_block\\\" });\\n            }\\n        });\\n    }\\n    return result;\\n}\\nsetPreResult(buildCategoryUI());\"},{\"col_type\":\"movie_3\",\"name\":\"函数\",\"path\":\"jxhs\",\"rule\":\"const ff = pt => {\\n    var count = 0x0;\\n    var base = 0x0;\\n    for (var i = 0x0; i < pt.length; i += 0x4) {\\n        count += parseInt(pt[i] + pt[i + 0x1] + pt[i + 0x2] + pt[i + 0x3], 0x10);\\n        count %= 0x400a;\\n    }\\n    base = count % 0xa;\\n    var param = 0x0;\\n    for (var a = 0x0; a < pt.length; a++) {\\n        param += pt.charCodeAt(a) * (a + base);\\n        param %= count;\\n    }\\n    return param + '';\\n}\\n\\n\\nconst tt = s => {\\n    for (var t = 0x195c, i = 0x0, length = sk.length; length > i; ++i) {\\n        t += (t << 0x5) + sk.charAt(i).charCodeAt();\\n    }\\n    return (0x7fffffff & t) + '';\\n}\\n\\nvar ssyz = (img, type) => {\\n    const MAP = {\\n        num: {\\n            'a': '4', 'b': '6', 'd': '0', 'e': '9', 'g': '9',\\n            'i': '1', 'l': '1', 'm': '3', 's': '5', 't': '7',\\n            'o': '0', 'q': '9', 'u': '4', 'z': '2'\\n        },\\n        alpha: {\\n            '4': 'a', '6': 'b', '9': 'q', '1': 'l', '3': 'm',\\n            '5': 's', '7': 't', '0': 'o', '2': 'z'\\n        }\\n    };\\n\\n    const currentMap = MAP[type] || {};\\n    \\n    const ocrResult = request('https://api.nn.ci/ocr/b64/text', {\\n        method: 'POST',\\n        headers: {'Content-Type': 'application/json'},\\n        body: convertBase64Image(img).split(',')[1]\\n    }).split('')\\n    log(ocrResult)\\n    const result = [];\\n    for (let i = 0; i < ocrResult.length; i++) {\\n        let char = ocrResult[i];\\n        result.push(currentMap[char] || char);\\n    }\\n    return result.join('')\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"二级mo-movs-item\",\"path\":\"mo-movs-item\",\"rule\":\"var d = [];\\nvar html = getResCode();\\nd.push({\\n    title: '分类：' + pdfh(html, '.mo-cols-lays&&li,2--span&&Text') +\\n        ' | ' + pdfh(html, '.mo-cols-lays&&li,3--span&&Text') +\\n        ' | ' + pdfh(html, '.mo-cols-lays&&li,4--span&&Text') +\\n        '\\\\n' + pdfh(html, '.mo-cols-lays&&li&&Text')\\n        .substring(0, 15) +\\n        '\\\\n' + pdfh(html, '.mo-cols-lays&&li,1&&Text')\\n        .substring(0, 15),\\n    desc: '更新时间：' + pdfh(html, '.mo-cols-lays&&li,5&&Text').substring(0, 15),\\n    img: pd(html, '.mo-situ-pics&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = 'body&&.mo-movs-btns'\\nvar 选集 = 'body&&.mo-movs-item'\\nvar 线路名 = 'Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"数字验证码\",\"path\":\"yzm\",\"rule\":\"while (/输入验证码|系统安全验证/.test(html)) {\\n    let headers = {\\n        \\\"User-Agent\\\": MOBILE_UA,\\n        \\\"Referer\\\": MY_URL\\n    }\\n    eval(JSON.parse(request('hiker://page/jxhs?rule=模板·Q')).rule);\\n    let vcode = ssyz(MY_HOME + '/index.php/verify/index.html?', 'num');\\n    fetch(MY_HOME + html.match(/\\\\/index.php.*?verify=/)[0] + vcode, {\\n        headers: headers,\\n        method: 'POST'\\n    })\\n    var yz = typeof(true_url) != 'undefined' && true_url != '' ? true_url : MY_URL\\n    log(MY_TYPE)\\n    html = request(yz, {\\n        //   headers: headers\\n    })\\n}\\nif (/频繁操作/.test(html)) {\\n    d.push({\\n    title: '网站搜索时间间隔',\\n    desc: \\\"下拉重试\\\"\\n})\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"二级y-playList\",\"path\":\"y-playList\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode()\\n\\nd.push({\\n    title: pdfh(html, '.module-info-item,3&&Text')\\n        .substring(0, 18) +\\n        '\\\\n' +\\n        pdfh(html, '.module-info-item,1&&Text')\\n        .substring(0, 18) +\\n        '\\\\n' +\\n        pdfh(html, '.module-info-item,4&&Text'),\\n    img: pd(html, '.lazyload&&data-original||src') +\\n        '@Referer=',\\n    url: MY_URL,\\n    desc: pdfh(html, '.module-info-item,5||.module-info-item&&Text'),\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = '#y-playList&&span'\\nvar 选集 = 'body&&.module-play-list'\\nvar 线路名 = 'Text'\\nvar 选集列表 = 'body&&a'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"auto1\",\"path\":\"auto1\",\"rule\":\"// 缓存对象（跨请求持久化）\\r\\nconst templateCache = {\\r\\n    get(pageType) {\\r\\n        return getVar(`cache_${pageType}`);\\r\\n    },\\r\\n    set(pageType, templateName) {\\r\\n        putVar(`cache_${pageType}`, templateName);\\r\\n    },\\r\\n    clear(pageType) {\\r\\n        putVar(`cache_${pageType}`, '');\\r\\n    }\\r\\n};\\r\\n\\r\\n// 1. 定义一级页面规则\\r\\nconst primaryRules = {\\r\\n    \\\"stui-vodlist\\\": {\\r\\n        list: \\\".stui-vodlist&&li\\\",\\r\\n        title: \\\"a&&title\\\",\\r\\n        desc: \\\".pic-text&&Text\\\",\\r\\n        img: \\\".lazyload||a&&data-original\\\",\\r\\n        url: \\\"a&&href\\\"\\r\\n    },\\r\\n    \\\"myui-vodlist\\\": {\\r\\n        list: \\\".myui-vodlist&&li\\\",\\r\\n        title: \\\"h4&&Text\\\",\\r\\n        desc: \\\".pic-tag||.pic-text&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original\\\",\\r\\n        url: \\\"a&&href\\\"\\r\\n    },\\r\\n    \\\"vodlist\\\": {\\r\\n        list: \\\".vodlist&&li\\\",\\r\\n        title: \\\"a&&title\\\",\\r\\n        desc: \\\"a&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original\\\",\\r\\n        url: \\\"a&&href\\\"\\r\\n    },\\r\\n    \\\"pack-ykpack\\\": {\\r\\n        list: \\\"body&&.pack-ykpack\\\",\\r\\n        title: \\\"a&&title\\\",\\r\\n        desc: \\\"span,-1&&Text\\\",\\r\\n        img: \\\".eclazy&&data-original\\\",\\r\\n        url: \\\"a&&href\\\"\\r\\n    },\\r\\n    \\\"module-items\\\": {\\r\\n        list: \\\"body&&.module-item\\\",\\r\\n        title: \\\"strong||a&&Text||title\\\",\\r\\n        desc: \\\".module-item-text||.module-item-note&&Text\\\",\\r\\n        img: \\\"img||.lazy&&data-src||data-original||src\\\",\\r\\n        url: \\\"a&&href\\\"\\r\\n    },\\r\\n    \\\"fed-list-title\\\": {\\r\\n        list: \\\".fed-list-info&&li\\\",\\r\\n        title: \\\".fed-list-title&&Text\\\",\\r\\n        desc: \\\".fed-text-center&&Text\\\",\\r\\n        img: \\\"a&&data-original\\\",\\r\\n        url: \\\"a&&href\\\"\\r\\n    },\\r\\n    \\\"data_list\\\": {\\r\\n        list: \\\"#data_list&&li\\\",\\r\\n        title: \\\"a&&title\\\",\\r\\n        desc: \\\"em&&Text\\\",\\r\\n        img: \\\"img&&data-src\\\",\\r\\n        url: \\\"a&&href\\\"\\r\\n    }\\r\\n};\\r\\n\\r\\n// 2. 创建模板处理函数\\r\\nfunction createPrimaryTemplate(config) {\\r\\n    return {\\r\\n        list: config.list,\\r\\n        getData(item) {\\r\\n            return {\\r\\n                title: pdfh(item, config.title),\\r\\n                desc: config.desc ? pdfh(item, config.desc) : undefined,\\r\\n                img: pd(item, config.img) + \\\"@Referer=\\\",\\r\\n                url: pd(item, config.url) + \\\"#immersiveTheme#\\\"\\r\\n            };\\r\\n        }\\r\\n    };\\r\\n}\\r\\n\\r\\n// 3. 一次性创建所有一级模板\\r\\nconst primaryTemplates = Object.fromEntries(\\r\\n    Object.entries(primaryRules).map(([key, config]) => [key, createPrimaryTemplate(config)])\\r\\n);\\r\\n\\r\\n// 4. 增强的自动匹配函数（整合缓存和自动重试）\\r\\nfunction autoPage(htmlsrc, customTemplate, type) {\\r\\n    const htmlSource = htmlsrc;\\r\\n    const pageType = type || MY_TYPE;\\r\\n    let result = [];\\r\\n    let matchedTemplateName = '';\\r\\n    \\r\\n    // 0. 如果提供了自定义模板，优先处理自定义模板\\r\\n    if (customTemplate && typeof customTemplate === 'object') {\\r\\n        try {\\r\\n            // 创建临时模板实例\\r\\n            const tempTemplate = createPrimaryTemplate(customTemplate);\\r\\n            const customItems = pdfa(htmlSource, tempTemplate.list);\\r\\n            \\r\\n            if (customItems.length > 0) {\\r\\n                result = customItems.map(item => tempTemplate.getData(item));\\r\\n                matchedTemplateName = 'custom-template';\\r\\n                log(`使用自定义模板成功，匹配到 ${customItems.length} 个项目`);\\r\\n            } else {\\r\\n                log(`自定义模板未匹配到任何项目，尝试自动匹配...`);\\r\\n            }\\r\\n        } catch (e) {\\r\\n            log(`自定义模板处理失败: ${e.message}，尝试自动匹配...`);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // 1. 如果自定义模板未提供或未匹配到项目，尝试读取缓存\\r\\n    if (result.length === 0) {\\r\\n        const cachedTemplateName = templateCache.get(pageType);\\r\\n        if (cachedTemplateName) {\\r\\n            try {\\r\\n                const cachedTemplate = primaryTemplates[cachedTemplateName];\\r\\n                const cachedItems = pdfa(htmlSource, cachedTemplate.list);\\r\\n                \\r\\n                if (cachedItems.length > 0) {\\r\\n                    result = cachedItems.map(item => cachedTemplate.getData(item));\\r\\n                    matchedTemplateName = cachedTemplateName;\\r\\n                    log(`使用缓存模板成功: ${matchedTemplateName}`);\\r\\n                } else {\\r\\n                    throw new Error(`缓存模板 ${cachedTemplateName} 无效`);\\r\\n                }\\r\\n            } catch (e) {\\r\\n                log(`缓存模板验证失败: ${e.message}, 开始重新匹配...`);\\r\\n                templateCache.clear(pageType);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // 2. 如果没有从缓存获取结果，遍历所有模板进行匹配\\r\\n    if (result.length === 0) {\\r\\n        log(\\\"开始模板匹配过程...\\\");\\r\\n        \\r\\n        for (let [currentName, config] of Object.entries(primaryRules)) {\\r\\n            try {\\r\\n                let currentItems = pdfa(htmlSource, config.list);\\r\\n                if (currentItems.length > 0) {\\r\\n                    const currentTemplate = createPrimaryTemplate(config);\\r\\n                    result = currentItems.map(item => currentTemplate.getData(item));\\r\\n                    matchedTemplateName = currentName;\\r\\n                    \\r\\n                    // 缓存成功匹配的模板\\r\\n                    templateCache.set(pageType, matchedTemplateName);\\r\\n                    log(`匹配并缓存一级模板: ${matchedTemplateName}`);\\r\\n                    break;\\r\\n                }\\r\\n            } catch (e) {\\r\\n                log(`尝试模板 ${currentName} 失败: ${e.message}`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // 3. 处理结果\\r\\n    if (result.length > 0) {\\r\\n        setResult(typeof d !== 'undefined'? d.concat(result) : result);\\r\\n    } else {\\r\\n        log(\\\"没有匹配到任何有效模板\\\");\\r\\n        setResult([]);\\r\\n    }\\r\\n    \\r\\n    return {\\r\\n        template: matchedTemplateName,\\r\\n        items: result\\r\\n    };\\r\\n}\\r\\n// 5. 导出接口\\r\\n$.exports = {\\r\\n    autoPage: autoPage,\\r\\n    clearCache: (pageType) => templateCache.clear(pageType || MY_TYPE)\\r\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"auto2\",\"path\":\"auto2\",\"rule\":\"const secondaryTemplates = {\\r\\n    \\\".b\\\": {\\r\\n        title: \\\".stui-content__detail--h1&&Text\\\",\\r\\n        desc: \\\".desc||.detail-content&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\"body&&.b\\\",\\r\\n        选集: \\\"body&&.b\\\",\\r\\n        线路名: \\\"h3&&Text\\\",\\r\\n        选集列表: \\\"ul&&li\\\"\\r\\n    },\\r\\n    \\\"nav-tabs\\\": {\\r\\n        title: \\\".data&&Text\\\",\\r\\n        desc: \\\".data,3&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\".nav-tabs&&a\\\",\\r\\n        选集: \\\".tab-content&&.myui-content__list||.stui-content__playlist\\\",\\r\\n        线路名: \\\"Text\\\",\\r\\n        选集列表: \\\"ul&&li\\\"\\r\\n    },\\r\\n    \\\"mo-play-load\\\": {\\r\\n        title: \\\".video-info-items,2&&Text\\\",\\r\\n        img: \\\".lazyload&&data-src\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\"body&&.module-tab-content&&.module-tab-item\\\",\\r\\n        选集: \\\"body&&.sort-item\\\",\\r\\n        线路名: \\\"span&&Text\\\",\\r\\n        选集列表: \\\"body&&a\\\"\\r\\n    },\\r\\n    \\\"nav-tabs1\\\": {\\r\\n        title: \\\"p,1&&Text\\\",\\r\\n        desc: \\\"p,2&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\".nav-tabs&&a\\\",\\r\\n        选集: \\\"body&&.stui-content__playlist\\\",\\r\\n        线路名: \\\"a&&Text\\\",\\r\\n        选集列表: \\\"ul&&li\\\"\\r\\n    },\\r\\n    \\\"play_source_tab\\\": {\\r\\n        title: \\\".remarks&&Text\\\",\\r\\n        desc: \\\".desc_txt&&Text\\\",\\r\\n        img: \\\".img-cover||.vod-detail-bjcover||.vod-detail-bj&&src\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\".play_source_tab&&a\\\",\\r\\n        选集: \\\"body&&.player_list||#playlistbox||#playsx\\\",\\r\\n        线路名: \\\"a&&Text\\\",\\r\\n        选集列表: \\\"ul&&li\\\"\\r\\n    },\\r\\n    \\\"fed-play-item\\\": {\\r\\n        title: \\\"dd&&li,3&&Text\\\",\\r\\n        desc: \\\"dd&&li,6&&Text\\\",\\r\\n        img: \\\".fed-lazy&&data-original\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\"body&&.fed-drop-btns\\\",\\r\\n        选集: \\\"body&&.fed-play-item\\\",\\r\\n        线路名: \\\"a&&Text\\\",\\r\\n        选集列表: \\\"body&&.fed-btns-info\\\"\\r\\n    },\\r\\n    \\\"module-tab-item\\\": {\\r\\n        title: \\\".video-info-items,1&&Text\\\",\\r\\n        desc: \\\".video-info-items,2&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original||data-src||src\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\"body&&.module-tab-item\\\",\\r\\n        选集: \\\"body&&.scroll-box-y||.module-list\\\",\\r\\n        线路名: \\\"span&&Text\\\",\\r\\n        选集列表: \\\"body&&a\\\"\\r\\n    },\\r\\n    \\\"h3\\\": {\\r\\n        title: \\\".data,2&&Text\\\",\\r\\n        desc: \\\".detail-sketch||.data,3||#desc&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\"body&&.stui-pannel:has(.stui-content__playlist)\\\",\\r\\n        选集: \\\"body&&.stui-content__playlist\\\",\\r\\n        线路名: \\\"h3&&Text\\\",\\r\\n        选集列表: \\\"ul&&li\\\"\\r\\n    },\\r\\n    \\\"myui-content__list\\\": {\\r\\n        title: (html) =>\\r\\n                pdfh(html, '.data,0&&Text')\\r\\n                .replace('地区：', '  ')\\r\\n                .replace('年份：', '  ') + '\\\\n' +\\r\\n                pdfh(html, '.data,1&&Text').substring(0, 15) + '\\\\n' +\\r\\n                pdfh(html, '.data,2&&Text')\\r\\n        ,\\r\\n        desc: \\\".data,3&&Text\\\",\\r\\n        img: \\\".lazyload&&data-original\\\",\\r\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\r\\n        线路: \\\"body&&.myui-panel-box:has(.myui-content__list)\\\",\\r\\n        选集: \\\"body&&.myui-content__list\\\",\\r\\n        线路名: \\\"h3&&Text\\\",\\r\\n        选集列表: \\\"ul&&li\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\n// 创建缓存管理器\\r\\nconst templateCache = {\\r\\n    get: () => {\\r\\n        const cacheKey = `template_${md5(MY_HOME)}`;\\r\\n        return getMyVar(cacheKey);\\r\\n    },\\r\\n    set: (templateName) => {\\r\\n        const cacheKey = `template_${md5(MY_HOME)}`;\\r\\n        putMyVar(cacheKey, templateName);\\r\\n        log(`缓存模板: ${templateName} for ${MY_HOME}`);\\r\\n    },\\r\\n    clear: () => {\\r\\n        const cacheKey = `template_${md5(MY_HOME)}`;\\r\\n        removeMyVar(cacheKey);\\r\\n        log(`清除模板缓存: ${MY_HOME}`);\\r\\n    }\\r\\n};\\r\\n\\r\\nconst autoSecondaryPage = (htmlsrc, lazy) => {\\r\\n    if (typeof lazy === 'undefined') lazy = \\\"\\\";\\r\\n    const htmlSource = htmlsrc;\\r\\n    \\r\\n    // 尝试从缓存获取模板\\r\\n    const cachedTemplate = templateCache.get();\\r\\n    if (cachedTemplate && secondaryTemplates[cachedTemplate]) {\\r\\n        log(`使用缓存模板: ${cachedTemplate}`);\\r\\n        try {\\r\\n            let config = secondaryTemplates[cachedTemplate];\\r\\n            if (processTemplate(config, htmlSource, lazy)) {\\r\\n                return;\\r\\n            } else {\\r\\n                templateCache.clear();\\r\\n            }\\r\\n        } catch (e) {\\r\\n            log(`缓存模板处理失败: ${e.message}`);\\r\\n            templateCache.clear();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // 没有缓存或缓存无效，开始匹配模板\\r\\n    for (var templateName in secondaryTemplates) {\\r\\n        log(`尝试模板: ${templateName}`);\\r\\n        try {\\r\\n            let config = secondaryTemplates[templateName];\\r\\n            if (processTemplate(config, htmlSource, lazy)) {\\r\\n                // 匹配成功，缓存模板名称\\r\\n                templateCache.set(templateName);\\r\\n                return;\\r\\n            }\\r\\n        } catch (e) {\\r\\n            log(\\\"尝试二级模板 \\\" + templateName + \\\" 失败: \\\" + e.message);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    log(\\\"没有匹配到任何二级模板\\\");\\r\\n    setResult([]);\\r\\n}\\r\\n\\r\\n// 提取模板处理逻辑到单独函数\\r\\nconst processTemplate = (config, htmlSource, lazy) => {\\r\\n    // 获取线路元素\\r\\n    var items = pdfa(htmlSource, config.线路);\\r\\n    log(`找到线路数量: ${items.length}`);\\r\\n    \\r\\n    if (items.length > 0) {  \\r\\n        // 处理线路和选集\\r\\n        var result = processLinesAndEpisodes(\\r\\n            htmlSource, \\r\\n            config.线路, \\r\\n            config.线路名, \\r\\n            config.选集, \\r\\n            config.选集列表,\\r\\n            config.排除\\r\\n        );\\r\\n        var tabs = result.tabs;\\r\\n        var lists = result.lists;\\r\\n        \\r\\n     //   log(`解析得到线路名: ${tabs.join(\\\", \\\")}`);\\r\\n        \\r\\n        // 检查线路名是否包含无效关键词\\r\\n        if (tabs.length > 0) {\\r\\n            const excludeKeywords = [\\\"主演\\\", \\\"类型\\\", \\\"年份\\\", \\\"地区\\\", \\\"语言\\\", \\\"导演\\\", \\\"更新\\\", \\\"状态\\\", \\\"年代\\\"];\\r\\n            let hasInvalidLineName = tabs.some(tabName => \\r\\n                excludeKeywords.some(keyword => tabName.includes(keyword))\\r\\n            );\\r\\n            \\r\\n            if (hasInvalidLineName) {\\r\\n                log(`线路名包含无效关键词: ${tabs.join(\\\", \\\")}`);\\r\\n                throw new Error(`线路名包含无效关键词: ${tabs.join(\\\", \\\")}`);\\r\\n            }\\r\\n        } else {\\r\\n            log(\\\"没有解析到有效的线路名\\\");\\r\\n        }\\r\\n        \\r\\n        // 检查整个模板是否有有效选集\\r\\n        let hasValidList = false;\\r\\n        for (let i = 0; i < lists.length; i++) {\\r\\n            if (lists[i] && lists[i].length > 0) {\\r\\n                hasValidList = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 如果整个模板都没有有效选集，跳过这个模板\\r\\n        if (!hasValidList) {\\r\\n            log(\\\"所有线路的选集列表都为空\\\");\\r\\n            throw new Error(\\\"整个模板的选集列表都为空\\\");\\r\\n        }\\r\\n        \\r\\n     //   log(\\\"模板有效性检查通过，开始创建详情页...\\\");\\r\\n\\r\\n        // 创建详情项\\r\\n        var d = [{\\r\\n            title: ($.type(config.title) === 'function' ? config.title(htmlSource) : pdfh(htmlSource, config.title)) || '未获取到标题',\\r\\n            desc: pdfh(htmlSource, config.desc) || '无',\\r\\n            img: pd(htmlSource, config.img) || \\\"\\\",\\r\\n            url: MY_URL,\\r\\n            col_type: config.col_type || \\\"movie_1\\\"\\r\\n        }]; \\r\\n        \\r\\n        // 确保lists被正确存储\\r\\n        storage0.putMyVar(\\\"lists\\\", lists);\\r\\n    \\r\\n        // 添加排序按钮\\r\\n        d.push(createSortButton(MY_URL, tabs, lists, d[0], lazy));\\r\\n        \\r\\n        // 添加线路切换按钮\\r\\n        if (tabs.length > 0) {\\r\\n            var lineButtons = createLineButtons(MY_URL, tabs, lists, lazy);\\r\\n            for (var i = 0; i < lineButtons.length; i++) {\\r\\n                d.push(lineButtons[i]);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 添加选集列表\\r\\n        var episodes = createEpisodeList(MY_URL, lists, lazy);\\r\\n        for (var j = 0; j < episodes.length; j++) {\\r\\n            d.push(episodes[j]);\\r\\n        }\\r\\n        \\r\\n        // 设置更新集数规则\\r\\n        setLastEpisodeRule(config.选集, config.选集列表);\\r\\n        \\r\\n        // 添加底部空白块\\r\\n        d.push(createFooterBlock(MY_URL));\\r\\n        \\r\\n        setResult(d);\\r\\n        log(\\\"匹配二级模板成功\\\");\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n\\r\\nconst createLineButtons = (MY_URL, tabs, lists, lazy) => {\\r\\n    // 获取当前线路并确保有效\\r\\n    let currentLine = parseInt(getMyVar(MY_URL, '0')) || 0;\\r\\n    currentLine = Math.min(currentLine, tabs.length - 1);\\r\\n    \\r\\n    return tabs.map((tabName, id) => ({\\r\\n        title: currentLine == id ? `““${tabName}””` : tabName,\\r\\n        url: $(\\\"#noLoading#\\\").lazyRule((线路列表, lazy, id, MY_URL) => {\\r\\n            const lists = storage0.getMyVar(\\\"lists\\\");\\r\\n            // 确保线路ID有效\\r\\n            const validId = Math.min(id, lists.length - 1);\\r\\n            \\r\\n            if (!lists[validId] || lists[validId].length === 0) {\\r\\n                log(`选集列表不存在或为空，线路ID: ${validId}`);\\r\\n                // 显示错误提示但不中断操作\\r\\n                updateItem({\\r\\n                    title: `““${tabName}(无选集)””`,\\r\\n                    extra: { id: `${MY_URL}_线路${validId}` }\\r\\n                });\\r\\n                return \\\"hiker://empty\\\";\\r\\n            }\\r\\n            \\r\\n            // 更新所有线路按钮状态\\r\\n            线路列表.forEach((name, xid) => {\\r\\n                try {\\r\\n                    updateItem({\\r\\n                        title: validId == xid ? `““${name}””` : name,\\r\\n                        extra: { id: `${MY_URL}_线路${xid}` }\\r\\n                    });\\r\\n                } catch (e) {\\r\\n                    log(\\\"更新线路按钮错误: \\\" + e.message);\\r\\n                }\\r\\n            });\\r\\n            \\r\\n            putMyVar(MY_URL, validId.toString());\\r\\n            let chapters = lists[validId];\\r\\n            \\r\\n            // 检查排序状态\\r\\n            const sortOrder = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\r\\n            if (sortOrder == '#FF0000\\\">倒序') {\\r\\n                chapters = chapters.slice().reverse();\\r\\n            }\\r\\n            \\r\\n            // 生成选集项\\r\\n            let chapterItems = chapters.map(data => ({\\r\\n                title: pdfh(data, 'a&&Text'),\\r\\n                url: pd(data, 'a&&href') + lazy,\\r\\n                col_type: chapters.length > 3 ? 'text_4' : 'text_2',\\r\\n                extra: { \\r\\n                    cls: MY_URL + \\\"_选集\\\", \\r\\n                    id: pd(data, 'a&&href') \\r\\n                }\\r\\n            }));\\r\\n            \\r\\n            // 先删除旧选集 - 修复了这里的try-catch语法错误\\r\\n            try {\\r\\n                deleteItemByCls(MY_URL + \\\"_选集\\\");\\r\\n            } catch (e) {\\r\\n                log(\\\"删除旧选集错误: \\\" + e.message);\\r\\n            }\\r\\n            \\r\\n            // 添加新选集\\r\\n            try {\\r\\n                addItemBefore(MY_URL + \\\"footer\\\", chapterItems);\\r\\n            } catch (e) {\\r\\n                log(\\\"添加选集错误: \\\" + e.message);\\r\\n            }\\r\\n            \\r\\n            return \\\"hiker://empty\\\";\\r\\n        }, tabs, lazy, id, MY_URL),\\r\\n        col_type: 'flex_button',\\r\\n        extra: { id: `${MY_URL}_线路${id}` }\\r\\n    }));\\r\\n}\\r\\n\\r\\n// 优化选集匹配逻辑\\r\\nconst processLinesAndEpisodes = (html, 线路, 线路名, 选集, 选集列表, 排除) => {\\r\\n    // 获取线路标签\\r\\n    const lineElements = pdfa(html, 线路);\\r\\n  //  log(`找到线路元素数量: ${lineElements.length}`);\\r\\n    \\r\\n    const tabs = [];\\r\\n    const lists = [];\\r\\n    \\r\\n    // 提取有效的线路名\\r\\n    for (let i = 0; i < lineElements.length; i++) {\\r\\n        let tabText = pdfh(lineElements[i], 线路名);\\r\\n        if (tabText) {\\r\\n            tabs.push((typeof 排除 !== 'undefined' && 排除) ? \\r\\n                tabText.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\") : \\r\\n                tabText);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // 获取所有选集区域\\r\\n    const allEpisodeSections = pdfa(html, 选集);\\r\\n  //  log(`找到选集区域数量: ${allEpisodeSections.length}`);\\r\\n    \\r\\n    // 提取有效的选集列表\\r\\n    for (let i = 0; i < lineElements.length; i++) {\\r\\n        let episodes = [];\\r\\n        \\r\\n        // 尝试按顺序匹配选集区域\\r\\n        if (i < allEpisodeSections.length) {\\r\\n            episodes = pdfa(allEpisodeSections[i], 选集列表);\\r\\n        }\\r\\n        \\r\\n        // 如果按顺序未找到，尝试通过ID匹配\\r\\n        if (episodes.length === 0) {\\r\\n            const lineId = pdfh(lineElements[i], 'a&&id') || \\r\\n                          pdfh(lineElements[i], 'a&&data-id') ||\\r\\n                          pdfh(lineElements[i], 'div&&id') || \\r\\n                          pdfh(lineElements[i], 'div&&data-id');\\r\\n            \\r\\n            if (lineId) {\\r\\n                const matchedSection = allEpisodeSections.find(section => \\r\\n                    pdfh(section, 'div&&id') === lineId || \\r\\n                    pdfh(section, 'div&&data-id') === lineId\\r\\n                );\\r\\n                \\r\\n                if (matchedSection) {\\r\\n                    episodes = pdfa(matchedSection, 选集列表);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 如果仍未找到，尝试全局匹配\\r\\n        if (episodes.length === 0) {\\r\\n            episodes = pdfa(html, 选集列表);\\r\\n        }\\r\\n        \\r\\n        lists.push(episodes);\\r\\n    //    log(`线路 ${i+1} 找到选集数量: ${episodes.length}`);\\r\\n    }\\r\\n    \\r\\n    // 添加清理监听器\\r\\n    addListener(\\\"onClose\\\", $.toString(() => {\\r\\n        clearMyVar(\\\"lists\\\");\\r\\n    }));\\r\\n    \\r\\n    // 存储选集列表\\r\\n    storage0.putMyVar(\\\"lists\\\", lists);\\r\\n    \\r\\n    return { tabs, lists };\\r\\n}\\r\\n\\r\\nconst createSortButton = (MY_URL, tabs, lists, d, lazy) => {\\r\\n    const TV推送 = (tabs, lists, d) => $.toString((tabs, lists, d) => {\\r\\n        var 推送 = {\\r\\n            \\\"name\\\": getPageTitle(),\\r\\n            \\\"content\\\": d.desc,\\r\\n            \\\"pic\\\": d.img || d.pic_url,\\r\\n            \\\"from\\\": tabs.join('$$$'),\\r\\n            \\\"url\\\": storage0.getMyVar(\\\"lists\\\").map(li => li.map(li1 => pdfh(li1, 'Text') + '$' + pd(li1, 'a&&href')).join('#')).join('$$$')\\r\\n        };\\r\\n        return \\\"hiker://page/push?rule=XYQ推送&pushurl=\\\" + encodeURIComponent(JSON.stringify(推送));\\r\\n    }, tabs, lists, d);\\r\\n\\r\\n    return {\\r\\n        title: '““””<b><span style=\\\"color: ' + getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序') + '</span></b>',\\r\\n        url: $(\\\"#noLoading#\\\").lazyRule((tabs, lazy, d, TV推送, MY_URL) => {\\r\\n            const lists = storage0.getMyVar(\\\"lists\\\");\\r\\n            const currentLine = parseInt(getMyVar(MY_URL, '0')) || 0;\\r\\n            const sortOrder = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\r\\n            const newLabel = sortOrder == '#FF0000\\\">倒序' ? \\r\\n                '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\r\\n            \\r\\n            // 更新排序按钮显示\\r\\n            updateItem({\\r\\n                extra: { \\r\\n                    id: MY_URL + \\\"_排序\\\",\\r\\n                    longClick: [{ title: \\\"TVbox推送\\\", js: TV推送(tabs, lists, d) }] \\r\\n                },\\r\\n                title: '““””<b><span style=\\\"color: ' + newLabel + '</span></b>'\\r\\n            });\\r\\n            \\r\\n            // 获取当前线路的选集并处理排序\\r\\n            let chapters = lists[currentLine];\\r\\n            if (!chapters) {\\r\\n                log(\\\"当前线路选集不存在: \\\" + currentLine);\\r\\n                return \\\"hiker://empty\\\";\\r\\n            }\\r\\n            \\r\\n            // 创建副本再反转以避免修改原数组\\r\\n            chapters = chapters.slice();\\r\\n            if (sortOrder == '#1aad19\\\">正序') {\\r\\n                chapters.reverse();\\r\\n            }\\r\\n            \\r\\n            // 生成选集项\\r\\n            let chapterItems = chapters.map(data => ({\\r\\n                title: pdfh(data, 'a&&Text'),\\r\\n                url: pd(data, 'a&&href') + lazy,\\r\\n                col_type: chapters.length > 3 ? 'text_4' : 'text_2',\\r\\n                extra: { cls: MY_URL + \\\"_选集\\\", id: pd(data, 'a&&href') }\\r\\n            }));\\r\\n            \\r\\n            // 先删除旧选集\\r\\n            try {\\r\\n                deleteItemByCls(MY_URL + \\\"_选集\\\");\\r\\n            } catch (e) {\\r\\n                log(\\\"删除旧选集错误: \\\" + e.message);\\r\\n            }\\r\\n            \\r\\n            // 添加新选集\\r\\n            try {\\r\\n                addItemBefore(MY_URL + \\\"footer\\\", chapterItems);\\r\\n            } catch (e) {\\r\\n                log(\\\"添加选集错误: \\\" + e.message);\\r\\n            }\\r\\n            \\r\\n            // 保存新的排序状态\\r\\n            putMyVar(MY_URL + \\\"章节排序\\\", newLabel);\\r\\n            return \\\"hiker://empty\\\";\\r\\n        }, tabs, lazy, d[0], TV推送, MY_URL),\\r\\n        col_type: 'flex_button',\\r\\n        extra: { \\r\\n            id: MY_URL + \\\"_排序\\\",\\r\\n            longClick: [{ title: \\\"TVbox推送\\\", js: TV推送(tabs, lists, d[0]) }] \\r\\n        }\\r\\n    };\\r\\n}\\r\\n\\r\\nconst createEpisodeList = (MY_URL, lists, lazy) => {\\r\\n    let currentLine = parseInt(getMyVar(MY_URL, '0')) || 0;\\r\\n    \\r\\n    // 确保当前线路有效\\r\\n    currentLine = Math.min(currentLine, lists.length - 1);\\r\\n    if (!lists[currentLine] || lists[currentLine].length === 0) {\\r\\n        log(`当前线路 ${currentLine} 没有选集`);\\r\\n        return [];\\r\\n    }\\r\\n    \\r\\n    const sortOrder = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\r\\n    let currentChapters = lists[currentLine].slice(); // 创建副本\\r\\n    \\r\\n    if (sortOrder == '#FF0000\\\">倒序') {\\r\\n        currentChapters.reverse();\\r\\n    }\\r\\n    \\r\\n    return currentChapters.map(data => ({\\r\\n        title: pdfh(data, 'a&&Text'),\\r\\n        url: pd(data, 'a&&href') + lazy,\\r\\n        col_type: currentChapters.length > 3 ? 'text_4' : 'text_2',\\r\\n        extra: { \\r\\n            cls: MY_URL + \\\"_选集\\\", \\r\\n            id: pd(data, 'a&&href') \\r\\n        }\\r\\n    }));\\r\\n}\\r\\n\\r\\nconst setLastEpisodeRule = (选集, 选集列表) => {\\r\\n    setLastChapterRule('js:' + $.toString((选集, 选集列表) => \\r\\n        setResult('更新至: 第' + \\r\\n            pdfa(getResCode(), 选集).map(d => \\r\\n                pdfa(d, 选集列表).length\\r\\n            ).sort((a,b)=>b-a)[0] + \\\"集\\\")\\r\\n    , 选集, 选集列表));\\r\\n}\\r\\n\\r\\nconst createFooterBlock = (MY_URL) => {\\r\\n    return { \\r\\n        col_type: \\\"big_blank_block\\\", \\r\\n        extra: { id: MY_URL + \\\"footer\\\" } \\r\\n    };\\r\\n}\\r\\n\\r\\n$.exports = { autoSecondaryPage }\"},{\"col_type\":\"movie_3\",\"name\":\"getappapi\",\"path\":\"getappapi\",\"rule\":\"const AES = (str, type) => {\\r\\n  eval(getCryptoJS());\\r\\n  const key = CryptoJS.enc.Utf8.parse(config.key);\\r\\n  const cfg = {\\r\\n    iv: key,\\r\\n    mode: CryptoJS.mode.CBC,\\r\\n    padding: CryptoJS.pad.Pkcs7,\\r\\n  };\\r\\n  return type\\r\\n    ? CryptoJS.AES.encrypt(str, key, cfg).toString()\\r\\n    : CryptoJS.AES.decrypt(str, key, cfg).toString(CryptoJS.enc.Utf8);\\r\\n}\\r\\n\\r\\nlet 一级 = () => {\\r\\n    let tabs = storage0.getMyVar('tabs');\\r\\n    if (!tabs) {\\r\\n      if (!storage0.getMyVar('title')) {\\r\\n        let initurl = config.init?`${config.host}initV120`:`${config.host}initV119`\\r\\n        let init = JSON.parse(AES(JSON.parse(post(initurl)).data))\\r\\n          .type_list.map((item) => {\\r\\n            const newItem = Object.assign({}, item);\\r\\n            delete newItem.recommend_list;\\r\\n            delete newItem.type_extend;\\r\\n            return newItem;\\r\\n          })\\r\\n          .slice(1);\\r\\n        storage0.putMyVar('title', init);\\r\\n      }\\r\\n      const tabsData = storage0.getMyVar('title');\\r\\n      const namesAndIds = tabsData.map(t => t.type_name);\\r\\n      tabs = [\\r\\n        {\\r\\n          title: 'type_id',\\r\\n          names: namesAndIds,\\r\\n          ids: tabsData.map(t => t.type_id.toString()),\\r\\n          arr: tabsData.map(tabItem =>\\r\\n            tabItem.filter_type_list.map(({ list, name }) => ({\\r\\n              ids: list,\\r\\n              names: list,\\r\\n              title: name,\\r\\n            }))\\r\\n          ),\\r\\n        },\\r\\n      ];\\r\\n      storage0.putMyVar('tabs', tabs);\\r\\n    }\\r\\n    let d = [];\\r\\n    const getRangeColors = '#' +  Math.floor(Math.random() * 0x1000000).toString(16).padStart(6, '0');\\r\\n    let setTabs = (tabs) => {\\r\\n      if (!tabs) return;\\r\\n      for (let data of tabs) {\\r\\n        getMyVar(data.title) || putMyVar(data.title, data.ids[0]);\\r\\n        for (let i = 0; i < data.names.length; i++) {\\r\\n          d.push({\\r\\n            title:\\r\\n              getMyVar(data.title) === data.ids[i]\\r\\n                ? `““””<font color=\\\"${getRangeColors}\\\"><b>${data.names[i]}</b></font>`\\r\\n                : data.names[i],\\r\\n            url: $('#noLoading#').lazyRule((title, id, data) => {\\r\\n                clearMyVar(MY_RULE.title);\\r\\n                if (data.arr) {\\r\\n                  ['area', 'year', 'lang', 'class'].forEach(clearMyVar);\\r\\n                }\\r\\n                if (getMyVar(title) !== id) {\\r\\n                  putMyVar(title, id);\\r\\n                  refreshPage();\\r\\n                }\\r\\n                refreshPage();\\r\\n                return 'hiker://empty';\\r\\n              },\\r\\n              data.title,data.ids[i],data),\\r\\n            col_type: 'scroll_button',\\r\\n          });\\r\\n        }\\r\\n        d.push({\\r\\n          col_type: 'blank_block',\\r\\n        });\\r\\n        if (data.arr) {\\r\\n          setTabs(data.arr[data.ids.indexOf(getMyVar(data.title))]);\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n    const fold = getMyVar('header.group', '0');\\r\\n    d.push({\\r\\n      title:\\r\\n        fold === '1' ? '““””<b>' + '∨'.fontcolor('#FF0000') + '</b>' : '““””<b>' + '∧'.fontcolor('#1aad19') + '</b>',\\r\\n      url: $('#noLoading#').lazyRule((fold) => {\\r\\n        putMyVar('header.group', fold === '1' ? '0' : '1');\\r\\n        ['area', 'year', 'lang', 'class'].forEach(clearMyVar);\\r\\n        refreshPage(false);\\r\\n        return 'hiker://empty';\\r\\n      }, fold),\\r\\n      col_type: 'scroll_button',\\r\\n    });\\r\\n    setTabs(tabs);\\r\\n    let blankIndex = d.findIndex(item => item.col_type === 'blank_block');\\r\\nblankIndex = blankIndex !== -1 ? blankIndex : 6\\r\\n    storage0.putMyVar('items', fold === '0' ? d.slice(0, blankIndex) : d);\\r\\n    if (MY_PAGE === 1) setPreResult(storage0.getMyVar('items'));\\r\\n    MY_URL = buildUrl(`${config.host}typeFilterVodList`, {\\r\\n      area: getMyVar('area', '全部'),\\r\\n      year: getMyVar('year', '全部'),\\r\\n      type_id: getMyVar('type_id', '1'),\\r\\n      page: MY_PAGE,\\r\\n      sort: getMyVar('sort', '最新'),\\r\\n      lang: getMyVar('lang', '全部'),\\r\\n      class: getMyVar('class', '全部'),\\r\\n    });\\r\\n    setResult(\\r\\n      JSON.parse(AES(JSON.parse(request(MY_URL)).data)).recommend_list.map((item) => ({\\r\\n        title: item.vod_name,\\r\\n        img: item.vod_pic,\\r\\n        desc: item.vod_remarks,\\r\\n        url: `${config.host}vodDetail#immersiveTheme#?vod_id=${item.vod_id}`,\\r\\n      }))\\r\\n    );\\r\\n  },\\r\\n  二级 = (解析) => {\\r\\n    var d = [];\\r\\n    var json = JSON.parse(AES(JSON.parse(getResCode()).data));\\r\\n    d.push({\\r\\n      title: json.vod.vod_class,\\r\\n      img: json.vod.vod_pic,\\r\\n      desc: json.vod.vod_content,\\r\\n      col_type: 'movie_1_vertical_pic_blur',\\r\\n    });\\r\\n    \\r\\n    lazy = 解析 ? 解析 : (json) => $('').lazyRule((json,AES) => {\\r\\n      log(json)\\r\\n      let url\\r\\n      if (json.url === json.parse_api_url) {\\r\\n        url = json.url} else \\r\\n        if (/url=/.test(json.parse_api_url)) {\\r\\n          url =  JSON.parse(request(json.parse_api_url)).url\\r\\n          }else {\\r\\n            try {\\r\\n              json = post(config.host + 'vodParse', {\\r\\n                body: {\\r\\n                  parse_api: json.parse_api_url.slice(0, 32),\\r\\n                  url: AES(json.url, true),\\r\\n                  token: json.token }})\\r\\n                  json = JSON.parse(JSON.parse(AES(JSON.parse(json).data)).json);\\r\\n                  log(json)\\r\\n                  url = json.url\\r\\n                  } catch {\\r\\n                    return 'toast://接口异常，查看日志，如果有播放地址播不出联系我修复';\\r\\n                    }\\r\\n                }\\r\\n      return url + '#isVideo=true#'\\r\\n  }, json,AES)\\r\\n    var tabs = json.vod_play_list.map(data => data.player_info.show);\\r\\n    var lists = json.vod_play_list.map(data => data.urls);\\r\\n    addListener('onClose', $.toString(() => \\r\\n    clearMyVar('lists')\\r\\n    ))\\r\\n    storage0.putMyVar('lists', lists);\\r\\n    const currentLine = getMyVar(MY_URL, '0');\\r\\n    var sortOrder = getMyVar(MY_URL + '章节排序', '#1aad19\\\">正序');\\r\\n    var sortTitle = '““””<b><span style=\\\"color:排序</span></b>';\\r\\n    const TV推送 = (tabs, lists, d) => $.toString((tabs, d) => {\\r\\n          var 推送 = {\\r\\n            name: getPageTitle(),\\r\\n            content: d.desc,\\r\\n            pic: d.img || d.pic_url,\\r\\n            from: tabs.join('$$$'),\\r\\n            url: storage0.getMyVar('lists').map((li) => li.map((li1) => pdfh(li1, 'Text') + '$' + pd(li1, 'a&&href')).join('#')).join('$$$'),\\r\\n          }\\r\\n          return 'hiker://page/push?rule=XYQ推送&pushurl=' + encodeURIComponent(JSON.stringify(推送));\\r\\n        }, tabs, lists, d )\\r\\n    d.push({\\r\\n      title: '““””<b><span style=\\\"color: ' + sortOrder + '</span></b>',\\r\\n      url: $('#noLoading#').lazyRule((tabs, sortTitle, lazy, d, TV推送,AES) => {\\r\\n          globalThis.AES=AES\\r\\n          const lists = storage0.getMyVar('lists');\\r\\n          const currentLine = getMyVar(MY_URL, '0');\\r\\n          const sortOrder = getMyVar(MY_URL + '章节排序', '#1aad19\\\">正序');\\r\\n          const newLabel = sortOrder == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\r\\n          updateItem({\\r\\n            extra: {\\r\\n              id: MY_URL + '_排序',\\r\\n              longClick: [{ title: 'TVbox推送', js: TV推送(tabs, lists, d) }],\\r\\n            },\\r\\n            title: sortTitle.replace('排序', newLabel),\\r\\n          });\\r\\n          let chapters = lists[currentLine];\\r\\n          if (sortOrder == '#1aad19\\\">正序') {\\r\\n            chapters.reverse();\\r\\n          }\\r\\n          let chapterItems = chapters.map((data) => ({\\r\\n            title: data.name,\\r\\n            url: lazy(data),\\r\\n            col_type: chapters.length > 3 ? 'text_4' : 'text_2',\\r\\n            extra: { cls: MY_URL + '_选集', id: data.parse_api_url },\\r\\n          }));\\r\\n          deleteItemByCls(MY_URL + '_选集');\\r\\n          addItemBefore(MY_URL + 'footer', chapterItems);\\r\\n          putMyVar(MY_URL + '章节排序', newLabel);\\r\\n          return 'hiker://empty';\\r\\n        },tabs,sortTitle,lazy,d[0],TV推送,AES),\\r\\n      col_type: 'scroll_button',\\r\\n      extra: {\\r\\n        id: MY_URL + '_排序',\\r\\n        longClick: [{ title: 'TVbox推送', js: TV推送(tabs, lists, d[0]) }],\\r\\n      },\\r\\n    });\\r\\n\\r\\n    tabs.forEach((tabName, id) => {\\r\\n      d.push({\\r\\n        title: currentLine == id ? `““${tabName}””` : tabName,\\r\\n        url: $('#noLoading#').lazyRule((线路列表, lazy, id,AES) => {\\r\\n            globalThis.AES=AES\\r\\n            const lists = storage0.getMyVar('lists');\\r\\n            线路列表.forEach((name, xid) =>\\r\\n              updateItem({\\r\\n                title: id == xid ? `““${name}””` : name,\\r\\n                extra: { id: `${MY_URL}_线路${xid}` },\\r\\n              })\\r\\n            );\\r\\n            putMyVar(MY_URL, id);\\r\\n            let chapters = lists[getMyVar(MY_URL, '0')];\\r\\n            if (getMyVar(MY_URL + '章节排序', '#1aad19\\\">正序') == '#FF0000\\\">倒序') {\\r\\n              chapters.reverse();\\r\\n            }\\r\\n            let chapterItems = chapters.map(data => ({\\r\\n              title: data.name,\\r\\n              url: lazy(data),\\r\\n              col_type: chapters.length > 3 ? 'text_4' : 'text_2',\\r\\n              extra: { cls: MY_URL + '_选集', id: data.parse_api_url },\\r\\n            }));\\r\\n            deleteItemByCls(MY_URL + '_选集');\\r\\n            addItemBefore(MY_URL + 'footer', chapterItems);\\r\\n            return 'hiker://empty';\\r\\n          },tabs,lazy,id,AES),\\r\\n        col_type: 'scroll_button',\\r\\n        extra: { id: `${MY_URL}_线路${id}` },\\r\\n      });\\r\\n    });\\r\\n    let currentChapters = lists[currentLine];\\r\\n    if (sortOrder == '#FF0000\\\">倒序') {\\r\\n      currentChapters.reverse();\\r\\n    }\\r\\n    currentChapters.forEach((data) => {\\r\\n      d.push({\\r\\n        title: data.name,\\r\\n        url: lazy(data),\\r\\n        col_type: currentChapters.length > 3 ? 'text_4' : 'text_2',\\r\\n        extra: {\\r\\n          cls: MY_URL + '_选集',\\r\\n          id: data.parse_api_url,\\r\\n        },\\r\\n      });\\r\\n    });\\r\\n    setLastChapterRule('js:' +\\r\\n        $.toString((AES) => {\\r\\n          var json = JSON.parse(AES(JSON.parse(getResCode()).data));\\r\\n          var 选集 = json.vod_play_list.map((data) => data.player_info.show);\\r\\n          var 选集列表 = json.vod_play_list.map((data) => data.urls);\\r\\n          setResult('更新至: 第' + 选集.map((d, i) => 选集列表[i].length).sort((a, b) => b - a)[0] + '集');\\r\\n        },AES)\\r\\n    );\\r\\n    d.push({\\r\\n      col_type: 'big_blank_block',\\r\\n      extra: { id: MY_URL + 'footer' },\\r\\n    });\\r\\n    setResult(d);\\r\\n  },\\r\\n  搜索 = () => {\\r\\n    let body = {\\r\\n      keywords: MY_KEYWORD,\\r\\n      type_id: '0',\\r\\n      page: MY_PAGE,\\r\\n    }\\r\\n    MY_URL = buildUrl(`${config.host}searchList`, body);\\r\\n    var json = JSON.parse(request(MY_URL))\\r\\n    while (/验证码/.test(json.msg)) {\\r\\n    let generateUUID = (() => {\\r\\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\\r\\n        const r = Math.random() * 16 | 0;\\r\\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\\r\\n        return v.toString(16);\\r\\n    });\\r\\n    })()\\r\\n    eval(JSON.parse(request('hiker://page/jxhs?rule=模板·Q')).rule);\\r\\n    let vcode = ssyz(buildUrl(`${config.host}create`.replace('index','verify'), {\\r\\n      key: generateUUID\\r\\n    }), 'num');\\r\\n    body.code = vcode\\r\\n    body.key = generateUUID\\r\\n    MY_URL = buildUrl(`${config.host}searchList`, body);\\r\\n    json = JSON.parse(request(MY_URL))\\r\\n}\\r\\n    setResult(\\r\\n      JSON.parse(AES(json.data)).search_list.map(item => ({\\r\\n        title: item.vod_name,\\r\\n        img: item.vod_pic,\\r\\n        desc: item.vod_remarks,\\r\\n        url: `${config.host}vodDetail#immersiveTheme#?vod_id=${item.vod_id}`,\\r\\n      }))\\r\\n    );\\r\\n  };\\r\\n$.exports = { 一级, 二级, 搜索 };\"}]","icon":"#ff8bc34a","proxy":""}