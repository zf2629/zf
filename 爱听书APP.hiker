海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@爱听书APP@{"last_chapter_rule":"","title":"爱听书APP","author":"zhao","url":"hiker://empty##","version":1,"col_type":"movie_3","class_name":"","type":"music","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet d = [];\n$.require(\"hanshu\").shouye(d);\nsetResult(d);","search_url":"hiker://empty#**","group":"#","searchFind":"js:\nlet d = [];\nlet keyword = MY_URL.split(\"#\")[1];\nd.push({\n    title: \"搜索 => \"+keyword,\n    desc: \"高级搜索\",\n    url: $(\"hiker://empty#page=fypage\").rule((keyword) => {\n        let d = [];\n        $.require(\"hanshu\").search(d, keyword); \n        setResult(d)\n    }, keyword),\n    extra: {\n        pageTitle: \"高级搜索\"\n    }\n});\nsetResult(d);","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"let time = new Date().getDate().toString();\n// log(getItem(\"time\"))\nif (getItem(\"time\") !== time) {\n    toast(\"\\u8be5\\u5c0f\\u7a0b\\u5e8f\\u514d\\u8d39\");\n    setItem(\"time\",time);\n}","pages":"[{\"col_type\":\"movie_3\",\"name\":\"函数\",\"path\":\"hanshu\",\"rule\":\"\\nfunction get1(path1) {\\n    let Toket = \\\"z7jhAuyG95HkBONdHjJMl6C7yfxVnKoz\\\";\\n    let time = Math.floor(Date.now() / 1000);\\n    let token = md5(Toket+time);\\n    let sign = md5(Toket+time+path1.split(\\\"?\\\")[0]);\\n    // (E6:E0:8C:4C:DA:DC:D2:D4:34:9D:5C:1D:4C:B0:79:66:4E:34:BF:E2).replace(/:/g, \\\"\\\").toLowerCase().substring(20, 36)\\n    // AES/ECB signs \\\"YwWZ2ufB1+cDAKPJ\\\"  5c1d4cb079664e34\\n    let appVersion = \\\"2.6.0\\\";\\n    let header1 = {\\n        \\\"User-Agent\\\": \\\"uni-app\\\",\\n        \\\"signs\\\": \\\"CoXx8z8MukyNyslnWhncGSl32YPJlPUQ/WowicoFBMg=\\\",\\n        \\\"sign\\\": sign,\\n        \\\"X-User-Agent\\\": \\\"itingshu\\\",\\n        \\\"Fing\\\": \\\"u6wAJasRA3Y62m/azSnQre75ozztLI1xv3ZbIxi+yYYtHFFV8Hgf1ZH9K6EhEQQhZ/hxsEJguhiJtgdZy93uNMUFasRH4NsLhMrRErJSmJpVc2vl32ZPbkke8D/5VvoU\\\",\\n        \\\"Content-Type\\\": \\\"application/json\\\"\\n    };\\n    let url1;\\n    if (path1.includes(\\\"encrypted\\\")) {\\n        eval(getCryptoJS());\\n        function aes_ecb_en(word) {\\n            var key = CryptoJS.enc.Utf8.parse(\\\"YwWZ2ufB1+cDAKPJ\\\");\\n            var encrypted = CryptoJS.AES.encrypt(word, key, {\\n                mode: CryptoJS.mode.ECB,\\n                padding: CryptoJS.pad.Pkcs7\\n            });\\n            return encrypted.toString();\\n        }\\n        path1 = path1.split(\\\"=\\\");\\n        let encrypted = JSON.parse(path1[1]);\\n        sign = aes_ecb_en('\\\"'+appVersion+'-'+time+'-'+md5(encrypted.bookID+\\\"-\\\"+encrypted.chapterID+\\\".mp3\\\")+'\\\"');\\n        encrypted = aes_ecb_en(JSON.stringify({\\\"bookID\\\":encrypted.bookID,\\\"chapterID\\\":encrypted.chapterID,\\\"time\\\":time,\\\"sign\\\":sign}));\\n        url1 = \\\"https://api.itingshu.iiisss.top\\\"+path1[0]+\\\"=\\\"+encodeURIComponent(encrypted)+\\\"&time=\\\"+time+\\\"&token=\\\"+token+\\\"&appVersion=\\\"+appVersion;\\n    } else {\\n        url1 = \\\"https://api.itingshu.iiisss.top\\\"+path1+\\\"&time=\\\"+time+\\\"&token=\\\"+token+\\\"&appVersion=\\\"+appVersion;\\n    }\\n    let html1 = JSON.parse(fetch(url1, {\\n        headers: header1,\\n        method: \\\"GET\\\"\\n    }));\\n    if (html1.code == 200) return html1;\\n}\\n\\nfunction liebiao1(d, list1) {\\n    list1.forEach(it => {\\n        d.push({\\n            title: it.novel.name,\\n            img: it.novel.cover || it.novel.covers,\\n            url: $(\\\"hiker://empty#immersiveTheme#\\\").rule((id) => {\\n                let d = [];\\n                $.require(\\\"hanshu\\\").erji(d, id);\\n                setResult(d);\\n            }, it.novel.id),\\n            col_type: \\\"card_pic_3\\\",\\n            extra: {\\n                inheritTitle: false\\n            }\\n        });\\n    });\\n}\\n\\nfunction shouye(d) {\\n    let page = MY_PAGE;\\n    if (page == 1) {\\n        let data1 = [\\\"分类\\\", \\\"完本\\\", \\\"排行\\\", \\\"听单\\\"];\\n        let img1 = [\\n            \\\"https://icdn.binmt.cc/2509/68bbb7885568c.png\\\",\\n            \\\"https://icdn.binmt.cc/2509/68bbb81fcb7a3.png\\\",\\n            \\\"https://icdn.binmt.cc/2509/68bbb7883f2d4.png\\\",\\n            \\\"https://icdn.binmt.cc/2509/68bbb865a1eb3.png\\\"\\n        ];\\n        data1.forEach((it, i) => {\\n            d.push({\\n                title: it,\\n                img: img1[i],\\n                url: $(\\\"hiker://empty#page=fypage#noRecordHistory#\\\").rule((str1) => {\\n                    let d = [];\\n                    $.require(\\\"hanshu\\\").rule1(d, str1);\\n                    setResult(d);\\n                }, it),\\n                col_type: \\\"icon_4\\\"\\n            });\\n        });\\n        d.push({\\n            title: \\\"搜索\\\",\\n            url: $.toString(() => {\\n                return $(\\\"hiker://empty#page=fypage#\\\").rule((str1) => {\\n                    let d = [];\\n                    $.require(\\\"hanshu\\\").search(d, str1);\\n                    setResult(d);\\n                }, input);\\n            }),\\n            col_type: \\\"input\\\",\\n            extra: {\\n                pageTitle: \\\"高级搜索\\\"\\n            }\\n        });\\n    }\\n    let html1;\\n    /*\\n    html1 = get1(\\\"/api/apps/personalized?category=&limit=4&offset=\\\");\\n    if (html1) d.push({title:\\\"热门推荐\\\",img:\\\"hiker://images/rule_type_audio\\\",url:\\\"hiker://empty\\\",col_type:\\\"avatar\\\"}); liebiao1(d, html1.result.slice(0,3));\\n    */\\n    html1 = get1(\\\"/api/apps/topList?platform=qq&pagesize=6&orderid=4&page=1\\\");\\n    if (html1) d.push({title:\\\"热门收藏\\\",img:\\\"hiker://images/rule_type_audio\\\",url:\\\"hiker://empty\\\",col_type:\\\"avatar\\\"}); liebiao1(d, html1.data);\\n    html1 = get1(\\\"/api/apps/topList?platform=qq&pagesize=6&orderid=2&page=1\\\");\\n    if (html1) d.push({title:\\\"新书上架\\\",img:\\\"hiker://images/rule_type_audio\\\",url:\\\"hiker://empty\\\",col_type:\\\"avatar\\\"}); liebiao1(d, html1.data);\\n    html1 = get1(\\\"/api/apps/topList?pagesize=15&orderid=0&page=1\\\");\\n    if (html1) d.push({title:\\\"最近更新\\\",img:\\\"hiker://images/rule_type_audio\\\",url:\\\"hiker://empty\\\",col_type:\\\"avatar\\\"}); liebiao1(d, html1.data);\\n    setResult(d);\\n}\\n\\nfunction rule1(d, str1) {\\n    addListener('onClose', $.toString(()=>{\\n        clearMyVar('type1');\\n    }));\\n    let page = MY_PAGE;\\n    let tabs, html1;\\n    switch (str1) {\\n        case \\\"分类\\\":\\n            tabs = [{\\n                \\\"title\\\": \\\"type1\\\",\\n                \\\"names\\\": [\\\"全部小说\\\", \\\"玄幻修真\\\", \\\"灵异惊悚\\\", \\\"都市言情\\\", \\\"军事历史\\\", \\\"官场商战\\\", \\\"综艺娱乐\\\", \\\"儿童故事\\\", \\\"长篇评书\\\", \\\"网游竞技\\\", \\\"相声戏曲\\\", \\\"百家讲坛\\\", \\\"其他有声\\\", \\\"人物传记\\\", \\\"通俗文学\\\", \\\"经典纪实\\\"],\\n                \\\"ids\\\": [\\\"0\\\", \\\"1\\\", \\\"11\\\", \\\"5\\\", \\\"7\\\", \\\"12\\\", \\\"3\\\", \\\"8\\\", \\\"4\\\", \\\"9\\\", \\\"2\\\", \\\"6\\\", \\\"14\\\", \\\"15\\\", \\\"16\\\", \\\"17\\\"]\\n            }];\\n            if (page === 1) setTabs(d, tabs);\\n            html1 = get1(\\\"/api/apps/categorylist?platform=qq&id=\\\"+getMyVar(\\\"type1\\\", \\\"0\\\")+\\\"&limit=20&offset=\\\"+page+\\\"&orderid=0&isover=0&chapternum=0\\\");\\n            if (html1) liebiao1(d, html1.playlists);\\n          break;\\n        case \\\"完本\\\":\\n            tabs = [{\\n                \\\"title\\\": \\\"type1\\\",\\n                \\\"names\\\": [\\\"最新\\\", \\\"人气\\\", \\\"新书\\\", \\\"推荐\\\", \\\"收藏\\\"],\\n                \\\"ids\\\": [\\\"0\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\"]\\n            }];\\n            if (page === 1) setTabs(d, tabs);\\n            html1 = get1(\\\"/api/apps/topList?platform=qq&pagesize=10&orderid=8&page=\\\"+page+\\\"&order=\\\"+getMyVar(\\\"type1\\\", \\\"0\\\"));\\n            if (html1) liebiao1(d, html1.data);\\n          break;\\n        case \\\"排行\\\":\\n            tabs = [{\\n                \\\"title\\\": \\\"type1\\\",\\n                \\\"names\\\": [\\\"最新\\\", \\\"人气\\\", \\\"新书\\\", \\\"推荐\\\", \\\"收藏\\\"],\\n                \\\"ids\\\": [\\\"0\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\"]\\n            }];\\n            if (page === 1) setTabs(d, tabs);\\n            html1 = get1(\\\"/api/apps/topList?platform=qq&pagesize=30&orderid=\\\"+getMyVar(\\\"type1\\\", \\\"0\\\")+\\\"&page=\\\"+page);\\n            if (html1) liebiao1(d, html1.data);\\n          break;\\n        case \\\"听单\\\":\\n            tabs = [{\\n                \\\"title\\\": \\\"type1\\\",\\n                \\\"names\\\": [\\\"最新\\\", \\\"人气\\\", \\\"新书\\\", \\\"推荐\\\", \\\"收藏\\\"],\\n                \\\"ids\\\": [\\\"0\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\"]\\n            }];\\n            if (page === 1) setTabs(d, tabs);\\n            html1 = get1(\\\"/api/apps/topList?platform=qq&pagesize=30&orderid=\\\"+getMyVar(\\\"type1\\\", \\\"0\\\")+\\\"&page=\\\"+page);\\n            if (html1) liebiao1(d, html1.data);\\n          break;\\n    }\\n}\\n\\nfunction search(d, str1) {\\n    addListener('onClose', $.toString(()=>{\\n        clearMyVar(\\\"search_word\\\");\\n    }));\\n    let search_word = getMyVar(\\\"search_word\\\", str1);\\n    let page = MY_PAGE;\\n    if (page == 1) {\\n        d.push({\\n            title: \\\"🔍\\\",\\n            desc: \\\"\\\",\\n            url: $.toString(() => {\\n                putMyVar(\\\"search_word\\\", input);\\n                refreshPage();\\n                return \\\"hiker://empty\\\";\\n            }),\\n            col_type: \\\"input\\\",\\n            extra: {\\n                defaultValue: getMyVar(\\\"search_word\\\", str1)\\n            }\\n        });\\n    }\\n    let html1 = get1(\\\"/api/apps/cloudsearch?platform=qq&key=\\\"+search_word+\\\"&type=1&limit=30&offset=\\\"+page+\\\"&types=lastupdate\\\");\\n    if (html1) liebiao1(d, html1.data);\\n}\\n\\nfunction erji(d, id) {\\n    let erji_url1 = getMyVar(\\\"erji_url1_\\\"+id, \\\"1\\\");\\n    let html1 = storage0.getMyVar(\\\"erji_html1_\\\"+id);\\n    if (!html1) {\\n        html1 = get1(\\\"/api/apps/bookinfo?id=\\\"+id+\\\"&limit=30&offset=1\\\");\\n        storage0.putMyVar(\\\"erji_html1_\\\"+id, html1);\\n    }\\n    html1 = html1.playlist;\\n    let chapterlist = html1.chapterlist;\\n    let playlist = chapterlist.playlist;\\n    d.push({\\n        title: html1.name+\\\"\\\\n\\\"+html1.zhubo,\\n        desc: chapterlist.total+\\\"集\\\"+\\\"\\\\n\\\"+html1.tags,\\n        img: html1.coverImgUrl,\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\n        extra: {\\n            gradient: true\\n        }\\n    });\\n    setDesc(d, html1.description);\\n    chapterlist.selist.forEach(it => {\\n        it.forEach(it => {\\n            d.push({\\n                title: erji_url1 == it.id ? \\\"““\\\"+it.text+\\\"””\\\" : it.text,\\n                url: $(\\\"#noLoading#\\\").lazyRule((id, url1) => {\\n                    putMyVar(\\\"erji_url1_\\\"+id, url1);\\n                    refreshPage();\\n                    return \\\"hiker://empty\\\";\\n                }, id, it.id),\\n                col_type: \\\"scroll_button\\\"\\n            });\\n        })\\n    });\\n    if (erji_url1 != \\\"1\\\") playlist = get1(\\\"/api/apps/bookdir?id=\\\"+id+\\\"&limit=30&offset=\\\"+erji_url1).playlist;\\n    playlist.forEach(it => {\\n        d.push({\\n            title: it.name,\\n            url: $(\\\"\\\").lazyRule((bookID, chapterID) => {\\n                let html1 = $.require(\\\"hanshu\\\").get1(\\\"/api/apps/audio?encrypted=\\\"+JSON.stringify({\\\"bookID\\\":bookID,\\\"chapterID\\\":chapterID}));\\n                if (html1) return html1.data.src + \\\"#isMusic=true#\\\";\\n            }, id, it.id),\\n            col_type: \\\"text_1\\\",\\n            extra: {\\n                id: it.id\\n            }\\n        });\\n    });\\n}\\n\\nfunction getRangeColors() {\\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\\n}\\n\\nfunction setTabs(d, tabs) {\\n    if (!tabs) return;\\n    for (let data of tabs) {\\n        getMyVar(data.title) || putMyVar(data.title, data.ids[0]);\\n        for (let i = 0; i < data.names.length; i++) {\\n            d.push({\\n                title: getMyVar(data.title) === data.ids[i] ? `““””<font color=\\\"${getRangeColors()}\\\"><b>${data.names[i]}</b></font>` : data.names[i],\\n                url: $('#noLoading#').lazyRule((title, id) => {\\n                    if (getMyVar('type1') !== id) {\\n                        clearMyVar('type2');\\n                    }\\n                    if (getMyVar(title) !== id) {\\n                        putMyVar(title, id);\\n                        refreshPage();\\n                    }\\n                    refreshPage();\\n                    return 'hiker://empty';\\n                }, data.title, data.ids[i]),\\n                col_type: 'scroll_button'\\n            });\\n        }\\n        d.push({\\n            col_type: 'blank_block'\\n        });\\n        if (data.arr) {\\n            setTabs(d, data.arr[data.ids.indexOf(getMyVar(data.title))]);\\n        }\\n    }\\n}\\n\\nfunction setDesc(d, desc, num) {\\n    //log(desc)\\n    if (desc == undefined) {\\n        return;\\n    }\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\n    if (desc.replace(/(<br>|\\\\s+|<\\\\/?p>|&nbsp;)/g, '').length == 0) {\\n        return;\\n    }\\n    const mark = 'desc';\\n    num = typeof(num) == 'undefined' ? 45 : num\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\n    desc = desc.replace(/'/g, \\\"&#39;\\\");\\n    desc = desc.replace(/\\\\r\\\\n/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\r/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\n/g, \\\"<br>\\\");\\n\\n    function substr(str, maxLength) {\\n        let len = 0;\\n        for (let i = 0; i < str.length; i++) {\\n            if (str.charCodeAt(i) > 255) {\\n                len += 2;\\n            } else {\\n                len++;\\n            }\\n            if (len > maxLength) {\\n                return str.slice(0, i) + '...';\\n            }\\n        }\\n        return str;\\n    }\\n    let sdesc = substr(desc, num);\\n    var colors = {\\n        show: \\\"black\\\",\\n        hide: \\\"grey\\\"\\n    }\\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\\n        var show = storage0.getItem(m, '0');\\n        var title = findItem('desc').title;\\n        var re = /(<\\\\/small><br>.*?>).+/g;\\n        var exp = '展开:';\\n        var ret = '收起:';\\n        if (show == '1') {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(ret, exp)\\n                    .replace(re, '$1' + sdc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.hide + '$2')\\n            })\\n            storage0.setItem(m, '0');\\n        } else {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(exp, ret)\\n                    .replace(re, '$1' + dc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.show + '$2')\\n            })\\n            storage0.setItem(m, '1');\\n        }\\n        return `hiker://empty`\\n    }, desc, sdesc, mark, colors)\\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\\n    d.push({\\n        title: '' + '<b><font color=\\\"#098AC1\\\">∷剧情简介\\t</font></b>' + \\\"<small><a style='text-decoration: none;' href='\\\" + lazy + \\\"'>\\\" + sc + '</a></small><br><font color=\\\"' + cs + '\\\">' + `${dc}` + '</small>',\\n        col_type: 'rich_text',\\n        extra: {\\n            id: 'desc',\\n            lineSpacing: 6,\\n            textSize: 15,\\n            lineVisible: true,\\n        }\\n    })\\n}\\n\\n$.exports = {\\n    get1,\\n    liebiao1,\\n    shouye,\\n    rule1,\\n    search,\\n    erji\\n}\"}]","icon":"data:image/png;base64,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","proxy":""}